
matrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006704  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b4  080069b4  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069bc  080069bc  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c0  080069c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080069c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  200000f0  08006ab4  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08006ab4  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7f8  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002136  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002f3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019014  00000000  00000000  0002fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddb2  00000000  00000000  00048c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096fcc  00000000  00000000  00056a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eda02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af8  00000000  00000000  000eda54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000f054c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f0570  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000f0 	.word	0x200000f0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080067a8 	.word	0x080067a8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f4 	.word	0x200000f4
 8000100:	080067a8 	.word	0x080067a8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f834 	bl	80004a0 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_lmul>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	46ce      	mov	lr, r9
 8000448:	4647      	mov	r7, r8
 800044a:	b580      	push	{r7, lr}
 800044c:	0007      	movs	r7, r0
 800044e:	4699      	mov	r9, r3
 8000450:	0c3b      	lsrs	r3, r7, #16
 8000452:	469c      	mov	ip, r3
 8000454:	0413      	lsls	r3, r2, #16
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0400      	lsls	r0, r0, #16
 8000460:	0c14      	lsrs	r4, r2, #16
 8000462:	0c00      	lsrs	r0, r0, #16
 8000464:	4345      	muls	r5, r0
 8000466:	434b      	muls	r3, r1
 8000468:	4360      	muls	r0, r4
 800046a:	4361      	muls	r1, r4
 800046c:	18c0      	adds	r0, r0, r3
 800046e:	0c2c      	lsrs	r4, r5, #16
 8000470:	1820      	adds	r0, r4, r0
 8000472:	468c      	mov	ip, r1
 8000474:	4283      	cmp	r3, r0
 8000476:	d903      	bls.n	8000480 <__aeabi_lmul+0x3c>
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	025b      	lsls	r3, r3, #9
 800047c:	4698      	mov	r8, r3
 800047e:	44c4      	add	ip, r8
 8000480:	4649      	mov	r1, r9
 8000482:	4379      	muls	r1, r7
 8000484:	4372      	muls	r2, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	4463      	add	r3, ip
 800048a:	042d      	lsls	r5, r5, #16
 800048c:	0c2d      	lsrs	r5, r5, #16
 800048e:	18c9      	adds	r1, r1, r3
 8000490:	0400      	lsls	r0, r0, #16
 8000492:	1940      	adds	r0, r0, r5
 8000494:	1889      	adds	r1, r1, r2
 8000496:	bcc0      	pop	{r6, r7}
 8000498:	46b9      	mov	r9, r7
 800049a:	46b0      	mov	r8, r6
 800049c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__udivmoddi4>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	4657      	mov	r7, sl
 80004a4:	464e      	mov	r6, r9
 80004a6:	4645      	mov	r5, r8
 80004a8:	46de      	mov	lr, fp
 80004aa:	b5e0      	push	{r5, r6, r7, lr}
 80004ac:	0004      	movs	r4, r0
 80004ae:	000d      	movs	r5, r1
 80004b0:	4692      	mov	sl, r2
 80004b2:	4699      	mov	r9, r3
 80004b4:	b083      	sub	sp, #12
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d830      	bhi.n	800051c <__udivmoddi4+0x7c>
 80004ba:	d02d      	beq.n	8000518 <__udivmoddi4+0x78>
 80004bc:	4649      	mov	r1, r9
 80004be:	4650      	mov	r0, sl
 80004c0:	f000 f8ba 	bl	8000638 <__clzdi2>
 80004c4:	0029      	movs	r1, r5
 80004c6:	0006      	movs	r6, r0
 80004c8:	0020      	movs	r0, r4
 80004ca:	f000 f8b5 	bl	8000638 <__clzdi2>
 80004ce:	1a33      	subs	r3, r6, r0
 80004d0:	4698      	mov	r8, r3
 80004d2:	3b20      	subs	r3, #32
 80004d4:	469b      	mov	fp, r3
 80004d6:	d433      	bmi.n	8000540 <__udivmoddi4+0xa0>
 80004d8:	465a      	mov	r2, fp
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	4642      	mov	r2, r8
 80004e0:	001f      	movs	r7, r3
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	001e      	movs	r6, r3
 80004e8:	42af      	cmp	r7, r5
 80004ea:	d83a      	bhi.n	8000562 <__udivmoddi4+0xc2>
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d100      	bne.n	80004f2 <__udivmoddi4+0x52>
 80004f0:	e078      	b.n	80005e4 <__udivmoddi4+0x144>
 80004f2:	465b      	mov	r3, fp
 80004f4:	1ba4      	subs	r4, r4, r6
 80004f6:	41bd      	sbcs	r5, r7
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	da00      	bge.n	80004fe <__udivmoddi4+0x5e>
 80004fc:	e075      	b.n	80005ea <__udivmoddi4+0x14a>
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	465a      	mov	r2, fp
 800050a:	4093      	lsls	r3, r2
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	4642      	mov	r2, r8
 8000512:	4093      	lsls	r3, r2
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	e028      	b.n	800056a <__udivmoddi4+0xca>
 8000518:	4282      	cmp	r2, r0
 800051a:	d9cf      	bls.n	80004bc <__udivmoddi4+0x1c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <__udivmoddi4+0x8e>
 800052a:	601c      	str	r4, [r3, #0]
 800052c:	605d      	str	r5, [r3, #4]
 800052e:	9800      	ldr	r0, [sp, #0]
 8000530:	9901      	ldr	r1, [sp, #4]
 8000532:	b003      	add	sp, #12
 8000534:	bcf0      	pop	{r4, r5, r6, r7}
 8000536:	46bb      	mov	fp, r7
 8000538:	46b2      	mov	sl, r6
 800053a:	46a9      	mov	r9, r5
 800053c:	46a0      	mov	r8, r4
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	4642      	mov	r2, r8
 8000542:	2320      	movs	r3, #32
 8000544:	1a9b      	subs	r3, r3, r2
 8000546:	4652      	mov	r2, sl
 8000548:	40da      	lsrs	r2, r3
 800054a:	4641      	mov	r1, r8
 800054c:	0013      	movs	r3, r2
 800054e:	464a      	mov	r2, r9
 8000550:	408a      	lsls	r2, r1
 8000552:	0017      	movs	r7, r2
 8000554:	4642      	mov	r2, r8
 8000556:	431f      	orrs	r7, r3
 8000558:	4653      	mov	r3, sl
 800055a:	4093      	lsls	r3, r2
 800055c:	001e      	movs	r6, r3
 800055e:	42af      	cmp	r7, r5
 8000560:	d9c4      	bls.n	80004ec <__udivmoddi4+0x4c>
 8000562:	2200      	movs	r2, #0
 8000564:	2300      	movs	r3, #0
 8000566:	9200      	str	r2, [sp, #0]
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	4643      	mov	r3, r8
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0d9      	beq.n	8000524 <__udivmoddi4+0x84>
 8000570:	07fb      	lsls	r3, r7, #31
 8000572:	0872      	lsrs	r2, r6, #1
 8000574:	431a      	orrs	r2, r3
 8000576:	4646      	mov	r6, r8
 8000578:	087b      	lsrs	r3, r7, #1
 800057a:	e00e      	b.n	800059a <__udivmoddi4+0xfa>
 800057c:	42ab      	cmp	r3, r5
 800057e:	d101      	bne.n	8000584 <__udivmoddi4+0xe4>
 8000580:	42a2      	cmp	r2, r4
 8000582:	d80c      	bhi.n	800059e <__udivmoddi4+0xfe>
 8000584:	1aa4      	subs	r4, r4, r2
 8000586:	419d      	sbcs	r5, r3
 8000588:	2001      	movs	r0, #1
 800058a:	1924      	adds	r4, r4, r4
 800058c:	416d      	adcs	r5, r5
 800058e:	2100      	movs	r1, #0
 8000590:	3e01      	subs	r6, #1
 8000592:	1824      	adds	r4, r4, r0
 8000594:	414d      	adcs	r5, r1
 8000596:	2e00      	cmp	r6, #0
 8000598:	d006      	beq.n	80005a8 <__udivmoddi4+0x108>
 800059a:	42ab      	cmp	r3, r5
 800059c:	d9ee      	bls.n	800057c <__udivmoddi4+0xdc>
 800059e:	3e01      	subs	r6, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d1f8      	bne.n	800059a <__udivmoddi4+0xfa>
 80005a8:	9800      	ldr	r0, [sp, #0]
 80005aa:	9901      	ldr	r1, [sp, #4]
 80005ac:	465b      	mov	r3, fp
 80005ae:	1900      	adds	r0, r0, r4
 80005b0:	4169      	adcs	r1, r5
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db24      	blt.n	8000600 <__udivmoddi4+0x160>
 80005b6:	002b      	movs	r3, r5
 80005b8:	465a      	mov	r2, fp
 80005ba:	4644      	mov	r4, r8
 80005bc:	40d3      	lsrs	r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	40e2      	lsrs	r2, r4
 80005c2:	001c      	movs	r4, r3
 80005c4:	465b      	mov	r3, fp
 80005c6:	0015      	movs	r5, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db2a      	blt.n	8000622 <__udivmoddi4+0x182>
 80005cc:	0026      	movs	r6, r4
 80005ce:	409e      	lsls	r6, r3
 80005d0:	0033      	movs	r3, r6
 80005d2:	0026      	movs	r6, r4
 80005d4:	4647      	mov	r7, r8
 80005d6:	40be      	lsls	r6, r7
 80005d8:	0032      	movs	r2, r6
 80005da:	1a80      	subs	r0, r0, r2
 80005dc:	4199      	sbcs	r1, r3
 80005de:	9000      	str	r0, [sp, #0]
 80005e0:	9101      	str	r1, [sp, #4]
 80005e2:	e79f      	b.n	8000524 <__udivmoddi4+0x84>
 80005e4:	42a3      	cmp	r3, r4
 80005e6:	d8bc      	bhi.n	8000562 <__udivmoddi4+0xc2>
 80005e8:	e783      	b.n	80004f2 <__udivmoddi4+0x52>
 80005ea:	4642      	mov	r2, r8
 80005ec:	2320      	movs	r3, #32
 80005ee:	2100      	movs	r1, #0
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	2200      	movs	r2, #0
 80005f4:	9100      	str	r1, [sp, #0]
 80005f6:	9201      	str	r2, [sp, #4]
 80005f8:	2201      	movs	r2, #1
 80005fa:	40da      	lsrs	r2, r3
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	e786      	b.n	800050e <__udivmoddi4+0x6e>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	4646      	mov	r6, r8
 800060a:	409a      	lsls	r2, r3
 800060c:	0023      	movs	r3, r4
 800060e:	40f3      	lsrs	r3, r6
 8000610:	4644      	mov	r4, r8
 8000612:	4313      	orrs	r3, r2
 8000614:	002a      	movs	r2, r5
 8000616:	40e2      	lsrs	r2, r4
 8000618:	001c      	movs	r4, r3
 800061a:	465b      	mov	r3, fp
 800061c:	0015      	movs	r5, r2
 800061e:	2b00      	cmp	r3, #0
 8000620:	dad4      	bge.n	80005cc <__udivmoddi4+0x12c>
 8000622:	4642      	mov	r2, r8
 8000624:	002f      	movs	r7, r5
 8000626:	2320      	movs	r3, #32
 8000628:	0026      	movs	r6, r4
 800062a:	4097      	lsls	r7, r2
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	40de      	lsrs	r6, r3
 8000630:	003b      	movs	r3, r7
 8000632:	4333      	orrs	r3, r6
 8000634:	e7cd      	b.n	80005d2 <__udivmoddi4+0x132>
 8000636:	46c0      	nop			; (mov r8, r8)

08000638 <__clzdi2>:
 8000638:	b510      	push	{r4, lr}
 800063a:	2900      	cmp	r1, #0
 800063c:	d103      	bne.n	8000646 <__clzdi2+0xe>
 800063e:	f000 f807 	bl	8000650 <__clzsi2>
 8000642:	3020      	adds	r0, #32
 8000644:	e002      	b.n	800064c <__clzdi2+0x14>
 8000646:	0008      	movs	r0, r1
 8000648:	f000 f802 	bl	8000650 <__clzsi2>
 800064c:	bd10      	pop	{r4, pc}
 800064e:	46c0      	nop			; (mov r8, r8)

08000650 <__clzsi2>:
 8000650:	211c      	movs	r1, #28
 8000652:	2301      	movs	r3, #1
 8000654:	041b      	lsls	r3, r3, #16
 8000656:	4298      	cmp	r0, r3
 8000658:	d301      	bcc.n	800065e <__clzsi2+0xe>
 800065a:	0c00      	lsrs	r0, r0, #16
 800065c:	3910      	subs	r1, #16
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	4298      	cmp	r0, r3
 8000662:	d301      	bcc.n	8000668 <__clzsi2+0x18>
 8000664:	0a00      	lsrs	r0, r0, #8
 8000666:	3908      	subs	r1, #8
 8000668:	091b      	lsrs	r3, r3, #4
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0x22>
 800066e:	0900      	lsrs	r0, r0, #4
 8000670:	3904      	subs	r1, #4
 8000672:	a202      	add	r2, pc, #8	; (adr r2, 800067c <__clzsi2+0x2c>)
 8000674:	5c10      	ldrb	r0, [r2, r0]
 8000676:	1840      	adds	r0, r0, r1
 8000678:	4770      	bx	lr
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	02020304 	.word	0x02020304
 8000680:	01010101 	.word	0x01010101
	...

0800068c <gm_ReceiveMyID>:

Player myself ={.id =5,.name=PLAYER_NAME,.playerState=STATUS_ALIVE,.score=0};
Player *playerPtr = &myself;


void gm_ReceiveMyID(const uint8_t *inData,  const size_t *inLen) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	g_myId = inData[3];
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	78da      	ldrb	r2, [r3, #3]
 800069a:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <gm_ReceiveMyID+0x1c>)
 800069c:	701a      	strb	r2, [r3, #0]
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	2000010c 	.word	0x2000010c

080006ac <gm_SendName>:

size_t gm_SendName(uint8_t *payload) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	memcpy(payload, playerPtr->name, sizeof(playerPtr->name));
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <gm_SendName+0x24>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1c59      	adds	r1, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2214      	movs	r2, #20
 80006be:	0018      	movs	r0, r3
 80006c0:	f004 ff76 	bl	80055b0 <memcpy>
	return sizeof(playerPtr->name);
 80006c4:	2314      	movs	r3, #20

}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	2000007c 	.word	0x2000007c

080006d4 <gm_SendBoard>:
size_t gm_SendBoard(uint8_t *payload) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	logic();
 80006dc:	f000 f882 	bl	80007e4 <logic>
	memcpy(payload, playerPtr->board, sizeof(playerPtr->board));
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <gm_SendBoard+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3317      	adds	r3, #23
 80006e6:	0019      	movs	r1, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2264      	movs	r2, #100	; 0x64
 80006ec:	0018      	movs	r0, r3
 80006ee:	f004 ff5f 	bl	80055b0 <memcpy>
	return sizeof(playerPtr->board);
 80006f2:	2364      	movs	r3, #100	; 0x64

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b002      	add	sp, #8
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000007c 	.word	0x2000007c

08000700 <gm_SendCoord>:
size_t gm_SendCoord(uint8_t *payload) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	/*functie de trimitere a coordonatelor*/

	uint8_t Cordonates [3] = { 0x00, 0x02, 0x03 };
 8000708:	200c      	movs	r0, #12
 800070a:	183b      	adds	r3, r7, r0
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <gm_SendCoord+0x30>)
 800070e:	8811      	ldrh	r1, [r2, #0]
 8000710:	8019      	strh	r1, [r3, #0]
 8000712:	7892      	ldrb	r2, [r2, #2]
 8000714:	709a      	strb	r2, [r3, #2]
	memcpy(payload,Cordonates,sizeof(Cordonates));
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	183b      	adds	r3, r7, r0
 800071a:	0010      	movs	r0, r2
 800071c:	0019      	movs	r1, r3
 800071e:	2303      	movs	r3, #3
 8000720:	001a      	movs	r2, r3
 8000722:	f004 ff45 	bl	80055b0 <memcpy>
	return sizeof(Cordonates);
 8000726:	2303      	movs	r3, #3
}
 8000728:	0018      	movs	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	b004      	add	sp, #16
 800072e:	bd80      	pop	{r7, pc}
 8000730:	080067c0 	.word	0x080067c0

08000734 <gm_ReceiveStartRound>:

void gm_ReceiveStartRound(const uint8_t *inData, const size_t *inLen){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}

08000746 <gm_ReceiveConfirmHit>:

void gm_ReceiveConfirmHit(const uint8_t *inData, const size_t *inLen){
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	6039      	str	r1, [r7, #0]
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}

08000758 <gm_ReceiveTargeted>:

void gm_ReceiveTargeted(const uint8_t *inData, const size_t *inLen){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}

0800076a <gm_ReceiveGameEnd>:

void gm_ReceiveGameEnd(const uint8_t *inData, const size_t *inLen){
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}

0800077c <GetRand>:
#include <stdlib.h>
#include <stdint.h>
#include <time.h>

uint8_t GetRand(uint8_t min, uint8_t max) /* http://faq.cprogramming.com/cgi-bin/smartfaq.cgi?answer=1042005782&id=1043284385  */
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	0002      	movs	r2, r0
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	1c0a      	adds	r2, r1, #0
 800078c:	701a      	strb	r2, [r3, #0]
	static uint8_t Init = 0;
	uint8_t rc;

	if (Init == 0)
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <GetRand+0x64>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d10b      	bne.n	80007ae <GetRand+0x32>
	{
		srand(time(NULL));
 8000796:	2000      	movs	r0, #0
 8000798:	f004 ff8a 	bl	80056b0 <time>
 800079c:	0002      	movs	r2, r0
 800079e:	000b      	movs	r3, r1
 80007a0:	0013      	movs	r3, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f004 ff16 	bl	80055d4 <srand>
		Init = 1;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <GetRand+0x64>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
	}
	rc = (rand() % (max - min + 1) + min);
 80007ae:	f004 ff41 	bl	8005634 <rand>
 80007b2:	1dbb      	adds	r3, r7, #6
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	3301      	adds	r3, #1
 80007be:	0019      	movs	r1, r3
 80007c0:	f7ff fe1a 	bl	80003f8 <__aeabi_idivmod>
 80007c4:	000b      	movs	r3, r1
 80007c6:	b2d9      	uxtb	r1, r3
 80007c8:	200f      	movs	r0, #15
 80007ca:	183b      	adds	r3, r7, r0
 80007cc:	1dfa      	adds	r2, r7, #7
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	188a      	adds	r2, r1, r2
 80007d2:	701a      	strb	r2, [r3, #0]
	return (rc);
 80007d4:	183b      	adds	r3, r7, r0
 80007d6:	781b      	ldrb	r3, [r3, #0]
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b004      	add	sp, #16
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000010d 	.word	0x2000010d

080007e4 <logic>:
uint8_t logic()
{
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
	uint8_t coll, row, x1, y1, x2, y2, x3, y3, a1, a2, a3, generat2 = 0, generat3 = 0;
 80007ea:	2309      	movs	r3, #9
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
 80007f2:	2308      	movs	r3, #8
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]

	for (uint8_t rowI = 0; rowI < 10; rowI++)
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	e020      	b.n	8000844 <logic+0x60>
	{
		for (uint8_t colI = 0; colI < 10; colI++)
 8000802:	1dbb      	adds	r3, r7, #6
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e013      	b.n	8000832 <logic+0x4e>
		{
			playerPtr->board[rowI][colI] = 0; //tabla goala
 800080a:	4bb4      	ldr	r3, [pc, #720]	; (8000adc <logic+0x2f8>)
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	1dbb      	adds	r3, r7, #6
 8000814:	7819      	ldrb	r1, [r3, #0]
 8000816:	0013      	movs	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	189b      	adds	r3, r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	18c3      	adds	r3, r0, r3
 8000820:	185b      	adds	r3, r3, r1
 8000822:	3317      	adds	r3, #23
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
		for (uint8_t colI = 0; colI < 10; colI++)
 8000828:	1dbb      	adds	r3, r7, #6
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	1dbb      	adds	r3, r7, #6
 800082e:	3201      	adds	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	1dbb      	adds	r3, r7, #6
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b09      	cmp	r3, #9
 8000838:	d9e7      	bls.n	800080a <logic+0x26>
	for (uint8_t rowI = 0; rowI < 10; rowI++)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	3201      	adds	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b09      	cmp	r3, #9
 800084a:	d9da      	bls.n	8000802 <logic+0x1e>
		}
	}
	//avionul 1
	//randomizare a1,x1, y1;
	a1 = GetRand(1, 4);		// directiile posibile ale varfului
 800084c:	1d7c      	adds	r4, r7, #5
 800084e:	2104      	movs	r1, #4
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff ff93 	bl	800077c <GetRand>
 8000856:	0003      	movs	r3, r0
 8000858:	7023      	strb	r3, [r4, #0]

	if (a1 == 1)			// a1 avionul 1 orientat in sus
 800085a:	1d7b      	adds	r3, r7, #5
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d110      	bne.n	8000884 <logic+0xa0>
	{
		x1 = GetRand(2, 7); // pzitionarea pilotului pe Axa x spre stanga
 8000862:	230f      	movs	r3, #15
 8000864:	18fc      	adds	r4, r7, r3
 8000866:	2107      	movs	r1, #7
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff ff87 	bl	800077c <GetRand>
 800086e:	0003      	movs	r3, r0
 8000870:	7023      	strb	r3, [r4, #0]
		y1 = GetRand(0, 6); // pozitionarea pilotului pe Axa y in jos
 8000872:	230e      	movs	r3, #14
 8000874:	18fc      	adds	r4, r7, r3
 8000876:	2106      	movs	r1, #6
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff ff7f 	bl	800077c <GetRand>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]
 8000882:	e03d      	b.n	8000900 <logic+0x11c>
	}
	else if (a1 == 2)		// avionul 1 orientat spre dreapta
 8000884:	1d7b      	adds	r3, r7, #5
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b02      	cmp	r3, #2
 800088a:	d110      	bne.n	80008ae <logic+0xca>
	{
		x1 = GetRand(3, 9); // pzitionarea pilotului pe Axa x spre stanga
 800088c:	230f      	movs	r3, #15
 800088e:	18fc      	adds	r4, r7, r3
 8000890:	2109      	movs	r1, #9
 8000892:	2003      	movs	r0, #3
 8000894:	f7ff ff72 	bl	800077c <GetRand>
 8000898:	0003      	movs	r3, r0
 800089a:	7023      	strb	r3, [r4, #0]
		y1 = GetRand(2, 7); // pzitionarea pilotului pe Axa y in jos
 800089c:	230e      	movs	r3, #14
 800089e:	18fc      	adds	r4, r7, r3
 80008a0:	2107      	movs	r1, #7
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff ff6a 	bl	800077c <GetRand>
 80008a8:	0003      	movs	r3, r0
 80008aa:	7023      	strb	r3, [r4, #0]
 80008ac:	e028      	b.n	8000900 <logic+0x11c>
	}
	else if (a1 == 3)		// avionul 1 Pilotul in jos
 80008ae:	1d7b      	adds	r3, r7, #5
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d110      	bne.n	80008d8 <logic+0xf4>
	{
		x1 = GetRand(2, 7); // pzitionarea pilotului pe Axa x spre stanga
 80008b6:	230f      	movs	r3, #15
 80008b8:	18fc      	adds	r4, r7, r3
 80008ba:	2107      	movs	r1, #7
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff ff5d 	bl	800077c <GetRand>
 80008c2:	0003      	movs	r3, r0
 80008c4:	7023      	strb	r3, [r4, #0]
		y1 = GetRand(3, 9); // pzitionarea pilotului pe Axa y in jos
 80008c6:	230e      	movs	r3, #14
 80008c8:	18fc      	adds	r4, r7, r3
 80008ca:	2109      	movs	r1, #9
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff ff55 	bl	800077c <GetRand>
 80008d2:	0003      	movs	r3, r0
 80008d4:	7023      	strb	r3, [r4, #0]
 80008d6:	e013      	b.n	8000900 <logic+0x11c>
	}
	else if (a1 == 4)		//avionul 1 Pilotul la stanga
 80008d8:	1d7b      	adds	r3, r7, #5
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d10f      	bne.n	8000900 <logic+0x11c>
	{
		x1 = GetRand(0, 6); //pzitionarea pilotului pe Axa x spre stanga
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fc      	adds	r4, r7, r3
 80008e4:	2106      	movs	r1, #6
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff ff48 	bl	800077c <GetRand>
 80008ec:	0003      	movs	r3, r0
 80008ee:	7023      	strb	r3, [r4, #0]
		y1 = GetRand(2, 7); //pzitionarea pilotului pe Axa y in jos
 80008f0:	230e      	movs	r3, #14
 80008f2:	18fc      	adds	r4, r7, r3
 80008f4:	2107      	movs	r1, #7
 80008f6:	2002      	movs	r0, #2
 80008f8:	f7ff ff40 	bl	800077c <GetRand>
 80008fc:	0003      	movs	r3, r0
 80008fe:	7023      	strb	r3, [r4, #0]
	}
	row = x1;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	220f      	movs	r2, #15
 8000904:	18ba      	adds	r2, r7, r2
 8000906:	7812      	ldrb	r2, [r2, #0]
 8000908:	701a      	strb	r2, [r3, #0]
	coll = y1;
 800090a:	1cfb      	adds	r3, r7, #3
 800090c:	220e      	movs	r2, #14
 800090e:	18ba      	adds	r2, r7, r2
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	701a      	strb	r2, [r3, #0]

	if (a1 == 1)
 8000914:	1d7b      	adds	r3, r7, #5
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d000      	beq.n	800091e <logic+0x13a>
 800091c:	e0e0      	b.n	8000ae0 <logic+0x2fc>
	{
		//varful in sus
		playerPtr->board[row][coll] = 'A';
 800091e:	4b6f      	ldr	r3, [pc, #444]	; (8000adc <logic+0x2f8>)
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	1cfb      	adds	r3, r7, #3
 8000928:	7819      	ldrb	r1, [r3, #0]
 800092a:	0013      	movs	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	189b      	adds	r3, r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	18c3      	adds	r3, r0, r3
 8000934:	185b      	adds	r3, r3, r1
 8000936:	3317      	adds	r3, #23
 8000938:	2241      	movs	r2, #65	; 0x41
 800093a:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
		playerPtr->board[row + 2][coll + 1] =
		playerPtr->board[row][coll + 2] =
		playerPtr->board[row - 1][coll + 3] =
		playerPtr->board[row][coll + 3] =
		playerPtr->board[row + 1][coll + 3] = 'a';
 800093c:	4b67      	ldr	r3, [pc, #412]	; (8000adc <logic+0x2f8>)
 800093e:	681e      	ldr	r6, [r3, #0]
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	1c59      	adds	r1, r3, #1
 8000946:	1cfb      	adds	r3, r7, #3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	1cdd      	adds	r5, r3, #3
 800094c:	000b      	movs	r3, r1
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	185b      	adds	r3, r3, r1
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	18f3      	adds	r3, r6, r3
 8000956:	195b      	adds	r3, r3, r5
 8000958:	3317      	adds	r3, #23
 800095a:	2261      	movs	r2, #97	; 0x61
 800095c:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll + 3] =
 800095e:	4b5f      	ldr	r3, [pc, #380]	; (8000adc <logic+0x2f8>)
 8000960:	681c      	ldr	r4, [r3, #0]
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	1cfb      	adds	r3, r7, #3
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	1cd8      	adds	r0, r3, #3
		playerPtr->board[row + 1][coll + 3] = 'a';
 800096c:	000b      	movs	r3, r1
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	185b      	adds	r3, r3, r1
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	18f3      	adds	r3, r6, r3
 8000976:	195b      	adds	r3, r3, r5
 8000978:	3317      	adds	r3, #23
 800097a:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll + 3] =
 800097c:	0013      	movs	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	189b      	adds	r3, r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	18e3      	adds	r3, r4, r3
 8000986:	181b      	adds	r3, r3, r0
 8000988:	3317      	adds	r3, #23
 800098a:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 3] =
 800098c:	4b53      	ldr	r3, [pc, #332]	; (8000adc <logic+0x2f8>)
 800098e:	681e      	ldr	r6, [r3, #0]
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	1e59      	subs	r1, r3, #1
 8000996:	1cfb      	adds	r3, r7, #3
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	1cdd      	adds	r5, r3, #3
		playerPtr->board[row][coll + 3] =
 800099c:	0013      	movs	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	189b      	adds	r3, r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	18e3      	adds	r3, r4, r3
 80009a6:	181b      	adds	r3, r3, r0
 80009a8:	3317      	adds	r3, #23
 80009aa:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 3] =
 80009ac:	000b      	movs	r3, r1
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	185b      	adds	r3, r3, r1
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	18f3      	adds	r3, r6, r3
 80009b6:	195b      	adds	r3, r3, r5
 80009b8:	3317      	adds	r3, #23
 80009ba:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll + 2] =
 80009bc:	4b47      	ldr	r3, [pc, #284]	; (8000adc <logic+0x2f8>)
 80009be:	681c      	ldr	r4, [r3, #0]
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	1cfb      	adds	r3, r7, #3
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	1c98      	adds	r0, r3, #2
		playerPtr->board[row - 1][coll + 3] =
 80009ca:	000b      	movs	r3, r1
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	185b      	adds	r3, r3, r1
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	18f3      	adds	r3, r6, r3
 80009d4:	195b      	adds	r3, r3, r5
 80009d6:	3317      	adds	r3, #23
 80009d8:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll + 2] =
 80009da:	0013      	movs	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	189b      	adds	r3, r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	18e3      	adds	r3, r4, r3
 80009e4:	181b      	adds	r3, r3, r0
 80009e6:	3317      	adds	r3, #23
 80009e8:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 2][coll + 1] =
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <logic+0x2f8>)
 80009ec:	681e      	ldr	r6, [r3, #0]
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	1c99      	adds	r1, r3, #2
 80009f4:	1cfb      	adds	r3, r7, #3
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	1c5d      	adds	r5, r3, #1
		playerPtr->board[row][coll + 2] =
 80009fa:	0013      	movs	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	18e3      	adds	r3, r4, r3
 8000a04:	181b      	adds	r3, r3, r0
 8000a06:	3317      	adds	r3, #23
 8000a08:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 2][coll + 1] =
 8000a0a:	000b      	movs	r3, r1
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	185b      	adds	r3, r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	18f3      	adds	r3, r6, r3
 8000a14:	195b      	adds	r3, r3, r5
 8000a16:	3317      	adds	r3, #23
 8000a18:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <logic+0x2f8>)
 8000a1c:	681c      	ldr	r4, [r3, #0]
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	1cfb      	adds	r3, r7, #3
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	1c58      	adds	r0, r3, #1
		playerPtr->board[row + 2][coll + 1] =
 8000a2a:	000b      	movs	r3, r1
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	185b      	adds	r3, r3, r1
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	18f3      	adds	r3, r6, r3
 8000a34:	195b      	adds	r3, r3, r5
 8000a36:	3317      	adds	r3, #23
 8000a38:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8000a3a:	0013      	movs	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	189b      	adds	r3, r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	18e3      	adds	r3, r4, r3
 8000a44:	181b      	adds	r3, r3, r0
 8000a46:	3317      	adds	r3, #23
 8000a48:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row][coll + 1] =
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <logic+0x2f8>)
 8000a4c:	681e      	ldr	r6, [r3, #0]
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	7819      	ldrb	r1, [r3, #0]
 8000a52:	1cfb      	adds	r3, r7, #3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	1c5d      	adds	r5, r3, #1
		playerPtr->board[row + 1][coll + 1] =
 8000a58:	0013      	movs	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	189b      	adds	r3, r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	18e3      	adds	r3, r4, r3
 8000a62:	181b      	adds	r3, r3, r0
 8000a64:	3317      	adds	r3, #23
 8000a66:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row][coll + 1] =
 8000a68:	000b      	movs	r3, r1
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	185b      	adds	r3, r3, r1
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	18f3      	adds	r3, r6, r3
 8000a72:	195b      	adds	r3, r3, r5
 8000a74:	3317      	adds	r3, #23
 8000a76:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <logic+0x2f8>)
 8000a7a:	681c      	ldr	r4, [r3, #0]
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	1e5a      	subs	r2, r3, #1
 8000a82:	1cfb      	adds	r3, r7, #3
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	1c58      	adds	r0, r3, #1
		playerPtr->board[row][coll + 1] =
 8000a88:	000b      	movs	r3, r1
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	185b      	adds	r3, r3, r1
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	18f3      	adds	r3, r6, r3
 8000a92:	195b      	adds	r3, r3, r5
 8000a94:	3317      	adds	r3, #23
 8000a96:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 8000a98:	0013      	movs	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	189b      	adds	r3, r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	18e3      	adds	r3, r4, r3
 8000aa2:	181b      	adds	r3, r3, r0
 8000aa4:	3317      	adds	r3, #23
 8000aa6:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 2][coll + 1] =
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <logic+0x2f8>)
 8000aaa:	681e      	ldr	r6, [r3, #0]
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	1e99      	subs	r1, r3, #2
 8000ab2:	1cfb      	adds	r3, r7, #3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	1c5d      	adds	r5, r3, #1
		playerPtr->board[row - 1][coll + 1] =
 8000ab8:	0013      	movs	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	189b      	adds	r3, r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	18e3      	adds	r3, r4, r3
 8000ac2:	181b      	adds	r3, r3, r0
 8000ac4:	3317      	adds	r3, #23
 8000ac6:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 2][coll + 1] =
 8000ac8:	000b      	movs	r3, r1
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	185b      	adds	r3, r3, r1
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	18f3      	adds	r3, r6, r3
 8000ad2:	195b      	adds	r3, r3, r5
 8000ad4:	3317      	adds	r3, #23
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	f001 f986 	bl	8001de8 <logic+0x1604>
 8000adc:	2000007c 	.word	0x2000007c
	}
	else if (a1 == 2)
 8000ae0:	1d7b      	adds	r3, r7, #5
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d000      	beq.n	8000aea <logic+0x306>
 8000ae8:	e0de      	b.n	8000ca8 <logic+0x4c4>
	{
		//varful spre dreapta
		playerPtr->board[row][coll] = 'A';
 8000aea:	4be1      	ldr	r3, [pc, #900]	; (8000e70 <logic+0x68c>)
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	1cfb      	adds	r3, r7, #3
 8000af4:	7819      	ldrb	r1, [r3, #0]
 8000af6:	0013      	movs	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	189b      	adds	r3, r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	18c3      	adds	r3, r0, r3
 8000b00:	185b      	adds	r3, r3, r1
 8000b02:	3317      	adds	r3, #23
 8000b04:	2241      	movs	r2, #65	; 0x41
 8000b06:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
		playerPtr->board[row - 1][coll + 2] =
		playerPtr->board[row - 2][coll] =
		playerPtr->board[row - 3][coll - 1] =
		playerPtr->board[row - 3][coll] =
		playerPtr->board[row - 3][coll + 1] = 'a';
 8000b08:	4bd9      	ldr	r3, [pc, #868]	; (8000e70 <logic+0x68c>)
 8000b0a:	681e      	ldr	r6, [r3, #0]
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	1ed9      	subs	r1, r3, #3
 8000b12:	1cfb      	adds	r3, r7, #3
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	1c5d      	adds	r5, r3, #1
 8000b18:	000b      	movs	r3, r1
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	185b      	adds	r3, r3, r1
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	18f3      	adds	r3, r6, r3
 8000b22:	195b      	adds	r3, r3, r5
 8000b24:	3317      	adds	r3, #23
 8000b26:	2261      	movs	r2, #97	; 0x61
 8000b28:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 3][coll] =
 8000b2a:	4bd1      	ldr	r3, [pc, #836]	; (8000e70 <logic+0x68c>)
 8000b2c:	681c      	ldr	r4, [r3, #0]
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	1eda      	subs	r2, r3, #3
 8000b34:	1cfb      	adds	r3, r7, #3
 8000b36:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row - 3][coll + 1] = 'a';
 8000b38:	000b      	movs	r3, r1
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	185b      	adds	r3, r3, r1
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	18f3      	adds	r3, r6, r3
 8000b42:	195b      	adds	r3, r3, r5
 8000b44:	3317      	adds	r3, #23
 8000b46:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 3][coll] =
 8000b48:	0013      	movs	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	189b      	adds	r3, r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	18e3      	adds	r3, r4, r3
 8000b52:	181b      	adds	r3, r3, r0
 8000b54:	3317      	adds	r3, #23
 8000b56:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 3][coll - 1] =
 8000b58:	4bc5      	ldr	r3, [pc, #788]	; (8000e70 <logic+0x68c>)
 8000b5a:	681e      	ldr	r6, [r3, #0]
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	1ed9      	subs	r1, r3, #3
 8000b62:	1cfb      	adds	r3, r7, #3
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row - 3][coll] =
 8000b68:	0013      	movs	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	189b      	adds	r3, r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	18e3      	adds	r3, r4, r3
 8000b72:	181b      	adds	r3, r3, r0
 8000b74:	3317      	adds	r3, #23
 8000b76:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 3][coll - 1] =
 8000b78:	000b      	movs	r3, r1
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	185b      	adds	r3, r3, r1
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	18f3      	adds	r3, r6, r3
 8000b82:	195b      	adds	r3, r3, r5
 8000b84:	3317      	adds	r3, #23
 8000b86:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 2][coll] =
 8000b88:	4bb9      	ldr	r3, [pc, #740]	; (8000e70 <logic+0x68c>)
 8000b8a:	681c      	ldr	r4, [r3, #0]
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	1e9a      	subs	r2, r3, #2
 8000b92:	1cfb      	adds	r3, r7, #3
 8000b94:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row - 3][coll - 1] =
 8000b96:	000b      	movs	r3, r1
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	185b      	adds	r3, r3, r1
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	18f3      	adds	r3, r6, r3
 8000ba0:	195b      	adds	r3, r3, r5
 8000ba2:	3317      	adds	r3, #23
 8000ba4:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 2][coll] =
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	189b      	adds	r3, r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	18e3      	adds	r3, r4, r3
 8000bb0:	181b      	adds	r3, r3, r0
 8000bb2:	3317      	adds	r3, #23
 8000bb4:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 2] =
 8000bb6:	4bae      	ldr	r3, [pc, #696]	; (8000e70 <logic+0x68c>)
 8000bb8:	681e      	ldr	r6, [r3, #0]
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	1e59      	subs	r1, r3, #1
 8000bc0:	1cfb      	adds	r3, r7, #3
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	1c9d      	adds	r5, r3, #2
		playerPtr->board[row - 2][coll] =
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	189b      	adds	r3, r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	18e3      	adds	r3, r4, r3
 8000bd0:	181b      	adds	r3, r3, r0
 8000bd2:	3317      	adds	r3, #23
 8000bd4:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 2] =
 8000bd6:	000b      	movs	r3, r1
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	185b      	adds	r3, r3, r1
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	18f3      	adds	r3, r6, r3
 8000be0:	195b      	adds	r3, r3, r5
 8000be2:	3317      	adds	r3, #23
 8000be4:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 8000be6:	4ba2      	ldr	r3, [pc, #648]	; (8000e70 <logic+0x68c>)
 8000be8:	681c      	ldr	r4, [r3, #0]
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	1cfb      	adds	r3, r7, #3
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	1c58      	adds	r0, r3, #1
		playerPtr->board[row - 1][coll + 2] =
 8000bf6:	000b      	movs	r3, r1
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	185b      	adds	r3, r3, r1
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	18f3      	adds	r3, r6, r3
 8000c00:	195b      	adds	r3, r3, r5
 8000c02:	3317      	adds	r3, #23
 8000c04:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 8000c06:	0013      	movs	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	189b      	adds	r3, r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	18e3      	adds	r3, r4, r3
 8000c10:	181b      	adds	r3, r3, r0
 8000c12:	3317      	adds	r3, #23
 8000c14:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll] =
 8000c16:	4b96      	ldr	r3, [pc, #600]	; (8000e70 <logic+0x68c>)
 8000c18:	681e      	ldr	r6, [r3, #0]
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	1e59      	subs	r1, r3, #1
 8000c20:	1cfb      	adds	r3, r7, #3
 8000c22:	781d      	ldrb	r5, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 8000c24:	0013      	movs	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	189b      	adds	r3, r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	18e3      	adds	r3, r4, r3
 8000c2e:	181b      	adds	r3, r3, r0
 8000c30:	3317      	adds	r3, #23
 8000c32:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll] =
 8000c34:	000b      	movs	r3, r1
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	185b      	adds	r3, r3, r1
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	18f3      	adds	r3, r6, r3
 8000c3e:	195b      	adds	r3, r3, r5
 8000c40:	3317      	adds	r3, #23
 8000c42:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 8000c44:	4b8a      	ldr	r3, [pc, #552]	; (8000e70 <logic+0x68c>)
 8000c46:	681c      	ldr	r4, [r3, #0]
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	1e5a      	subs	r2, r3, #1
 8000c4e:	1cfb      	adds	r3, r7, #3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	1e58      	subs	r0, r3, #1
		playerPtr->board[row - 1][coll] =
 8000c54:	000b      	movs	r3, r1
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	185b      	adds	r3, r3, r1
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	18f3      	adds	r3, r6, r3
 8000c5e:	195b      	adds	r3, r3, r5
 8000c60:	3317      	adds	r3, #23
 8000c62:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 8000c64:	0013      	movs	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	189b      	adds	r3, r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	18e3      	adds	r3, r4, r3
 8000c6e:	181b      	adds	r3, r3, r0
 8000c70:	3317      	adds	r3, #23
 8000c72:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 2] =
 8000c74:	4b7e      	ldr	r3, [pc, #504]	; (8000e70 <logic+0x68c>)
 8000c76:	681e      	ldr	r6, [r3, #0]
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	1e59      	subs	r1, r3, #1
 8000c7e:	1cfb      	adds	r3, r7, #3
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	1e9d      	subs	r5, r3, #2
		playerPtr->board[row - 1][coll - 1] =
 8000c84:	0013      	movs	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	189b      	adds	r3, r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	18e3      	adds	r3, r4, r3
 8000c8e:	181b      	adds	r3, r3, r0
 8000c90:	3317      	adds	r3, #23
 8000c92:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 2] =
 8000c94:	000b      	movs	r3, r1
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	185b      	adds	r3, r3, r1
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	18f3      	adds	r3, r6, r3
 8000c9e:	195b      	adds	r3, r3, r5
 8000ca0:	3317      	adds	r3, #23
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	f001 f8a0 	bl	8001de8 <logic+0x1604>
	}
	else if (a1 == 3)
 8000ca8:	1d7b      	adds	r3, r7, #5
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d000      	beq.n	8000cb2 <logic+0x4ce>
 8000cb0:	e0e0      	b.n	8000e74 <logic+0x690>
	{	//varful in jos
		playerPtr->board[row][coll] = 'A';
 8000cb2:	4b6f      	ldr	r3, [pc, #444]	; (8000e70 <logic+0x68c>)
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	1cfb      	adds	r3, r7, #3
 8000cbc:	7819      	ldrb	r1, [r3, #0]
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	189b      	adds	r3, r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	18c3      	adds	r3, r0, r3
 8000cc8:	185b      	adds	r3, r3, r1
 8000cca:	3317      	adds	r3, #23
 8000ccc:	2241      	movs	r2, #65	; 0x41
 8000cce:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
		playerPtr->board[row + 2][coll - 1] =
		playerPtr->board[row][coll - 2] =
		playerPtr->board[row - 1][coll - 3] =
		playerPtr->board[row][coll - 3] =
		playerPtr->board[row+ 1][coll - 3] = 'a';
 8000cd0:	4b67      	ldr	r3, [pc, #412]	; (8000e70 <logic+0x68c>)
 8000cd2:	681e      	ldr	r6, [r3, #0]
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	1c59      	adds	r1, r3, #1
 8000cda:	1cfb      	adds	r3, r7, #3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	1edd      	subs	r5, r3, #3
 8000ce0:	000b      	movs	r3, r1
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	185b      	adds	r3, r3, r1
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	18f3      	adds	r3, r6, r3
 8000cea:	195b      	adds	r3, r3, r5
 8000cec:	3317      	adds	r3, #23
 8000cee:	2261      	movs	r2, #97	; 0x61
 8000cf0:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll - 3] =
 8000cf2:	4b5f      	ldr	r3, [pc, #380]	; (8000e70 <logic+0x68c>)
 8000cf4:	681c      	ldr	r4, [r3, #0]
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	1cfb      	adds	r3, r7, #3
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	1ed8      	subs	r0, r3, #3
		playerPtr->board[row+ 1][coll - 3] = 'a';
 8000d00:	000b      	movs	r3, r1
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	185b      	adds	r3, r3, r1
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	18f3      	adds	r3, r6, r3
 8000d0a:	195b      	adds	r3, r3, r5
 8000d0c:	3317      	adds	r3, #23
 8000d0e:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll - 3] =
 8000d10:	0013      	movs	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	189b      	adds	r3, r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	18e3      	adds	r3, r4, r3
 8000d1a:	181b      	adds	r3, r3, r0
 8000d1c:	3317      	adds	r3, #23
 8000d1e:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 3] =
 8000d20:	4b53      	ldr	r3, [pc, #332]	; (8000e70 <logic+0x68c>)
 8000d22:	681e      	ldr	r6, [r3, #0]
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	1e59      	subs	r1, r3, #1
 8000d2a:	1cfb      	adds	r3, r7, #3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	1edd      	subs	r5, r3, #3
		playerPtr->board[row][coll - 3] =
 8000d30:	0013      	movs	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	189b      	adds	r3, r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	18e3      	adds	r3, r4, r3
 8000d3a:	181b      	adds	r3, r3, r0
 8000d3c:	3317      	adds	r3, #23
 8000d3e:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 3] =
 8000d40:	000b      	movs	r3, r1
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	185b      	adds	r3, r3, r1
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	18f3      	adds	r3, r6, r3
 8000d4a:	195b      	adds	r3, r3, r5
 8000d4c:	3317      	adds	r3, #23
 8000d4e:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll - 2] =
 8000d50:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <logic+0x68c>)
 8000d52:	681c      	ldr	r4, [r3, #0]
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	1cfb      	adds	r3, r7, #3
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	1e98      	subs	r0, r3, #2
		playerPtr->board[row - 1][coll - 3] =
 8000d5e:	000b      	movs	r3, r1
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	185b      	adds	r3, r3, r1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	18f3      	adds	r3, r6, r3
 8000d68:	195b      	adds	r3, r3, r5
 8000d6a:	3317      	adds	r3, #23
 8000d6c:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll - 2] =
 8000d6e:	0013      	movs	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	189b      	adds	r3, r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	18e3      	adds	r3, r4, r3
 8000d78:	181b      	adds	r3, r3, r0
 8000d7a:	3317      	adds	r3, #23
 8000d7c:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 2][coll - 1] =
 8000d7e:	4b3c      	ldr	r3, [pc, #240]	; (8000e70 <logic+0x68c>)
 8000d80:	681e      	ldr	r6, [r3, #0]
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	1c99      	adds	r1, r3, #2
 8000d88:	1cfb      	adds	r3, r7, #3
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row][coll - 2] =
 8000d8e:	0013      	movs	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	189b      	adds	r3, r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	18e3      	adds	r3, r4, r3
 8000d98:	181b      	adds	r3, r3, r0
 8000d9a:	3317      	adds	r3, #23
 8000d9c:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 2][coll - 1] =
 8000d9e:	000b      	movs	r3, r1
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	185b      	adds	r3, r3, r1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	18f3      	adds	r3, r6, r3
 8000da8:	195b      	adds	r3, r3, r5
 8000daa:	3317      	adds	r3, #23
 8000dac:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 8000dae:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <logic+0x68c>)
 8000db0:	681c      	ldr	r4, [r3, #0]
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	1cfb      	adds	r3, r7, #3
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	1e58      	subs	r0, r3, #1
		playerPtr->board[row + 2][coll - 1] =
 8000dbe:	000b      	movs	r3, r1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	185b      	adds	r3, r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	18f3      	adds	r3, r6, r3
 8000dc8:	195b      	adds	r3, r3, r5
 8000dca:	3317      	adds	r3, #23
 8000dcc:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 8000dce:	0013      	movs	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	189b      	adds	r3, r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	18e3      	adds	r3, r4, r3
 8000dd8:	181b      	adds	r3, r3, r0
 8000dda:	3317      	adds	r3, #23
 8000ddc:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row][coll - 1] =
 8000dde:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <logic+0x68c>)
 8000de0:	681e      	ldr	r6, [r3, #0]
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	7819      	ldrb	r1, [r3, #0]
 8000de6:	1cfb      	adds	r3, r7, #3
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row + 1][coll - 1] =
 8000dec:	0013      	movs	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	189b      	adds	r3, r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	18e3      	adds	r3, r4, r3
 8000df6:	181b      	adds	r3, r3, r0
 8000df8:	3317      	adds	r3, #23
 8000dfa:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row][coll - 1] =
 8000dfc:	000b      	movs	r3, r1
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	185b      	adds	r3, r3, r1
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	18f3      	adds	r3, r6, r3
 8000e06:	195b      	adds	r3, r3, r5
 8000e08:	3317      	adds	r3, #23
 8000e0a:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <logic+0x68c>)
 8000e0e:	681c      	ldr	r4, [r3, #0]
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	1cfb      	adds	r3, r7, #3
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	1e58      	subs	r0, r3, #1
		playerPtr->board[row][coll - 1] =
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	185b      	adds	r3, r3, r1
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	18f3      	adds	r3, r6, r3
 8000e26:	195b      	adds	r3, r3, r5
 8000e28:	3317      	adds	r3, #23
 8000e2a:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	189b      	adds	r3, r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	18e3      	adds	r3, r4, r3
 8000e36:	181b      	adds	r3, r3, r0
 8000e38:	3317      	adds	r3, #23
 8000e3a:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 2][coll - 1] =
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <logic+0x68c>)
 8000e3e:	681e      	ldr	r6, [r3, #0]
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	1e99      	subs	r1, r3, #2
 8000e46:	1cfb      	adds	r3, r7, #3
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row - 1][coll - 1] =
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	189b      	adds	r3, r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	18e3      	adds	r3, r4, r3
 8000e56:	181b      	adds	r3, r3, r0
 8000e58:	3317      	adds	r3, #23
 8000e5a:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 2][coll - 1] =
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	185b      	adds	r3, r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	18f3      	adds	r3, r6, r3
 8000e66:	195b      	adds	r3, r3, r5
 8000e68:	3317      	adds	r3, #23
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	f000 ffbc 	bl	8001de8 <logic+0x1604>
 8000e70:	2000007c 	.word	0x2000007c
	}
	else if (a1 == 4)
 8000e74:	1d7b      	adds	r3, r7, #5
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	d001      	beq.n	8000e80 <logic+0x69c>
 8000e7c:	f000 ffb4 	bl	8001de8 <logic+0x1604>
	{	//varful spre stanga
		playerPtr->board[row][coll] = 'A';
 8000e80:	4b92      	ldr	r3, [pc, #584]	; (80010cc <logic+0x8e8>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	1cfb      	adds	r3, r7, #3
 8000e8a:	7819      	ldrb	r1, [r3, #0]
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	189b      	adds	r3, r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	18c3      	adds	r3, r0, r3
 8000e96:	185b      	adds	r3, r3, r1
 8000e98:	3317      	adds	r3, #23
 8000e9a:	2241      	movs	r2, #65	; 0x41
 8000e9c:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
		playerPtr->board[row + 1][coll + 2] =
		playerPtr->board[row + 2][coll] =
		playerPtr->board[row + 3][coll - 1] =
		playerPtr->board[row + 3][coll] =
		playerPtr->board[row + 3][coll + 1] = 'a';
 8000e9e:	4b8b      	ldr	r3, [pc, #556]	; (80010cc <logic+0x8e8>)
 8000ea0:	681e      	ldr	r6, [r3, #0]
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	1cd9      	adds	r1, r3, #3
 8000ea8:	1cfb      	adds	r3, r7, #3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	1c5d      	adds	r5, r3, #1
 8000eae:	000b      	movs	r3, r1
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	185b      	adds	r3, r3, r1
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	18f3      	adds	r3, r6, r3
 8000eb8:	195b      	adds	r3, r3, r5
 8000eba:	3317      	adds	r3, #23
 8000ebc:	2261      	movs	r2, #97	; 0x61
 8000ebe:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 3][coll] =
 8000ec0:	4b82      	ldr	r3, [pc, #520]	; (80010cc <logic+0x8e8>)
 8000ec2:	681c      	ldr	r4, [r3, #0]
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	1cda      	adds	r2, r3, #3
 8000eca:	1cfb      	adds	r3, r7, #3
 8000ecc:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row + 3][coll + 1] = 'a';
 8000ece:	000b      	movs	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	185b      	adds	r3, r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	18f3      	adds	r3, r6, r3
 8000ed8:	195b      	adds	r3, r3, r5
 8000eda:	3317      	adds	r3, #23
 8000edc:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 3][coll] =
 8000ede:	0013      	movs	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	189b      	adds	r3, r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	18e3      	adds	r3, r4, r3
 8000ee8:	181b      	adds	r3, r3, r0
 8000eea:	3317      	adds	r3, #23
 8000eec:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 3][coll - 1] =
 8000eee:	4b77      	ldr	r3, [pc, #476]	; (80010cc <logic+0x8e8>)
 8000ef0:	681e      	ldr	r6, [r3, #0]
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	1cd9      	adds	r1, r3, #3
 8000ef8:	1cfb      	adds	r3, r7, #3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row + 3][coll] =
 8000efe:	0013      	movs	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	189b      	adds	r3, r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	18e3      	adds	r3, r4, r3
 8000f08:	181b      	adds	r3, r3, r0
 8000f0a:	3317      	adds	r3, #23
 8000f0c:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 3][coll - 1] =
 8000f0e:	000b      	movs	r3, r1
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	185b      	adds	r3, r3, r1
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	18f3      	adds	r3, r6, r3
 8000f18:	195b      	adds	r3, r3, r5
 8000f1a:	3317      	adds	r3, #23
 8000f1c:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 2][coll] =
 8000f1e:	4b6b      	ldr	r3, [pc, #428]	; (80010cc <logic+0x8e8>)
 8000f20:	681c      	ldr	r4, [r3, #0]
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	1c9a      	adds	r2, r3, #2
 8000f28:	1cfb      	adds	r3, r7, #3
 8000f2a:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row + 3][coll - 1] =
 8000f2c:	000b      	movs	r3, r1
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	185b      	adds	r3, r3, r1
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	18f3      	adds	r3, r6, r3
 8000f36:	195b      	adds	r3, r3, r5
 8000f38:	3317      	adds	r3, #23
 8000f3a:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 2][coll] =
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	18e3      	adds	r3, r4, r3
 8000f46:	181b      	adds	r3, r3, r0
 8000f48:	3317      	adds	r3, #23
 8000f4a:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 1][coll + 2] =
 8000f4c:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <logic+0x8e8>)
 8000f4e:	681e      	ldr	r6, [r3, #0]
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	1c59      	adds	r1, r3, #1
 8000f56:	1cfb      	adds	r3, r7, #3
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	1c9d      	adds	r5, r3, #2
		playerPtr->board[row + 2][coll] =
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	189b      	adds	r3, r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	18e3      	adds	r3, r4, r3
 8000f66:	181b      	adds	r3, r3, r0
 8000f68:	3317      	adds	r3, #23
 8000f6a:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 2] =
 8000f6c:	000b      	movs	r3, r1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	185b      	adds	r3, r3, r1
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	18f3      	adds	r3, r6, r3
 8000f76:	195b      	adds	r3, r3, r5
 8000f78:	3317      	adds	r3, #23
 8000f7a:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8000f7c:	4b53      	ldr	r3, [pc, #332]	; (80010cc <logic+0x8e8>)
 8000f7e:	681c      	ldr	r4, [r3, #0]
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	1cfb      	adds	r3, r7, #3
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	1c58      	adds	r0, r3, #1
		playerPtr->board[row + 1][coll + 2] =
 8000f8c:	000b      	movs	r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	185b      	adds	r3, r3, r1
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	18f3      	adds	r3, r6, r3
 8000f96:	195b      	adds	r3, r3, r5
 8000f98:	3317      	adds	r3, #23
 8000f9a:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	18e3      	adds	r3, r4, r3
 8000fa6:	181b      	adds	r3, r3, r0
 8000fa8:	3317      	adds	r3, #23
 8000faa:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 1][coll] =
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <logic+0x8e8>)
 8000fae:	681e      	ldr	r6, [r3, #0]
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	1c59      	adds	r1, r3, #1
 8000fb6:	1cfb      	adds	r3, r7, #3
 8000fb8:	781d      	ldrb	r5, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8000fba:	0013      	movs	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	189b      	adds	r3, r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	18e3      	adds	r3, r4, r3
 8000fc4:	181b      	adds	r3, r3, r0
 8000fc6:	3317      	adds	r3, #23
 8000fc8:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 1][coll] =
 8000fca:	000b      	movs	r3, r1
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	185b      	adds	r3, r3, r1
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	18f3      	adds	r3, r6, r3
 8000fd4:	195b      	adds	r3, r3, r5
 8000fd6:	3317      	adds	r3, #23
 8000fd8:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <logic+0x8e8>)
 8000fdc:	681c      	ldr	r4, [r3, #0]
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	1cfb      	adds	r3, r7, #3
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	1e58      	subs	r0, r3, #1
		playerPtr->board[row + 1][coll] =
 8000fea:	000b      	movs	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	185b      	adds	r3, r3, r1
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	18f3      	adds	r3, r6, r3
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	3317      	adds	r3, #23
 8000ff8:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 8000ffa:	0013      	movs	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	189b      	adds	r3, r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	18e3      	adds	r3, r4, r3
 8001004:	181b      	adds	r3, r3, r0
 8001006:	3317      	adds	r3, #23
 8001008:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 1][coll - 2] =
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <logic+0x8e8>)
 800100c:	681e      	ldr	r6, [r3, #0]
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	1c59      	adds	r1, r3, #1
 8001014:	1cfb      	adds	r3, r7, #3
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	1e9d      	subs	r5, r3, #2
		playerPtr->board[row + 1][coll - 1] =
 800101a:	0013      	movs	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	189b      	adds	r3, r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	18e3      	adds	r3, r4, r3
 8001024:	181b      	adds	r3, r3, r0
 8001026:	3317      	adds	r3, #23
 8001028:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 2] =
 800102a:	000b      	movs	r3, r1
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	185b      	adds	r3, r3, r1
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	18f3      	adds	r3, r6, r3
 8001034:	195b      	adds	r3, r3, r5
 8001036:	3317      	adds	r3, #23
 8001038:	701a      	strb	r2, [r3, #0]
	}

	//avionul 2
	while (!generat2)
 800103a:	f000 fed5 	bl	8001de8 <logic+0x1604>
	{
		//randomizare a2, x2, y2;
		a2 = GetRand(1, 4);
 800103e:	1c7c      	adds	r4, r7, #1
 8001040:	2104      	movs	r1, #4
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff fb9a 	bl	800077c <GetRand>
 8001048:	0003      	movs	r3, r0
 800104a:	7023      	strb	r3, [r4, #0]

	if (a2 == 1)
 800104c:	1c7b      	adds	r3, r7, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d110      	bne.n	8001076 <logic+0x892>
	{
		x2 = GetRand(2, 7); // pzitionarea pilotului pe Axa x spre stanga
 8001054:	230d      	movs	r3, #13
 8001056:	18fc      	adds	r4, r7, r3
 8001058:	2107      	movs	r1, #7
 800105a:	2002      	movs	r0, #2
 800105c:	f7ff fb8e 	bl	800077c <GetRand>
 8001060:	0003      	movs	r3, r0
 8001062:	7023      	strb	r3, [r4, #0]
		y2 = GetRand(0, 6); // pozitionarea pilotului pe Axa y in jos
 8001064:	230c      	movs	r3, #12
 8001066:	18fc      	adds	r4, r7, r3
 8001068:	2106      	movs	r1, #6
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff fb86 	bl	800077c <GetRand>
 8001070:	0003      	movs	r3, r0
 8001072:	7023      	strb	r3, [r4, #0]
 8001074:	e040      	b.n	80010f8 <logic+0x914>
	}
	else if (a2 == 2)		// avionul 1 orientat spre dreapta
 8001076:	1c7b      	adds	r3, r7, #1
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d110      	bne.n	80010a0 <logic+0x8bc>
	{
		x2 = GetRand(3, 9); // pzitionarea pilotului pe Axa x spre stanga
 800107e:	230d      	movs	r3, #13
 8001080:	18fc      	adds	r4, r7, r3
 8001082:	2109      	movs	r1, #9
 8001084:	2003      	movs	r0, #3
 8001086:	f7ff fb79 	bl	800077c <GetRand>
 800108a:	0003      	movs	r3, r0
 800108c:	7023      	strb	r3, [r4, #0]
		y2 = GetRand(2, 7); // pzitionarea pilotului pe Axa y in jos
 800108e:	230c      	movs	r3, #12
 8001090:	18fc      	adds	r4, r7, r3
 8001092:	2107      	movs	r1, #7
 8001094:	2002      	movs	r0, #2
 8001096:	f7ff fb71 	bl	800077c <GetRand>
 800109a:	0003      	movs	r3, r0
 800109c:	7023      	strb	r3, [r4, #0]
 800109e:	e02b      	b.n	80010f8 <logic+0x914>
	}
	else if (a2 == 3)		// avionul 1 Pilotul in jos
 80010a0:	1c7b      	adds	r3, r7, #1
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d113      	bne.n	80010d0 <logic+0x8ec>
	{
		x2 = GetRand(2, 7); // pzitionarea pilotului pe Axa x spre stanga
 80010a8:	230d      	movs	r3, #13
 80010aa:	18fc      	adds	r4, r7, r3
 80010ac:	2107      	movs	r1, #7
 80010ae:	2002      	movs	r0, #2
 80010b0:	f7ff fb64 	bl	800077c <GetRand>
 80010b4:	0003      	movs	r3, r0
 80010b6:	7023      	strb	r3, [r4, #0]
		y2 = GetRand(3, 9); // pzitionarea pilotului pe Axa y in jos
 80010b8:	230c      	movs	r3, #12
 80010ba:	18fc      	adds	r4, r7, r3
 80010bc:	2109      	movs	r1, #9
 80010be:	2003      	movs	r0, #3
 80010c0:	f7ff fb5c 	bl	800077c <GetRand>
 80010c4:	0003      	movs	r3, r0
 80010c6:	7023      	strb	r3, [r4, #0]
 80010c8:	e016      	b.n	80010f8 <logic+0x914>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	2000007c 	.word	0x2000007c
	}
	else if (a2 == 4)		//avionul 1 Pilotul la stanga
 80010d0:	1c7b      	adds	r3, r7, #1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d10f      	bne.n	80010f8 <logic+0x914>
	{
		x2 = GetRand(0, 6); //pzitionarea pilotului pe Axa x spre stanga
 80010d8:	230d      	movs	r3, #13
 80010da:	18fc      	adds	r4, r7, r3
 80010dc:	2106      	movs	r1, #6
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fb4c 	bl	800077c <GetRand>
 80010e4:	0003      	movs	r3, r0
 80010e6:	7023      	strb	r3, [r4, #0]
		y2 = GetRand(2, 7); //pzitionarea pilotului pe Axa y in jos
 80010e8:	230c      	movs	r3, #12
 80010ea:	18fc      	adds	r4, r7, r3
 80010ec:	2107      	movs	r1, #7
 80010ee:	2002      	movs	r0, #2
 80010f0:	f7ff fb44 	bl	800077c <GetRand>
 80010f4:	0003      	movs	r3, r0
 80010f6:	7023      	strb	r3, [r4, #0]
	}
	row = x2;
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	220d      	movs	r2, #13
 80010fc:	18ba      	adds	r2, r7, r2
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	701a      	strb	r2, [r3, #0]
	coll = y2;
 8001102:	1cfb      	adds	r3, r7, #3
 8001104:	220c      	movs	r2, #12
 8001106:	18ba      	adds	r2, r7, r2
 8001108:	7812      	ldrb	r2, [r2, #0]
 800110a:	701a      	strb	r2, [r3, #0]

	if (a2 == 1)//varful in sus
 800110c:	1c7b      	adds	r3, r7, #1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d000      	beq.n	8001116 <logic+0x932>
 8001114:	e19a      	b.n	800144c <logic+0xc68>
	{
		if ((playerPtr->board[row][coll]
 8001116:	4bcc      	ldr	r3, [pc, #816]	; (8001448 <logic+0xc64>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	1cfb      	adds	r3, r7, #3
 8001120:	7819      	ldrb	r1, [r3, #0]
 8001122:	0013      	movs	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	189b      	adds	r3, r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	18c3      	adds	r3, r0, r3
 800112c:	185b      	adds	r3, r3, r1
 800112e:	3317      	adds	r3, #23
 8001130:	7819      	ldrb	r1, [r3, #0]
		| playerPtr->board[row - 2][coll + 1]
 8001132:	4bc5      	ldr	r3, [pc, #788]	; (8001448 <logic+0xc64>)
 8001134:	681c      	ldr	r4, [r3, #0]
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	1e9a      	subs	r2, r3, #2
 800113c:	1cfb      	adds	r3, r7, #3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	1c58      	adds	r0, r3, #1
 8001142:	0013      	movs	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	189b      	adds	r3, r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	18e3      	adds	r3, r4, r3
 800114c:	181b      	adds	r3, r3, r0
 800114e:	3317      	adds	r3, #23
 8001150:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 1]
		| playerPtr->board[row + 2][coll + 1]
		| playerPtr->board[row][coll + 2]
		| playerPtr->board[row - 1][coll + 3]
		| playerPtr->board[row][coll + 3]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001152:	430b      	orrs	r3, r1
 8001154:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll + 1]
 8001156:	4bbc      	ldr	r3, [pc, #752]	; (8001448 <logic+0xc64>)
 8001158:	681c      	ldr	r4, [r3, #0]
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	1cfb      	adds	r3, r7, #3
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	1c58      	adds	r0, r3, #1
 8001166:	0013      	movs	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	189b      	adds	r3, r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	18e3      	adds	r3, r4, r3
 8001170:	181b      	adds	r3, r3, r0
 8001172:	3317      	adds	r3, #23
 8001174:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001176:	430b      	orrs	r3, r1
 8001178:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll + 1]
 800117a:	4bb3      	ldr	r3, [pc, #716]	; (8001448 <logic+0xc64>)
 800117c:	681c      	ldr	r4, [r3, #0]
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	1cfb      	adds	r3, r7, #3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	1c58      	adds	r0, r3, #1
 8001188:	0013      	movs	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	189b      	adds	r3, r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	18e3      	adds	r3, r4, r3
 8001192:	181b      	adds	r3, r3, r0
 8001194:	3317      	adds	r3, #23
 8001196:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001198:	430b      	orrs	r3, r1
 800119a:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll + 1]
 800119c:	4baa      	ldr	r3, [pc, #680]	; (8001448 <logic+0xc64>)
 800119e:	681c      	ldr	r4, [r3, #0]
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	1cfb      	adds	r3, r7, #3
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	1c58      	adds	r0, r3, #1
 80011ac:	0013      	movs	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	189b      	adds	r3, r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	18e3      	adds	r3, r4, r3
 80011b6:	181b      	adds	r3, r3, r0
 80011b8:	3317      	adds	r3, #23
 80011ba:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 80011bc:	430b      	orrs	r3, r1
 80011be:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 2][coll + 1]
 80011c0:	4ba1      	ldr	r3, [pc, #644]	; (8001448 <logic+0xc64>)
 80011c2:	681c      	ldr	r4, [r3, #0]
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	1c9a      	adds	r2, r3, #2
 80011ca:	1cfb      	adds	r3, r7, #3
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	1c58      	adds	r0, r3, #1
 80011d0:	0013      	movs	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	189b      	adds	r3, r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	18e3      	adds	r3, r4, r3
 80011da:	181b      	adds	r3, r3, r0
 80011dc:	3317      	adds	r3, #23
 80011de:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 80011e0:	430b      	orrs	r3, r1
 80011e2:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll + 2]
 80011e4:	4b98      	ldr	r3, [pc, #608]	; (8001448 <logic+0xc64>)
 80011e6:	681c      	ldr	r4, [r3, #0]
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	1cfb      	adds	r3, r7, #3
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	1c98      	adds	r0, r3, #2
 80011f2:	0013      	movs	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	189b      	adds	r3, r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	18e3      	adds	r3, r4, r3
 80011fc:	181b      	adds	r3, r3, r0
 80011fe:	3317      	adds	r3, #23
 8001200:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001202:	430b      	orrs	r3, r1
 8001204:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll + 3]
 8001206:	4b90      	ldr	r3, [pc, #576]	; (8001448 <logic+0xc64>)
 8001208:	681c      	ldr	r4, [r3, #0]
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	1e5a      	subs	r2, r3, #1
 8001210:	1cfb      	adds	r3, r7, #3
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	1cd8      	adds	r0, r3, #3
 8001216:	0013      	movs	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	189b      	adds	r3, r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	18e3      	adds	r3, r4, r3
 8001220:	181b      	adds	r3, r3, r0
 8001222:	3317      	adds	r3, #23
 8001224:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001226:	430b      	orrs	r3, r1
 8001228:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll + 3]
 800122a:	4b87      	ldr	r3, [pc, #540]	; (8001448 <logic+0xc64>)
 800122c:	681c      	ldr	r4, [r3, #0]
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	1cfb      	adds	r3, r7, #3
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	1cd8      	adds	r0, r3, #3
 8001238:	0013      	movs	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	189b      	adds	r3, r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	18e3      	adds	r3, r4, r3
 8001242:	181b      	adds	r3, r3, r0
 8001244:	3317      	adds	r3, #23
 8001246:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001248:	430b      	orrs	r3, r1
 800124a:	b2d9      	uxtb	r1, r3
 800124c:	4b7e      	ldr	r3, [pc, #504]	; (8001448 <logic+0xc64>)
 800124e:	681c      	ldr	r4, [r3, #0]
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	1cfb      	adds	r3, r7, #3
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	1cd8      	adds	r0, r3, #3
 800125c:	0013      	movs	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	189b      	adds	r3, r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	18e3      	adds	r3, r4, r3
 8001266:	181b      	adds	r3, r3, r0
 8001268:	3317      	adds	r3, #23
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	430b      	orrs	r3, r1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2109      	movs	r1, #9
 8001272:	187a      	adds	r2, r7, r1
 8001274:	1879      	adds	r1, r7, r1
 8001276:	7809      	ldrb	r1, [r1, #0]
 8001278:	7011      	strb	r1, [r2, #0]
		if ((playerPtr->board[row][coll]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <logic+0xa9e>
 800127e:	f000 fdb3 	bl	8001de8 <logic+0x1604>
		{
		playerPtr->board[row][coll] = 'B';
 8001282:	4b71      	ldr	r3, [pc, #452]	; (8001448 <logic+0xc64>)
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	1cfb      	adds	r3, r7, #3
 800128c:	7819      	ldrb	r1, [r3, #0]
 800128e:	0013      	movs	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	189b      	adds	r3, r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	18c3      	adds	r3, r0, r3
 8001298:	185b      	adds	r3, r3, r1
 800129a:	3317      	adds	r3, #23
 800129c:	2242      	movs	r2, #66	; 0x42
 800129e:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
		playerPtr->board[row + 2][coll + 1] =
		playerPtr->board[row][coll + 2] =
		playerPtr->board[row - 1][coll + 3] =
		playerPtr->board[row][coll + 3] =
		playerPtr->board[row + 1][coll + 3] = 'b';
 80012a0:	4b69      	ldr	r3, [pc, #420]	; (8001448 <logic+0xc64>)
 80012a2:	681e      	ldr	r6, [r3, #0]
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	1c59      	adds	r1, r3, #1
 80012aa:	1cfb      	adds	r3, r7, #3
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	1cdd      	adds	r5, r3, #3
 80012b0:	000b      	movs	r3, r1
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	185b      	adds	r3, r3, r1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	18f3      	adds	r3, r6, r3
 80012ba:	195b      	adds	r3, r3, r5
 80012bc:	3317      	adds	r3, #23
 80012be:	2262      	movs	r2, #98	; 0x62
 80012c0:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll + 3] =
 80012c2:	4b61      	ldr	r3, [pc, #388]	; (8001448 <logic+0xc64>)
 80012c4:	681c      	ldr	r4, [r3, #0]
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	1cfb      	adds	r3, r7, #3
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	1cd8      	adds	r0, r3, #3
		playerPtr->board[row + 1][coll + 3] = 'b';
 80012d0:	000b      	movs	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	185b      	adds	r3, r3, r1
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	18f3      	adds	r3, r6, r3
 80012da:	195b      	adds	r3, r3, r5
 80012dc:	3317      	adds	r3, #23
 80012de:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll + 3] =
 80012e0:	0013      	movs	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	189b      	adds	r3, r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	18e3      	adds	r3, r4, r3
 80012ea:	181b      	adds	r3, r3, r0
 80012ec:	3317      	adds	r3, #23
 80012ee:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 3] =
 80012f0:	4b55      	ldr	r3, [pc, #340]	; (8001448 <logic+0xc64>)
 80012f2:	681e      	ldr	r6, [r3, #0]
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	1e59      	subs	r1, r3, #1
 80012fa:	1cfb      	adds	r3, r7, #3
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	1cdd      	adds	r5, r3, #3
		playerPtr->board[row][coll + 3] =
 8001300:	0013      	movs	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	189b      	adds	r3, r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	18e3      	adds	r3, r4, r3
 800130a:	181b      	adds	r3, r3, r0
 800130c:	3317      	adds	r3, #23
 800130e:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 3] =
 8001310:	000b      	movs	r3, r1
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	185b      	adds	r3, r3, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	18f3      	adds	r3, r6, r3
 800131a:	195b      	adds	r3, r3, r5
 800131c:	3317      	adds	r3, #23
 800131e:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll + 2] =
 8001320:	4b49      	ldr	r3, [pc, #292]	; (8001448 <logic+0xc64>)
 8001322:	681c      	ldr	r4, [r3, #0]
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	1cfb      	adds	r3, r7, #3
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	1c98      	adds	r0, r3, #2
		playerPtr->board[row - 1][coll + 3] =
 800132e:	000b      	movs	r3, r1
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	185b      	adds	r3, r3, r1
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	18f3      	adds	r3, r6, r3
 8001338:	195b      	adds	r3, r3, r5
 800133a:	3317      	adds	r3, #23
 800133c:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll + 2] =
 800133e:	0013      	movs	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	189b      	adds	r3, r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	18e3      	adds	r3, r4, r3
 8001348:	181b      	adds	r3, r3, r0
 800134a:	3317      	adds	r3, #23
 800134c:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 2][coll + 1] =
 800134e:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <logic+0xc64>)
 8001350:	681e      	ldr	r6, [r3, #0]
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	1c99      	adds	r1, r3, #2
 8001358:	1cfb      	adds	r3, r7, #3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	1c5d      	adds	r5, r3, #1
		playerPtr->board[row][coll + 2] =
 800135e:	0013      	movs	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	189b      	adds	r3, r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	18e3      	adds	r3, r4, r3
 8001368:	181b      	adds	r3, r3, r0
 800136a:	3317      	adds	r3, #23
 800136c:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 2][coll + 1] =
 800136e:	000b      	movs	r3, r1
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	185b      	adds	r3, r3, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	18f3      	adds	r3, r6, r3
 8001378:	195b      	adds	r3, r3, r5
 800137a:	3317      	adds	r3, #23
 800137c:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <logic+0xc64>)
 8001380:	681c      	ldr	r4, [r3, #0]
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	1cfb      	adds	r3, r7, #3
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	1c58      	adds	r0, r3, #1
		playerPtr->board[row + 2][coll + 1] =
 800138e:	000b      	movs	r3, r1
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	185b      	adds	r3, r3, r1
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	18f3      	adds	r3, r6, r3
 8001398:	195b      	adds	r3, r3, r5
 800139a:	3317      	adds	r3, #23
 800139c:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 800139e:	0013      	movs	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	189b      	adds	r3, r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	18e3      	adds	r3, r4, r3
 80013a8:	181b      	adds	r3, r3, r0
 80013aa:	3317      	adds	r3, #23
 80013ac:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row][coll + 1] =
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <logic+0xc64>)
 80013b0:	681e      	ldr	r6, [r3, #0]
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	7819      	ldrb	r1, [r3, #0]
 80013b6:	1cfb      	adds	r3, r7, #3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	1c5d      	adds	r5, r3, #1
		playerPtr->board[row + 1][coll + 1] =
 80013bc:	0013      	movs	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	189b      	adds	r3, r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	18e3      	adds	r3, r4, r3
 80013c6:	181b      	adds	r3, r3, r0
 80013c8:	3317      	adds	r3, #23
 80013ca:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row][coll + 1] =
 80013cc:	000b      	movs	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	185b      	adds	r3, r3, r1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	18f3      	adds	r3, r6, r3
 80013d6:	195b      	adds	r3, r3, r5
 80013d8:	3317      	adds	r3, #23
 80013da:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <logic+0xc64>)
 80013de:	681c      	ldr	r4, [r3, #0]
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	1e5a      	subs	r2, r3, #1
 80013e6:	1cfb      	adds	r3, r7, #3
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	1c58      	adds	r0, r3, #1
		playerPtr->board[row][coll + 1] =
 80013ec:	000b      	movs	r3, r1
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	185b      	adds	r3, r3, r1
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	18f3      	adds	r3, r6, r3
 80013f6:	195b      	adds	r3, r3, r5
 80013f8:	3317      	adds	r3, #23
 80013fa:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 80013fc:	0013      	movs	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	189b      	adds	r3, r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	18e3      	adds	r3, r4, r3
 8001406:	181b      	adds	r3, r3, r0
 8001408:	3317      	adds	r3, #23
 800140a:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 2][coll + 1] =
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <logic+0xc64>)
 800140e:	681e      	ldr	r6, [r3, #0]
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	1e99      	subs	r1, r3, #2
 8001416:	1cfb      	adds	r3, r7, #3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	1c5d      	adds	r5, r3, #1
		playerPtr->board[row - 1][coll + 1] =
 800141c:	0013      	movs	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	189b      	adds	r3, r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	18e3      	adds	r3, r4, r3
 8001426:	181b      	adds	r3, r3, r0
 8001428:	3317      	adds	r3, #23
 800142a:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 2][coll + 1] =
 800142c:	000b      	movs	r3, r1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	185b      	adds	r3, r3, r1
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	18f3      	adds	r3, r6, r3
 8001436:	195b      	adds	r3, r3, r5
 8001438:	3317      	adds	r3, #23
 800143a:	701a      	strb	r2, [r3, #0]
		generat2 = 1;
 800143c:	2109      	movs	r1, #9
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	f000 fcd0 	bl	8001de8 <logic+0x1604>
 8001448:	2000007c 	.word	0x2000007c
		}
	}

	else if (a2 == 2)//varful la dreapta
 800144c:	1c7b      	adds	r3, r7, #1
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d000      	beq.n	8001456 <logic+0xc72>
 8001454:	e19a      	b.n	800178c <logic+0xfa8>
	{
		if ((playerPtr->board[row][coll]
 8001456:	4bcc      	ldr	r3, [pc, #816]	; (8001788 <logic+0xfa4>)
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	1cfb      	adds	r3, r7, #3
 8001460:	7819      	ldrb	r1, [r3, #0]
 8001462:	0013      	movs	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	189b      	adds	r3, r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	18c3      	adds	r3, r0, r3
 800146c:	185b      	adds	r3, r3, r1
 800146e:	3317      	adds	r3, #23
 8001470:	7819      	ldrb	r1, [r3, #0]
		| playerPtr->board[row - 1][coll - 2]
 8001472:	4bc5      	ldr	r3, [pc, #788]	; (8001788 <logic+0xfa4>)
 8001474:	681c      	ldr	r4, [r3, #0]
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	1cfb      	adds	r3, r7, #3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	1e98      	subs	r0, r3, #2
 8001482:	0013      	movs	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	189b      	adds	r3, r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	18e3      	adds	r3, r4, r3
 800148c:	181b      	adds	r3, r3, r0
 800148e:	3317      	adds	r3, #23
 8001490:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 1][coll + 1]
		| playerPtr->board[row - 1][coll + 2]
		| playerPtr->board[row - 2][coll]
		| playerPtr->board[row - 3][coll - 1]
		| playerPtr->board[row - 3][coll]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 8001492:	430b      	orrs	r3, r1
 8001494:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll - 1]
 8001496:	4bbc      	ldr	r3, [pc, #752]	; (8001788 <logic+0xfa4>)
 8001498:	681c      	ldr	r4, [r3, #0]
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	1e5a      	subs	r2, r3, #1
 80014a0:	1cfb      	adds	r3, r7, #3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	1e58      	subs	r0, r3, #1
 80014a6:	0013      	movs	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	189b      	adds	r3, r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	18e3      	adds	r3, r4, r3
 80014b0:	181b      	adds	r3, r3, r0
 80014b2:	3317      	adds	r3, #23
 80014b4:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 80014b6:	430b      	orrs	r3, r1
 80014b8:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll]
 80014ba:	4bb3      	ldr	r3, [pc, #716]	; (8001788 <logic+0xfa4>)
 80014bc:	681c      	ldr	r4, [r3, #0]
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	1e5a      	subs	r2, r3, #1
 80014c4:	1cfb      	adds	r3, r7, #3
 80014c6:	7818      	ldrb	r0, [r3, #0]
 80014c8:	0013      	movs	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	189b      	adds	r3, r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	18e3      	adds	r3, r4, r3
 80014d2:	181b      	adds	r3, r3, r0
 80014d4:	3317      	adds	r3, #23
 80014d6:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 80014d8:	430b      	orrs	r3, r1
 80014da:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll + 1]
 80014dc:	4baa      	ldr	r3, [pc, #680]	; (8001788 <logic+0xfa4>)
 80014de:	681c      	ldr	r4, [r3, #0]
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	1cfb      	adds	r3, r7, #3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	1c58      	adds	r0, r3, #1
 80014ec:	0013      	movs	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	189b      	adds	r3, r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	18e3      	adds	r3, r4, r3
 80014f6:	181b      	adds	r3, r3, r0
 80014f8:	3317      	adds	r3, #23
 80014fa:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 80014fc:	430b      	orrs	r3, r1
 80014fe:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll + 2]
 8001500:	4ba1      	ldr	r3, [pc, #644]	; (8001788 <logic+0xfa4>)
 8001502:	681c      	ldr	r4, [r3, #0]
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	1cfb      	adds	r3, r7, #3
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	1c98      	adds	r0, r3, #2
 8001510:	0013      	movs	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	189b      	adds	r3, r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	18e3      	adds	r3, r4, r3
 800151a:	181b      	adds	r3, r3, r0
 800151c:	3317      	adds	r3, #23
 800151e:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 8001520:	430b      	orrs	r3, r1
 8001522:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 2][coll]
 8001524:	4b98      	ldr	r3, [pc, #608]	; (8001788 <logic+0xfa4>)
 8001526:	681c      	ldr	r4, [r3, #0]
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	1e9a      	subs	r2, r3, #2
 800152e:	1cfb      	adds	r3, r7, #3
 8001530:	7818      	ldrb	r0, [r3, #0]
 8001532:	0013      	movs	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	189b      	adds	r3, r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	18e3      	adds	r3, r4, r3
 800153c:	181b      	adds	r3, r3, r0
 800153e:	3317      	adds	r3, #23
 8001540:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 8001542:	430b      	orrs	r3, r1
 8001544:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 3][coll - 1]
 8001546:	4b90      	ldr	r3, [pc, #576]	; (8001788 <logic+0xfa4>)
 8001548:	681c      	ldr	r4, [r3, #0]
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	1eda      	subs	r2, r3, #3
 8001550:	1cfb      	adds	r3, r7, #3
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	1e58      	subs	r0, r3, #1
 8001556:	0013      	movs	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	189b      	adds	r3, r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	18e3      	adds	r3, r4, r3
 8001560:	181b      	adds	r3, r3, r0
 8001562:	3317      	adds	r3, #23
 8001564:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 8001566:	430b      	orrs	r3, r1
 8001568:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 3][coll]
 800156a:	4b87      	ldr	r3, [pc, #540]	; (8001788 <logic+0xfa4>)
 800156c:	681c      	ldr	r4, [r3, #0]
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	1eda      	subs	r2, r3, #3
 8001574:	1cfb      	adds	r3, r7, #3
 8001576:	7818      	ldrb	r0, [r3, #0]
 8001578:	0013      	movs	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	189b      	adds	r3, r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	18e3      	adds	r3, r4, r3
 8001582:	181b      	adds	r3, r3, r0
 8001584:	3317      	adds	r3, #23
 8001586:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 8001588:	430b      	orrs	r3, r1
 800158a:	b2d9      	uxtb	r1, r3
 800158c:	4b7e      	ldr	r3, [pc, #504]	; (8001788 <logic+0xfa4>)
 800158e:	681c      	ldr	r4, [r3, #0]
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	1eda      	subs	r2, r3, #3
 8001596:	1cfb      	adds	r3, r7, #3
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	1c58      	adds	r0, r3, #1
 800159c:	0013      	movs	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	189b      	adds	r3, r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	18e3      	adds	r3, r4, r3
 80015a6:	181b      	adds	r3, r3, r0
 80015a8:	3317      	adds	r3, #23
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2109      	movs	r1, #9
 80015b2:	187a      	adds	r2, r7, r1
 80015b4:	1879      	adds	r1, r7, r1
 80015b6:	7809      	ldrb	r1, [r1, #0]
 80015b8:	7011      	strb	r1, [r2, #0]
		if ((playerPtr->board[row][coll]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <logic+0xdde>
 80015be:	f000 fc13 	bl	8001de8 <logic+0x1604>
		{
		playerPtr->board[row][coll] = 'B';
 80015c2:	4b71      	ldr	r3, [pc, #452]	; (8001788 <logic+0xfa4>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	1cfb      	adds	r3, r7, #3
 80015cc:	7819      	ldrb	r1, [r3, #0]
 80015ce:	0013      	movs	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	189b      	adds	r3, r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	18c3      	adds	r3, r0, r3
 80015d8:	185b      	adds	r3, r3, r1
 80015da:	3317      	adds	r3, #23
 80015dc:	2242      	movs	r2, #66	; 0x42
 80015de:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
		playerPtr->board[row - 1][coll + 2] =
		playerPtr->board[row - 2][coll] =
		playerPtr->board[row - 3][coll - 1] =
		playerPtr->board[row - 3][coll] =
		playerPtr->board[row - 3][coll + 1] = 'b';
 80015e0:	4b69      	ldr	r3, [pc, #420]	; (8001788 <logic+0xfa4>)
 80015e2:	681e      	ldr	r6, [r3, #0]
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	1ed9      	subs	r1, r3, #3
 80015ea:	1cfb      	adds	r3, r7, #3
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	1c5d      	adds	r5, r3, #1
 80015f0:	000b      	movs	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	185b      	adds	r3, r3, r1
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	18f3      	adds	r3, r6, r3
 80015fa:	195b      	adds	r3, r3, r5
 80015fc:	3317      	adds	r3, #23
 80015fe:	2262      	movs	r2, #98	; 0x62
 8001600:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 3][coll] =
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <logic+0xfa4>)
 8001604:	681c      	ldr	r4, [r3, #0]
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	1eda      	subs	r2, r3, #3
 800160c:	1cfb      	adds	r3, r7, #3
 800160e:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row - 3][coll + 1] = 'b';
 8001610:	000b      	movs	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	185b      	adds	r3, r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	18f3      	adds	r3, r6, r3
 800161a:	195b      	adds	r3, r3, r5
 800161c:	3317      	adds	r3, #23
 800161e:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 3][coll] =
 8001620:	0013      	movs	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	189b      	adds	r3, r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	18e3      	adds	r3, r4, r3
 800162a:	181b      	adds	r3, r3, r0
 800162c:	3317      	adds	r3, #23
 800162e:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 3][coll - 1] =
 8001630:	4b55      	ldr	r3, [pc, #340]	; (8001788 <logic+0xfa4>)
 8001632:	681e      	ldr	r6, [r3, #0]
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	1ed9      	subs	r1, r3, #3
 800163a:	1cfb      	adds	r3, r7, #3
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row - 3][coll] =
 8001640:	0013      	movs	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	189b      	adds	r3, r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	18e3      	adds	r3, r4, r3
 800164a:	181b      	adds	r3, r3, r0
 800164c:	3317      	adds	r3, #23
 800164e:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 3][coll - 1] =
 8001650:	000b      	movs	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	185b      	adds	r3, r3, r1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	18f3      	adds	r3, r6, r3
 800165a:	195b      	adds	r3, r3, r5
 800165c:	3317      	adds	r3, #23
 800165e:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 2][coll] =
 8001660:	4b49      	ldr	r3, [pc, #292]	; (8001788 <logic+0xfa4>)
 8001662:	681c      	ldr	r4, [r3, #0]
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	1e9a      	subs	r2, r3, #2
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row - 3][coll - 1] =
 800166e:	000b      	movs	r3, r1
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	185b      	adds	r3, r3, r1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	18f3      	adds	r3, r6, r3
 8001678:	195b      	adds	r3, r3, r5
 800167a:	3317      	adds	r3, #23
 800167c:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 2][coll] =
 800167e:	0013      	movs	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	189b      	adds	r3, r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	18e3      	adds	r3, r4, r3
 8001688:	181b      	adds	r3, r3, r0
 800168a:	3317      	adds	r3, #23
 800168c:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 2] =
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <logic+0xfa4>)
 8001690:	681e      	ldr	r6, [r3, #0]
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	1e59      	subs	r1, r3, #1
 8001698:	1cfb      	adds	r3, r7, #3
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	1c9d      	adds	r5, r3, #2
		playerPtr->board[row - 2][coll] =
 800169e:	0013      	movs	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	18e3      	adds	r3, r4, r3
 80016a8:	181b      	adds	r3, r3, r0
 80016aa:	3317      	adds	r3, #23
 80016ac:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 2] =
 80016ae:	000b      	movs	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	185b      	adds	r3, r3, r1
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	18f3      	adds	r3, r6, r3
 80016b8:	195b      	adds	r3, r3, r5
 80016ba:	3317      	adds	r3, #23
 80016bc:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <logic+0xfa4>)
 80016c0:	681c      	ldr	r4, [r3, #0]
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	1e5a      	subs	r2, r3, #1
 80016c8:	1cfb      	adds	r3, r7, #3
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	1c58      	adds	r0, r3, #1
		playerPtr->board[row - 1][coll + 2] =
 80016ce:	000b      	movs	r3, r1
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	185b      	adds	r3, r3, r1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	18f3      	adds	r3, r6, r3
 80016d8:	195b      	adds	r3, r3, r5
 80016da:	3317      	adds	r3, #23
 80016dc:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 80016de:	0013      	movs	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	189b      	adds	r3, r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	18e3      	adds	r3, r4, r3
 80016e8:	181b      	adds	r3, r3, r0
 80016ea:	3317      	adds	r3, #23
 80016ec:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll] =
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <logic+0xfa4>)
 80016f0:	681e      	ldr	r6, [r3, #0]
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	1e59      	subs	r1, r3, #1
 80016f8:	1cfb      	adds	r3, r7, #3
 80016fa:	781d      	ldrb	r5, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 80016fc:	0013      	movs	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	189b      	adds	r3, r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	18e3      	adds	r3, r4, r3
 8001706:	181b      	adds	r3, r3, r0
 8001708:	3317      	adds	r3, #23
 800170a:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll] =
 800170c:	000b      	movs	r3, r1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	185b      	adds	r3, r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	18f3      	adds	r3, r6, r3
 8001716:	195b      	adds	r3, r3, r5
 8001718:	3317      	adds	r3, #23
 800171a:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <logic+0xfa4>)
 800171e:	681c      	ldr	r4, [r3, #0]
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	1cfb      	adds	r3, r7, #3
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	1e58      	subs	r0, r3, #1
		playerPtr->board[row - 1][coll] =
 800172c:	000b      	movs	r3, r1
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	185b      	adds	r3, r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	18f3      	adds	r3, r6, r3
 8001736:	195b      	adds	r3, r3, r5
 8001738:	3317      	adds	r3, #23
 800173a:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 800173c:	0013      	movs	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	189b      	adds	r3, r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	18e3      	adds	r3, r4, r3
 8001746:	181b      	adds	r3, r3, r0
 8001748:	3317      	adds	r3, #23
 800174a:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 2] =
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <logic+0xfa4>)
 800174e:	681e      	ldr	r6, [r3, #0]
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	1e59      	subs	r1, r3, #1
 8001756:	1cfb      	adds	r3, r7, #3
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	1e9d      	subs	r5, r3, #2
		playerPtr->board[row - 1][coll - 1] =
 800175c:	0013      	movs	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	189b      	adds	r3, r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	18e3      	adds	r3, r4, r3
 8001766:	181b      	adds	r3, r3, r0
 8001768:	3317      	adds	r3, #23
 800176a:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 2] =
 800176c:	000b      	movs	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	185b      	adds	r3, r3, r1
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	18f3      	adds	r3, r6, r3
 8001776:	195b      	adds	r3, r3, r5
 8001778:	3317      	adds	r3, #23
 800177a:	701a      	strb	r2, [r3, #0]
		generat2 = 1;
 800177c:	2109      	movs	r1, #9
 800177e:	187b      	adds	r3, r7, r1
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	e330      	b.n	8001de8 <logic+0x1604>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	2000007c 	.word	0x2000007c
		}
	}

	else if (a2 == 3)//varful in jos
 800178c:	1c7b      	adds	r3, r7, #1
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d000      	beq.n	8001796 <logic+0xfb2>
 8001794:	e188      	b.n	8001aa8 <logic+0x12c4>
	{
		if ((playerPtr->board[row][coll]
 8001796:	4bc3      	ldr	r3, [pc, #780]	; (8001aa4 <logic+0x12c0>)
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	1cfb      	adds	r3, r7, #3
 80017a0:	7819      	ldrb	r1, [r3, #0]
 80017a2:	0013      	movs	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	189b      	adds	r3, r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	18c3      	adds	r3, r0, r3
 80017ac:	185b      	adds	r3, r3, r1
 80017ae:	3317      	adds	r3, #23
 80017b0:	7819      	ldrb	r1, [r3, #0]
		| playerPtr->board[row - 2][coll - 1]
 80017b2:	4bbc      	ldr	r3, [pc, #752]	; (8001aa4 <logic+0x12c0>)
 80017b4:	681c      	ldr	r4, [r3, #0]
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	1e9a      	subs	r2, r3, #2
 80017bc:	1cfb      	adds	r3, r7, #3
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	1e58      	subs	r0, r3, #1
 80017c2:	0013      	movs	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	189b      	adds	r3, r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	18e3      	adds	r3, r4, r3
 80017cc:	181b      	adds	r3, r3, r0
 80017ce:	3317      	adds	r3, #23
 80017d0:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 1]
		| playerPtr->board[row + 2][coll - 1]
		| playerPtr->board[row][coll - 2]
		| playerPtr->board[row - 1][coll - 3]
		| playerPtr->board[row][coll - 3]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 80017d2:	430b      	orrs	r3, r1
 80017d4:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll - 1]
 80017d6:	4bb3      	ldr	r3, [pc, #716]	; (8001aa4 <logic+0x12c0>)
 80017d8:	681c      	ldr	r4, [r3, #0]
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	1e5a      	subs	r2, r3, #1
 80017e0:	1cfb      	adds	r3, r7, #3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	1e58      	subs	r0, r3, #1
 80017e6:	0013      	movs	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	189b      	adds	r3, r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	18e3      	adds	r3, r4, r3
 80017f0:	181b      	adds	r3, r3, r0
 80017f2:	3317      	adds	r3, #23
 80017f4:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 80017f6:	430b      	orrs	r3, r1
 80017f8:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll - 1]
 80017fa:	4baa      	ldr	r3, [pc, #680]	; (8001aa4 <logic+0x12c0>)
 80017fc:	681c      	ldr	r4, [r3, #0]
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	1cfb      	adds	r3, r7, #3
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	1e58      	subs	r0, r3, #1
 800180a:	0013      	movs	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	189b      	adds	r3, r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	18e3      	adds	r3, r4, r3
 8001814:	181b      	adds	r3, r3, r0
 8001816:	3317      	adds	r3, #23
 8001818:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 800181a:	430b      	orrs	r3, r1
 800181c:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 2][coll - 1]
 800181e:	4ba1      	ldr	r3, [pc, #644]	; (8001aa4 <logic+0x12c0>)
 8001820:	681c      	ldr	r4, [r3, #0]
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	1c9a      	adds	r2, r3, #2
 8001828:	1cfb      	adds	r3, r7, #3
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	1e58      	subs	r0, r3, #1
 800182e:	0013      	movs	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	189b      	adds	r3, r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	18e3      	adds	r3, r4, r3
 8001838:	181b      	adds	r3, r3, r0
 800183a:	3317      	adds	r3, #23
 800183c:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 800183e:	430b      	orrs	r3, r1
 8001840:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll - 2]
 8001842:	4b98      	ldr	r3, [pc, #608]	; (8001aa4 <logic+0x12c0>)
 8001844:	681c      	ldr	r4, [r3, #0]
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	1cfb      	adds	r3, r7, #3
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	1e98      	subs	r0, r3, #2
 8001850:	0013      	movs	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	189b      	adds	r3, r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	18e3      	adds	r3, r4, r3
 800185a:	181b      	adds	r3, r3, r0
 800185c:	3317      	adds	r3, #23
 800185e:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 8001860:	430b      	orrs	r3, r1
 8001862:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll - 3]
 8001864:	4b8f      	ldr	r3, [pc, #572]	; (8001aa4 <logic+0x12c0>)
 8001866:	681c      	ldr	r4, [r3, #0]
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	1cfb      	adds	r3, r7, #3
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	1ed8      	subs	r0, r3, #3
 8001874:	0013      	movs	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	189b      	adds	r3, r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	18e3      	adds	r3, r4, r3
 800187e:	181b      	adds	r3, r3, r0
 8001880:	3317      	adds	r3, #23
 8001882:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 8001884:	430b      	orrs	r3, r1
 8001886:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll - 3]
 8001888:	4b86      	ldr	r3, [pc, #536]	; (8001aa4 <logic+0x12c0>)
 800188a:	681c      	ldr	r4, [r3, #0]
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	1cfb      	adds	r3, r7, #3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	1ed8      	subs	r0, r3, #3
 8001896:	0013      	movs	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	189b      	adds	r3, r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	18e3      	adds	r3, r4, r3
 80018a0:	181b      	adds	r3, r3, r0
 80018a2:	3317      	adds	r3, #23
 80018a4:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 80018a6:	430b      	orrs	r3, r1
 80018a8:	b2d9      	uxtb	r1, r3
 80018aa:	4b7e      	ldr	r3, [pc, #504]	; (8001aa4 <logic+0x12c0>)
 80018ac:	681c      	ldr	r4, [r3, #0]
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	1cfb      	adds	r3, r7, #3
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	1ed8      	subs	r0, r3, #3
 80018ba:	0013      	movs	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	189b      	adds	r3, r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	18e3      	adds	r3, r4, r3
 80018c4:	181b      	adds	r3, r3, r0
 80018c6:	3317      	adds	r3, #23
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2109      	movs	r1, #9
 80018d0:	187a      	adds	r2, r7, r1
 80018d2:	1879      	adds	r1, r7, r1
 80018d4:	7809      	ldrb	r1, [r1, #0]
 80018d6:	7011      	strb	r1, [r2, #0]
		if ((playerPtr->board[row][coll]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d000      	beq.n	80018de <logic+0x10fa>
 80018dc:	e284      	b.n	8001de8 <logic+0x1604>
		{
		playerPtr->board[row][coll] = 'B';
 80018de:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <logic+0x12c0>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	1cfb      	adds	r3, r7, #3
 80018e8:	7819      	ldrb	r1, [r3, #0]
 80018ea:	0013      	movs	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	18c3      	adds	r3, r0, r3
 80018f4:	185b      	adds	r3, r3, r1
 80018f6:	3317      	adds	r3, #23
 80018f8:	2242      	movs	r2, #66	; 0x42
 80018fa:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
		playerPtr->board[row + 2][coll - 1] =
		playerPtr->board[row][coll - 2] =
		playerPtr->board[row - 1][coll - 3] =
		playerPtr->board[row][coll - 3] =
		playerPtr->board[row + 1][coll - 3] = 'b';
 80018fc:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <logic+0x12c0>)
 80018fe:	681e      	ldr	r6, [r3, #0]
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	1c59      	adds	r1, r3, #1
 8001906:	1cfb      	adds	r3, r7, #3
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	1edd      	subs	r5, r3, #3
 800190c:	000b      	movs	r3, r1
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	185b      	adds	r3, r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	18f3      	adds	r3, r6, r3
 8001916:	195b      	adds	r3, r3, r5
 8001918:	3317      	adds	r3, #23
 800191a:	2262      	movs	r2, #98	; 0x62
 800191c:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll - 3] =
 800191e:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <logic+0x12c0>)
 8001920:	681c      	ldr	r4, [r3, #0]
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	1cfb      	adds	r3, r7, #3
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	1ed8      	subs	r0, r3, #3
		playerPtr->board[row + 1][coll - 3] = 'b';
 800192c:	000b      	movs	r3, r1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	185b      	adds	r3, r3, r1
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	18f3      	adds	r3, r6, r3
 8001936:	195b      	adds	r3, r3, r5
 8001938:	3317      	adds	r3, #23
 800193a:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll - 3] =
 800193c:	0013      	movs	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	189b      	adds	r3, r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	18e3      	adds	r3, r4, r3
 8001946:	181b      	adds	r3, r3, r0
 8001948:	3317      	adds	r3, #23
 800194a:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 3] =
 800194c:	4b55      	ldr	r3, [pc, #340]	; (8001aa4 <logic+0x12c0>)
 800194e:	681e      	ldr	r6, [r3, #0]
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	1e59      	subs	r1, r3, #1
 8001956:	1cfb      	adds	r3, r7, #3
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	1edd      	subs	r5, r3, #3
		playerPtr->board[row][coll - 3] =
 800195c:	0013      	movs	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	189b      	adds	r3, r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	18e3      	adds	r3, r4, r3
 8001966:	181b      	adds	r3, r3, r0
 8001968:	3317      	adds	r3, #23
 800196a:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 3] =
 800196c:	000b      	movs	r3, r1
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	185b      	adds	r3, r3, r1
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	18f3      	adds	r3, r6, r3
 8001976:	195b      	adds	r3, r3, r5
 8001978:	3317      	adds	r3, #23
 800197a:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll - 2] =
 800197c:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <logic+0x12c0>)
 800197e:	681c      	ldr	r4, [r3, #0]
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	1cfb      	adds	r3, r7, #3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	1e98      	subs	r0, r3, #2
		playerPtr->board[row - 1][coll - 3] =
 800198a:	000b      	movs	r3, r1
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	185b      	adds	r3, r3, r1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	18f3      	adds	r3, r6, r3
 8001994:	195b      	adds	r3, r3, r5
 8001996:	3317      	adds	r3, #23
 8001998:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll - 2] =
 800199a:	0013      	movs	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	189b      	adds	r3, r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	18e3      	adds	r3, r4, r3
 80019a4:	181b      	adds	r3, r3, r0
 80019a6:	3317      	adds	r3, #23
 80019a8:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 2][coll - 1] =
 80019aa:	4b3e      	ldr	r3, [pc, #248]	; (8001aa4 <logic+0x12c0>)
 80019ac:	681e      	ldr	r6, [r3, #0]
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	1c99      	adds	r1, r3, #2
 80019b4:	1cfb      	adds	r3, r7, #3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row][coll - 2] =
 80019ba:	0013      	movs	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	189b      	adds	r3, r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	18e3      	adds	r3, r4, r3
 80019c4:	181b      	adds	r3, r3, r0
 80019c6:	3317      	adds	r3, #23
 80019c8:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 2][coll - 1] =
 80019ca:	000b      	movs	r3, r1
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	185b      	adds	r3, r3, r1
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	18f3      	adds	r3, r6, r3
 80019d4:	195b      	adds	r3, r3, r5
 80019d6:	3317      	adds	r3, #23
 80019d8:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 80019da:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <logic+0x12c0>)
 80019dc:	681c      	ldr	r4, [r3, #0]
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	1cfb      	adds	r3, r7, #3
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	1e58      	subs	r0, r3, #1
		playerPtr->board[row + 2][coll - 1] =
 80019ea:	000b      	movs	r3, r1
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	185b      	adds	r3, r3, r1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	18f3      	adds	r3, r6, r3
 80019f4:	195b      	adds	r3, r3, r5
 80019f6:	3317      	adds	r3, #23
 80019f8:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 80019fa:	0013      	movs	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	189b      	adds	r3, r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	18e3      	adds	r3, r4, r3
 8001a04:	181b      	adds	r3, r3, r0
 8001a06:	3317      	adds	r3, #23
 8001a08:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row][coll - 1] =
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <logic+0x12c0>)
 8001a0c:	681e      	ldr	r6, [r3, #0]
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	7819      	ldrb	r1, [r3, #0]
 8001a12:	1cfb      	adds	r3, r7, #3
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row + 1][coll - 1] =
 8001a18:	0013      	movs	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	189b      	adds	r3, r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	18e3      	adds	r3, r4, r3
 8001a22:	181b      	adds	r3, r3, r0
 8001a24:	3317      	adds	r3, #23
 8001a26:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row][coll - 1] =
 8001a28:	000b      	movs	r3, r1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	185b      	adds	r3, r3, r1
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	18f3      	adds	r3, r6, r3
 8001a32:	195b      	adds	r3, r3, r5
 8001a34:	3317      	adds	r3, #23
 8001a36:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <logic+0x12c0>)
 8001a3a:	681c      	ldr	r4, [r3, #0]
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	1e5a      	subs	r2, r3, #1
 8001a42:	1cfb      	adds	r3, r7, #3
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	1e58      	subs	r0, r3, #1
		playerPtr->board[row][coll - 1] =
 8001a48:	000b      	movs	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	185b      	adds	r3, r3, r1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	18f3      	adds	r3, r6, r3
 8001a52:	195b      	adds	r3, r3, r5
 8001a54:	3317      	adds	r3, #23
 8001a56:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 8001a58:	0013      	movs	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	189b      	adds	r3, r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	18e3      	adds	r3, r4, r3
 8001a62:	181b      	adds	r3, r3, r0
 8001a64:	3317      	adds	r3, #23
 8001a66:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 2][coll - 1] =
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <logic+0x12c0>)
 8001a6a:	681e      	ldr	r6, [r3, #0]
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	1e99      	subs	r1, r3, #2
 8001a72:	1cfb      	adds	r3, r7, #3
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row - 1][coll - 1] =
 8001a78:	0013      	movs	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	189b      	adds	r3, r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	18e3      	adds	r3, r4, r3
 8001a82:	181b      	adds	r3, r3, r0
 8001a84:	3317      	adds	r3, #23
 8001a86:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 2][coll - 1] =
 8001a88:	000b      	movs	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	185b      	adds	r3, r3, r1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	18f3      	adds	r3, r6, r3
 8001a92:	195b      	adds	r3, r3, r5
 8001a94:	3317      	adds	r3, #23
 8001a96:	701a      	strb	r2, [r3, #0]
		generat2 = 1;
 8001a98:	2109      	movs	r1, #9
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e1a2      	b.n	8001de8 <logic+0x1604>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	2000007c 	.word	0x2000007c
		}
	}

	else if (a2 == 4)//varful la stanga
 8001aa8:	1c7b      	adds	r3, r7, #1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d000      	beq.n	8001ab2 <logic+0x12ce>
 8001ab0:	e196      	b.n	8001de0 <logic+0x15fc>
	{
		if ((playerPtr->board[row][coll]
 8001ab2:	4bf5      	ldr	r3, [pc, #980]	; (8001e88 <logic+0x16a4>)
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	1cfb      	adds	r3, r7, #3
 8001abc:	7819      	ldrb	r1, [r3, #0]
 8001abe:	0013      	movs	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	189b      	adds	r3, r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	18c3      	adds	r3, r0, r3
 8001ac8:	185b      	adds	r3, r3, r1
 8001aca:	3317      	adds	r3, #23
 8001acc:	7819      	ldrb	r1, [r3, #0]
		| playerPtr->board[row + 1][coll - 2]
 8001ace:	4bee      	ldr	r3, [pc, #952]	; (8001e88 <logic+0x16a4>)
 8001ad0:	681c      	ldr	r4, [r3, #0]
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	1cfb      	adds	r3, r7, #3
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	1e98      	subs	r0, r3, #2
 8001ade:	0013      	movs	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	189b      	adds	r3, r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	18e3      	adds	r3, r4, r3
 8001ae8:	181b      	adds	r3, r3, r0
 8001aea:	3317      	adds	r3, #23
 8001aec:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 1]
		| playerPtr->board[row + 1][coll + 2]
		| playerPtr->board[row + 2][coll]
		| playerPtr->board[row + 3][coll - 1]
		| playerPtr->board[row + 3][coll]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8001aee:	430b      	orrs	r3, r1
 8001af0:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll - 1]
 8001af2:	4be5      	ldr	r3, [pc, #916]	; (8001e88 <logic+0x16a4>)
 8001af4:	681c      	ldr	r4, [r3, #0]
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	1cfb      	adds	r3, r7, #3
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	1e58      	subs	r0, r3, #1
 8001b02:	0013      	movs	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	189b      	adds	r3, r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	18e3      	adds	r3, r4, r3
 8001b0c:	181b      	adds	r3, r3, r0
 8001b0e:	3317      	adds	r3, #23
 8001b10:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8001b12:	430b      	orrs	r3, r1
 8001b14:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll]
 8001b16:	4bdc      	ldr	r3, [pc, #880]	; (8001e88 <logic+0x16a4>)
 8001b18:	681c      	ldr	r4, [r3, #0]
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	1cfb      	adds	r3, r7, #3
 8001b22:	7818      	ldrb	r0, [r3, #0]
 8001b24:	0013      	movs	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	189b      	adds	r3, r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	18e3      	adds	r3, r4, r3
 8001b2e:	181b      	adds	r3, r3, r0
 8001b30:	3317      	adds	r3, #23
 8001b32:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8001b34:	430b      	orrs	r3, r1
 8001b36:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll + 1]
 8001b38:	4bd3      	ldr	r3, [pc, #844]	; (8001e88 <logic+0x16a4>)
 8001b3a:	681c      	ldr	r4, [r3, #0]
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	1cfb      	adds	r3, r7, #3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	1c58      	adds	r0, r3, #1
 8001b48:	0013      	movs	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	189b      	adds	r3, r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	18e3      	adds	r3, r4, r3
 8001b52:	181b      	adds	r3, r3, r0
 8001b54:	3317      	adds	r3, #23
 8001b56:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll + 2]
 8001b5c:	4bca      	ldr	r3, [pc, #808]	; (8001e88 <logic+0x16a4>)
 8001b5e:	681c      	ldr	r4, [r3, #0]
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	1cfb      	adds	r3, r7, #3
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	1c98      	adds	r0, r3, #2
 8001b6c:	0013      	movs	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	189b      	adds	r3, r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	18e3      	adds	r3, r4, r3
 8001b76:	181b      	adds	r3, r3, r0
 8001b78:	3317      	adds	r3, #23
 8001b7a:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 2][coll]
 8001b80:	4bc1      	ldr	r3, [pc, #772]	; (8001e88 <logic+0x16a4>)
 8001b82:	681c      	ldr	r4, [r3, #0]
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	1c9a      	adds	r2, r3, #2
 8001b8a:	1cfb      	adds	r3, r7, #3
 8001b8c:	7818      	ldrb	r0, [r3, #0]
 8001b8e:	0013      	movs	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	189b      	adds	r3, r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	18e3      	adds	r3, r4, r3
 8001b98:	181b      	adds	r3, r3, r0
 8001b9a:	3317      	adds	r3, #23
 8001b9c:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 3][coll - 1]
 8001ba2:	4bb9      	ldr	r3, [pc, #740]	; (8001e88 <logic+0x16a4>)
 8001ba4:	681c      	ldr	r4, [r3, #0]
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	1cda      	adds	r2, r3, #3
 8001bac:	1cfb      	adds	r3, r7, #3
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	1e58      	subs	r0, r3, #1
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	189b      	adds	r3, r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	18e3      	adds	r3, r4, r3
 8001bbc:	181b      	adds	r3, r3, r0
 8001bbe:	3317      	adds	r3, #23
 8001bc0:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 3][coll]
 8001bc6:	4bb0      	ldr	r3, [pc, #704]	; (8001e88 <logic+0x16a4>)
 8001bc8:	681c      	ldr	r4, [r3, #0]
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	1cda      	adds	r2, r3, #3
 8001bd0:	1cfb      	adds	r3, r7, #3
 8001bd2:	7818      	ldrb	r0, [r3, #0]
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	189b      	adds	r3, r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	18e3      	adds	r3, r4, r3
 8001bde:	181b      	adds	r3, r3, r0
 8001be0:	3317      	adds	r3, #23
 8001be2:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8001be4:	430b      	orrs	r3, r1
 8001be6:	b2d9      	uxtb	r1, r3
 8001be8:	4ba7      	ldr	r3, [pc, #668]	; (8001e88 <logic+0x16a4>)
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	1cda      	adds	r2, r3, #3
 8001bf2:	1cfb      	adds	r3, r7, #3
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	1c58      	adds	r0, r3, #1
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	189b      	adds	r3, r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	18e3      	adds	r3, r4, r3
 8001c02:	181b      	adds	r3, r3, r0
 8001c04:	3317      	adds	r3, #23
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2109      	movs	r1, #9
 8001c0e:	187a      	adds	r2, r7, r1
 8001c10:	1879      	adds	r1, r7, r1
 8001c12:	7809      	ldrb	r1, [r1, #0]
 8001c14:	7011      	strb	r1, [r2, #0]
		if ((playerPtr->board[row][coll]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d000      	beq.n	8001c1c <logic+0x1438>
 8001c1a:	e0e5      	b.n	8001de8 <logic+0x1604>
		{
		playerPtr->board[row][coll] = 'B';
 8001c1c:	4b9a      	ldr	r3, [pc, #616]	; (8001e88 <logic+0x16a4>)
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	1cfb      	adds	r3, r7, #3
 8001c26:	7819      	ldrb	r1, [r3, #0]
 8001c28:	0013      	movs	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	189b      	adds	r3, r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	18c3      	adds	r3, r0, r3
 8001c32:	185b      	adds	r3, r3, r1
 8001c34:	3317      	adds	r3, #23
 8001c36:	2242      	movs	r2, #66	; 0x42
 8001c38:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
		playerPtr->board[row + 1][coll + 2] =
		playerPtr->board[row + 2][coll] =
		playerPtr->board[row + 3][coll - 1] =
		playerPtr->board[row + 3][coll] =
		playerPtr->board[row + 3][coll + 1] = 'b';
 8001c3a:	4b93      	ldr	r3, [pc, #588]	; (8001e88 <logic+0x16a4>)
 8001c3c:	681e      	ldr	r6, [r3, #0]
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	1cd9      	adds	r1, r3, #3
 8001c44:	1cfb      	adds	r3, r7, #3
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	1c5d      	adds	r5, r3, #1
 8001c4a:	000b      	movs	r3, r1
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	185b      	adds	r3, r3, r1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	18f3      	adds	r3, r6, r3
 8001c54:	195b      	adds	r3, r3, r5
 8001c56:	3317      	adds	r3, #23
 8001c58:	2262      	movs	r2, #98	; 0x62
 8001c5a:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 3][coll] =
 8001c5c:	4b8a      	ldr	r3, [pc, #552]	; (8001e88 <logic+0x16a4>)
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	1cda      	adds	r2, r3, #3
 8001c66:	1cfb      	adds	r3, r7, #3
 8001c68:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row + 3][coll + 1] = 'b';
 8001c6a:	000b      	movs	r3, r1
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	185b      	adds	r3, r3, r1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	18f3      	adds	r3, r6, r3
 8001c74:	195b      	adds	r3, r3, r5
 8001c76:	3317      	adds	r3, #23
 8001c78:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 3][coll] =
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	189b      	adds	r3, r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	18e3      	adds	r3, r4, r3
 8001c84:	181b      	adds	r3, r3, r0
 8001c86:	3317      	adds	r3, #23
 8001c88:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 3][coll - 1] =
 8001c8a:	4b7f      	ldr	r3, [pc, #508]	; (8001e88 <logic+0x16a4>)
 8001c8c:	681e      	ldr	r6, [r3, #0]
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	1cd9      	adds	r1, r3, #3
 8001c94:	1cfb      	adds	r3, r7, #3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row + 3][coll] =
 8001c9a:	0013      	movs	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	189b      	adds	r3, r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	18e3      	adds	r3, r4, r3
 8001ca4:	181b      	adds	r3, r3, r0
 8001ca6:	3317      	adds	r3, #23
 8001ca8:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 3][coll - 1] =
 8001caa:	000b      	movs	r3, r1
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	185b      	adds	r3, r3, r1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	18f3      	adds	r3, r6, r3
 8001cb4:	195b      	adds	r3, r3, r5
 8001cb6:	3317      	adds	r3, #23
 8001cb8:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 2][coll] =
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <logic+0x16a4>)
 8001cbc:	681c      	ldr	r4, [r3, #0]
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	1c9a      	adds	r2, r3, #2
 8001cc4:	1cfb      	adds	r3, r7, #3
 8001cc6:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row + 3][coll - 1] =
 8001cc8:	000b      	movs	r3, r1
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	185b      	adds	r3, r3, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	18f3      	adds	r3, r6, r3
 8001cd2:	195b      	adds	r3, r3, r5
 8001cd4:	3317      	adds	r3, #23
 8001cd6:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 2][coll] =
 8001cd8:	0013      	movs	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	189b      	adds	r3, r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	18e3      	adds	r3, r4, r3
 8001ce2:	181b      	adds	r3, r3, r0
 8001ce4:	3317      	adds	r3, #23
 8001ce6:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 1][coll + 2] =
 8001ce8:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <logic+0x16a4>)
 8001cea:	681e      	ldr	r6, [r3, #0]
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	1c59      	adds	r1, r3, #1
 8001cf2:	1cfb      	adds	r3, r7, #3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	1c9d      	adds	r5, r3, #2
		playerPtr->board[row + 2][coll] =
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	189b      	adds	r3, r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	18e3      	adds	r3, r4, r3
 8001d02:	181b      	adds	r3, r3, r0
 8001d04:	3317      	adds	r3, #23
 8001d06:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 2] =
 8001d08:	000b      	movs	r3, r1
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	185b      	adds	r3, r3, r1
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	18f3      	adds	r3, r6, r3
 8001d12:	195b      	adds	r3, r3, r5
 8001d14:	3317      	adds	r3, #23
 8001d16:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8001d18:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <logic+0x16a4>)
 8001d1a:	681c      	ldr	r4, [r3, #0]
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	1cfb      	adds	r3, r7, #3
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	1c58      	adds	r0, r3, #1
		playerPtr->board[row + 1][coll + 2] =
 8001d28:	000b      	movs	r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	185b      	adds	r3, r3, r1
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	18f3      	adds	r3, r6, r3
 8001d32:	195b      	adds	r3, r3, r5
 8001d34:	3317      	adds	r3, #23
 8001d36:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8001d38:	0013      	movs	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	189b      	adds	r3, r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	18e3      	adds	r3, r4, r3
 8001d42:	181b      	adds	r3, r3, r0
 8001d44:	3317      	adds	r3, #23
 8001d46:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 1][coll] =
 8001d48:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <logic+0x16a4>)
 8001d4a:	681e      	ldr	r6, [r3, #0]
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	1c59      	adds	r1, r3, #1
 8001d52:	1cfb      	adds	r3, r7, #3
 8001d54:	781d      	ldrb	r5, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8001d56:	0013      	movs	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	189b      	adds	r3, r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	18e3      	adds	r3, r4, r3
 8001d60:	181b      	adds	r3, r3, r0
 8001d62:	3317      	adds	r3, #23
 8001d64:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 1][coll] =
 8001d66:	000b      	movs	r3, r1
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	185b      	adds	r3, r3, r1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	18f3      	adds	r3, r6, r3
 8001d70:	195b      	adds	r3, r3, r5
 8001d72:	3317      	adds	r3, #23
 8001d74:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 8001d76:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <logic+0x16a4>)
 8001d78:	681c      	ldr	r4, [r3, #0]
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	1cfb      	adds	r3, r7, #3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	1e58      	subs	r0, r3, #1
		playerPtr->board[row + 1][coll] =
 8001d86:	000b      	movs	r3, r1
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	185b      	adds	r3, r3, r1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	18f3      	adds	r3, r6, r3
 8001d90:	195b      	adds	r3, r3, r5
 8001d92:	3317      	adds	r3, #23
 8001d94:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 8001d96:	0013      	movs	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	189b      	adds	r3, r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	18e3      	adds	r3, r4, r3
 8001da0:	181b      	adds	r3, r3, r0
 8001da2:	3317      	adds	r3, #23
 8001da4:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 1][coll - 2] =
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <logic+0x16a4>)
 8001da8:	681e      	ldr	r6, [r3, #0]
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	1c59      	adds	r1, r3, #1
 8001db0:	1cfb      	adds	r3, r7, #3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	1e9d      	subs	r5, r3, #2
		playerPtr->board[row + 1][coll - 1] =
 8001db6:	0013      	movs	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	189b      	adds	r3, r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	18e3      	adds	r3, r4, r3
 8001dc0:	181b      	adds	r3, r3, r0
 8001dc2:	3317      	adds	r3, #23
 8001dc4:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 2] =
 8001dc6:	000b      	movs	r3, r1
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	185b      	adds	r3, r3, r1
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	18f3      	adds	r3, r6, r3
 8001dd0:	195b      	adds	r3, r3, r5
 8001dd2:	3317      	adds	r3, #23
 8001dd4:	701a      	strb	r2, [r3, #0]
		generat2 = 1;
 8001dd6:	2109      	movs	r1, #9
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e003      	b.n	8001de8 <logic+0x1604>
		}
	}
	else generat2 = 0;
 8001de0:	2309      	movs	r3, #9
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
	while (!generat2)
 8001de8:	2309      	movs	r3, #9
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <logic+0x1612>
 8001df2:	f7ff f924 	bl	800103e <logic+0x85a>
}

	//avionul 3
	while (!generat3)
 8001df6:	f000 fed5 	bl	8002ba4 <logic+0x23c0>
	{
		//randomizare a3, x3, y3;
		a3 = GetRand(1, 4);
 8001dfa:	1cbc      	adds	r4, r7, #2
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f7fe fcbc 	bl	800077c <GetRand>
 8001e04:	0003      	movs	r3, r0
 8001e06:	7023      	strb	r3, [r4, #0]

	if (a3 == 1)
 8001e08:	1cbb      	adds	r3, r7, #2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d110      	bne.n	8001e32 <logic+0x164e>
	{
		x3 = GetRand(2, 7); // pzitionarea pilotului pe Axa x spre stanga
 8001e10:	230b      	movs	r3, #11
 8001e12:	18fc      	adds	r4, r7, r3
 8001e14:	2107      	movs	r1, #7
 8001e16:	2002      	movs	r0, #2
 8001e18:	f7fe fcb0 	bl	800077c <GetRand>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	7023      	strb	r3, [r4, #0]
		y3 = GetRand(0, 6); // pozitionarea pilotului pe Axa y in jos
 8001e20:	230a      	movs	r3, #10
 8001e22:	18fc      	adds	r4, r7, r3
 8001e24:	2106      	movs	r1, #6
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7fe fca8 	bl	800077c <GetRand>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	7023      	strb	r3, [r4, #0]
 8001e30:	e040      	b.n	8001eb4 <logic+0x16d0>
	}
	else if (a3 == 2)		// avionul 1 orientat spre dreapta
 8001e32:	1cbb      	adds	r3, r7, #2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d110      	bne.n	8001e5c <logic+0x1678>
	{
		x3 = GetRand(3, 9); // pzitionarea pilotului pe Axa x spre stanga
 8001e3a:	230b      	movs	r3, #11
 8001e3c:	18fc      	adds	r4, r7, r3
 8001e3e:	2109      	movs	r1, #9
 8001e40:	2003      	movs	r0, #3
 8001e42:	f7fe fc9b 	bl	800077c <GetRand>
 8001e46:	0003      	movs	r3, r0
 8001e48:	7023      	strb	r3, [r4, #0]
		y3 = GetRand(2, 7); // pzitionarea pilotului pe Axa y in jos
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	18fc      	adds	r4, r7, r3
 8001e4e:	2107      	movs	r1, #7
 8001e50:	2002      	movs	r0, #2
 8001e52:	f7fe fc93 	bl	800077c <GetRand>
 8001e56:	0003      	movs	r3, r0
 8001e58:	7023      	strb	r3, [r4, #0]
 8001e5a:	e02b      	b.n	8001eb4 <logic+0x16d0>
	}
	else if (a3 == 3)		// avionul 1 Pilotul in jos
 8001e5c:	1cbb      	adds	r3, r7, #2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d113      	bne.n	8001e8c <logic+0x16a8>
	{
		x3 = GetRand(2, 7); // pzitionarea pilotului pe Axa x spre stanga
 8001e64:	230b      	movs	r3, #11
 8001e66:	18fc      	adds	r4, r7, r3
 8001e68:	2107      	movs	r1, #7
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f7fe fc86 	bl	800077c <GetRand>
 8001e70:	0003      	movs	r3, r0
 8001e72:	7023      	strb	r3, [r4, #0]
		y3 = GetRand(3, 9); // pzitionarea pilotului pe Axa y in jos
 8001e74:	230a      	movs	r3, #10
 8001e76:	18fc      	adds	r4, r7, r3
 8001e78:	2109      	movs	r1, #9
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	f7fe fc7e 	bl	800077c <GetRand>
 8001e80:	0003      	movs	r3, r0
 8001e82:	7023      	strb	r3, [r4, #0]
 8001e84:	e016      	b.n	8001eb4 <logic+0x16d0>
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	2000007c 	.word	0x2000007c
	}
	else if (a3 == 4)		//avionul 1 Pilotul la stanga
 8001e8c:	1cbb      	adds	r3, r7, #2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d10f      	bne.n	8001eb4 <logic+0x16d0>
	{
		x3 = GetRand(0, 6); //pzitionarea pilotului pe Axa x spre stanga
 8001e94:	230b      	movs	r3, #11
 8001e96:	18fc      	adds	r4, r7, r3
 8001e98:	2106      	movs	r1, #6
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7fe fc6e 	bl	800077c <GetRand>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	7023      	strb	r3, [r4, #0]
		y3 = GetRand(2, 7); //pzitionarea pilotului pe Axa y in jos
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	18fc      	adds	r4, r7, r3
 8001ea8:	2107      	movs	r1, #7
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7fe fc66 	bl	800077c <GetRand>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	7023      	strb	r3, [r4, #0]
	}
	row = x3;
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	220b      	movs	r2, #11
 8001eb8:	18ba      	adds	r2, r7, r2
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	701a      	strb	r2, [r3, #0]
	coll = y3;
 8001ebe:	1cfb      	adds	r3, r7, #3
 8001ec0:	220a      	movs	r2, #10
 8001ec2:	18ba      	adds	r2, r7, r2
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	701a      	strb	r2, [r3, #0]

		if (a3 == 1)//varful in sus
 8001ec8:	1cbb      	adds	r3, r7, #2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d000      	beq.n	8001ed2 <logic+0x16ee>
 8001ed0:	e19a      	b.n	8002208 <logic+0x1a24>
		{
		if ((playerPtr->board[row][coll]
 8001ed2:	4bcc      	ldr	r3, [pc, #816]	; (8002204 <logic+0x1a20>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	1cfb      	adds	r3, r7, #3
 8001edc:	7819      	ldrb	r1, [r3, #0]
 8001ede:	0013      	movs	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	189b      	adds	r3, r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	18c3      	adds	r3, r0, r3
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	3317      	adds	r3, #23
 8001eec:	7819      	ldrb	r1, [r3, #0]
		| playerPtr->board[row - 2][coll + 1]
 8001eee:	4bc5      	ldr	r3, [pc, #788]	; (8002204 <logic+0x1a20>)
 8001ef0:	681c      	ldr	r4, [r3, #0]
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	1e9a      	subs	r2, r3, #2
 8001ef8:	1cfb      	adds	r3, r7, #3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	1c58      	adds	r0, r3, #1
 8001efe:	0013      	movs	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	189b      	adds	r3, r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	18e3      	adds	r3, r4, r3
 8001f08:	181b      	adds	r3, r3, r0
 8001f0a:	3317      	adds	r3, #23
 8001f0c:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 1]
		| playerPtr->board[row + 2][coll + 1]
		| playerPtr->board[row][coll + 2]
		| playerPtr->board[row - 1][coll + 3]
		| playerPtr->board[row][coll + 3]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001f0e:	430b      	orrs	r3, r1
 8001f10:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll + 1]
 8001f12:	4bbc      	ldr	r3, [pc, #752]	; (8002204 <logic+0x1a20>)
 8001f14:	681c      	ldr	r4, [r3, #0]
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	1e5a      	subs	r2, r3, #1
 8001f1c:	1cfb      	adds	r3, r7, #3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	1c58      	adds	r0, r3, #1
 8001f22:	0013      	movs	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	189b      	adds	r3, r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	18e3      	adds	r3, r4, r3
 8001f2c:	181b      	adds	r3, r3, r0
 8001f2e:	3317      	adds	r3, #23
 8001f30:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001f32:	430b      	orrs	r3, r1
 8001f34:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll + 1]
 8001f36:	4bb3      	ldr	r3, [pc, #716]	; (8002204 <logic+0x1a20>)
 8001f38:	681c      	ldr	r4, [r3, #0]
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	1cfb      	adds	r3, r7, #3
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	1c58      	adds	r0, r3, #1
 8001f44:	0013      	movs	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	189b      	adds	r3, r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	18e3      	adds	r3, r4, r3
 8001f4e:	181b      	adds	r3, r3, r0
 8001f50:	3317      	adds	r3, #23
 8001f52:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001f54:	430b      	orrs	r3, r1
 8001f56:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll + 1]
 8001f58:	4baa      	ldr	r3, [pc, #680]	; (8002204 <logic+0x1a20>)
 8001f5a:	681c      	ldr	r4, [r3, #0]
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	1cfb      	adds	r3, r7, #3
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	1c58      	adds	r0, r3, #1
 8001f68:	0013      	movs	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	189b      	adds	r3, r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	18e3      	adds	r3, r4, r3
 8001f72:	181b      	adds	r3, r3, r0
 8001f74:	3317      	adds	r3, #23
 8001f76:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 2][coll + 1]
 8001f7c:	4ba1      	ldr	r3, [pc, #644]	; (8002204 <logic+0x1a20>)
 8001f7e:	681c      	ldr	r4, [r3, #0]
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	1c9a      	adds	r2, r3, #2
 8001f86:	1cfb      	adds	r3, r7, #3
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	1c58      	adds	r0, r3, #1
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	189b      	adds	r3, r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	18e3      	adds	r3, r4, r3
 8001f96:	181b      	adds	r3, r3, r0
 8001f98:	3317      	adds	r3, #23
 8001f9a:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll + 2]
 8001fa0:	4b98      	ldr	r3, [pc, #608]	; (8002204 <logic+0x1a20>)
 8001fa2:	681c      	ldr	r4, [r3, #0]
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	1cfb      	adds	r3, r7, #3
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	1c98      	adds	r0, r3, #2
 8001fae:	0013      	movs	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	189b      	adds	r3, r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	18e3      	adds	r3, r4, r3
 8001fb8:	181b      	adds	r3, r3, r0
 8001fba:	3317      	adds	r3, #23
 8001fbc:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll + 3]
 8001fc2:	4b90      	ldr	r3, [pc, #576]	; (8002204 <logic+0x1a20>)
 8001fc4:	681c      	ldr	r4, [r3, #0]
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	1e5a      	subs	r2, r3, #1
 8001fcc:	1cfb      	adds	r3, r7, #3
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	1cd8      	adds	r0, r3, #3
 8001fd2:	0013      	movs	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	189b      	adds	r3, r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	18e3      	adds	r3, r4, r3
 8001fdc:	181b      	adds	r3, r3, r0
 8001fde:	3317      	adds	r3, #23
 8001fe0:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll + 3]
 8001fe6:	4b87      	ldr	r3, [pc, #540]	; (8002204 <logic+0x1a20>)
 8001fe8:	681c      	ldr	r4, [r3, #0]
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	1cfb      	adds	r3, r7, #3
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	1cd8      	adds	r0, r3, #3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	189b      	adds	r3, r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	18e3      	adds	r3, r4, r3
 8001ffe:	181b      	adds	r3, r3, r0
 8002000:	3317      	adds	r3, #23
 8002002:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 3]) == 0x00)
 8002004:	430b      	orrs	r3, r1
 8002006:	b2d9      	uxtb	r1, r3
 8002008:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <logic+0x1a20>)
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	1cfb      	adds	r3, r7, #3
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	1cd8      	adds	r0, r3, #3
 8002018:	0013      	movs	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	189b      	adds	r3, r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	18e3      	adds	r3, r4, r3
 8002022:	181b      	adds	r3, r3, r0
 8002024:	3317      	adds	r3, #23
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	430b      	orrs	r3, r1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2108      	movs	r1, #8
 800202e:	187a      	adds	r2, r7, r1
 8002030:	1879      	adds	r1, r7, r1
 8002032:	7809      	ldrb	r1, [r1, #0]
 8002034:	7011      	strb	r1, [r2, #0]
		if ((playerPtr->board[row][coll]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <logic+0x185a>
 800203a:	f000 fdb3 	bl	8002ba4 <logic+0x23c0>
		{
			//varful in sus
		playerPtr->board[row][coll] = 'C';
 800203e:	4b71      	ldr	r3, [pc, #452]	; (8002204 <logic+0x1a20>)
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	1cfb      	adds	r3, r7, #3
 8002048:	7819      	ldrb	r1, [r3, #0]
 800204a:	0013      	movs	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	189b      	adds	r3, r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	18c3      	adds	r3, r0, r3
 8002054:	185b      	adds	r3, r3, r1
 8002056:	3317      	adds	r3, #23
 8002058:	2243      	movs	r2, #67	; 0x43
 800205a:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
		playerPtr->board[row + 2][coll + 1] =
		playerPtr->board[row][coll + 2] =
		playerPtr->board[row - 1][coll + 3] =
		playerPtr->board[row][coll + 3] =
		playerPtr->board[row + 1][coll + 3] = 'c';
 800205c:	4b69      	ldr	r3, [pc, #420]	; (8002204 <logic+0x1a20>)
 800205e:	681e      	ldr	r6, [r3, #0]
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	1c59      	adds	r1, r3, #1
 8002066:	1cfb      	adds	r3, r7, #3
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	1cdd      	adds	r5, r3, #3
 800206c:	000b      	movs	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	185b      	adds	r3, r3, r1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	18f3      	adds	r3, r6, r3
 8002076:	195b      	adds	r3, r3, r5
 8002078:	3317      	adds	r3, #23
 800207a:	2263      	movs	r2, #99	; 0x63
 800207c:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll + 3] =
 800207e:	4b61      	ldr	r3, [pc, #388]	; (8002204 <logic+0x1a20>)
 8002080:	681c      	ldr	r4, [r3, #0]
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	1cfb      	adds	r3, r7, #3
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	1cd8      	adds	r0, r3, #3
		playerPtr->board[row + 1][coll + 3] = 'c';
 800208c:	000b      	movs	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	185b      	adds	r3, r3, r1
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	18f3      	adds	r3, r6, r3
 8002096:	195b      	adds	r3, r3, r5
 8002098:	3317      	adds	r3, #23
 800209a:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll + 3] =
 800209c:	0013      	movs	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	189b      	adds	r3, r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	18e3      	adds	r3, r4, r3
 80020a6:	181b      	adds	r3, r3, r0
 80020a8:	3317      	adds	r3, #23
 80020aa:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 3] =
 80020ac:	4b55      	ldr	r3, [pc, #340]	; (8002204 <logic+0x1a20>)
 80020ae:	681e      	ldr	r6, [r3, #0]
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	1e59      	subs	r1, r3, #1
 80020b6:	1cfb      	adds	r3, r7, #3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	1cdd      	adds	r5, r3, #3
		playerPtr->board[row][coll + 3] =
 80020bc:	0013      	movs	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	189b      	adds	r3, r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	18e3      	adds	r3, r4, r3
 80020c6:	181b      	adds	r3, r3, r0
 80020c8:	3317      	adds	r3, #23
 80020ca:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 3] =
 80020cc:	000b      	movs	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	185b      	adds	r3, r3, r1
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	18f3      	adds	r3, r6, r3
 80020d6:	195b      	adds	r3, r3, r5
 80020d8:	3317      	adds	r3, #23
 80020da:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll + 2] =
 80020dc:	4b49      	ldr	r3, [pc, #292]	; (8002204 <logic+0x1a20>)
 80020de:	681c      	ldr	r4, [r3, #0]
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	1cfb      	adds	r3, r7, #3
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	1c98      	adds	r0, r3, #2
		playerPtr->board[row - 1][coll + 3] =
 80020ea:	000b      	movs	r3, r1
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	185b      	adds	r3, r3, r1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	18f3      	adds	r3, r6, r3
 80020f4:	195b      	adds	r3, r3, r5
 80020f6:	3317      	adds	r3, #23
 80020f8:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll + 2] =
 80020fa:	0013      	movs	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	189b      	adds	r3, r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	18e3      	adds	r3, r4, r3
 8002104:	181b      	adds	r3, r3, r0
 8002106:	3317      	adds	r3, #23
 8002108:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 2][coll + 1] =
 800210a:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <logic+0x1a20>)
 800210c:	681e      	ldr	r6, [r3, #0]
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	1c99      	adds	r1, r3, #2
 8002114:	1cfb      	adds	r3, r7, #3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	1c5d      	adds	r5, r3, #1
		playerPtr->board[row][coll + 2] =
 800211a:	0013      	movs	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	189b      	adds	r3, r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	18e3      	adds	r3, r4, r3
 8002124:	181b      	adds	r3, r3, r0
 8002126:	3317      	adds	r3, #23
 8002128:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 2][coll + 1] =
 800212a:	000b      	movs	r3, r1
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	185b      	adds	r3, r3, r1
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	18f3      	adds	r3, r6, r3
 8002134:	195b      	adds	r3, r3, r5
 8002136:	3317      	adds	r3, #23
 8002138:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <logic+0x1a20>)
 800213c:	681c      	ldr	r4, [r3, #0]
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	1cfb      	adds	r3, r7, #3
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	1c58      	adds	r0, r3, #1
		playerPtr->board[row + 2][coll + 1] =
 800214a:	000b      	movs	r3, r1
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	185b      	adds	r3, r3, r1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	18f3      	adds	r3, r6, r3
 8002154:	195b      	adds	r3, r3, r5
 8002156:	3317      	adds	r3, #23
 8002158:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 800215a:	0013      	movs	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	189b      	adds	r3, r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	18e3      	adds	r3, r4, r3
 8002164:	181b      	adds	r3, r3, r0
 8002166:	3317      	adds	r3, #23
 8002168:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row][coll + 1] =
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <logic+0x1a20>)
 800216c:	681e      	ldr	r6, [r3, #0]
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	7819      	ldrb	r1, [r3, #0]
 8002172:	1cfb      	adds	r3, r7, #3
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	1c5d      	adds	r5, r3, #1
		playerPtr->board[row + 1][coll + 1] =
 8002178:	0013      	movs	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	189b      	adds	r3, r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	18e3      	adds	r3, r4, r3
 8002182:	181b      	adds	r3, r3, r0
 8002184:	3317      	adds	r3, #23
 8002186:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row][coll + 1] =
 8002188:	000b      	movs	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	185b      	adds	r3, r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	18f3      	adds	r3, r6, r3
 8002192:	195b      	adds	r3, r3, r5
 8002194:	3317      	adds	r3, #23
 8002196:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <logic+0x1a20>)
 800219a:	681c      	ldr	r4, [r3, #0]
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	1cfb      	adds	r3, r7, #3
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	1c58      	adds	r0, r3, #1
		playerPtr->board[row][coll + 1] =
 80021a8:	000b      	movs	r3, r1
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	185b      	adds	r3, r3, r1
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	18f3      	adds	r3, r6, r3
 80021b2:	195b      	adds	r3, r3, r5
 80021b4:	3317      	adds	r3, #23
 80021b6:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 80021b8:	0013      	movs	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	189b      	adds	r3, r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	18e3      	adds	r3, r4, r3
 80021c2:	181b      	adds	r3, r3, r0
 80021c4:	3317      	adds	r3, #23
 80021c6:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 2][coll + 1] =
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <logic+0x1a20>)
 80021ca:	681e      	ldr	r6, [r3, #0]
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	1e99      	subs	r1, r3, #2
 80021d2:	1cfb      	adds	r3, r7, #3
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	1c5d      	adds	r5, r3, #1
		playerPtr->board[row - 1][coll + 1] =
 80021d8:	0013      	movs	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	189b      	adds	r3, r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	18e3      	adds	r3, r4, r3
 80021e2:	181b      	adds	r3, r3, r0
 80021e4:	3317      	adds	r3, #23
 80021e6:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 2][coll + 1] =
 80021e8:	000b      	movs	r3, r1
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	185b      	adds	r3, r3, r1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	18f3      	adds	r3, r6, r3
 80021f2:	195b      	adds	r3, r3, r5
 80021f4:	3317      	adds	r3, #23
 80021f6:	701a      	strb	r2, [r3, #0]
		generat3 = 1;
 80021f8:	2108      	movs	r1, #8
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	f000 fcd0 	bl	8002ba4 <logic+0x23c0>
 8002204:	2000007c 	.word	0x2000007c
		}
	}

	else if (a3 == 2)//varful la dreapta
 8002208:	1cbb      	adds	r3, r7, #2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d000      	beq.n	8002212 <logic+0x1a2e>
 8002210:	e19a      	b.n	8002548 <logic+0x1d64>
	{
		if ((playerPtr->board[row][coll]
 8002212:	4bcc      	ldr	r3, [pc, #816]	; (8002544 <logic+0x1d60>)
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	1cfb      	adds	r3, r7, #3
 800221c:	7819      	ldrb	r1, [r3, #0]
 800221e:	0013      	movs	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	189b      	adds	r3, r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	18c3      	adds	r3, r0, r3
 8002228:	185b      	adds	r3, r3, r1
 800222a:	3317      	adds	r3, #23
 800222c:	7819      	ldrb	r1, [r3, #0]
		| playerPtr->board[row - 1][coll - 2]
 800222e:	4bc5      	ldr	r3, [pc, #788]	; (8002544 <logic+0x1d60>)
 8002230:	681c      	ldr	r4, [r3, #0]
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	1e5a      	subs	r2, r3, #1
 8002238:	1cfb      	adds	r3, r7, #3
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	1e98      	subs	r0, r3, #2
 800223e:	0013      	movs	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	189b      	adds	r3, r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	18e3      	adds	r3, r4, r3
 8002248:	181b      	adds	r3, r3, r0
 800224a:	3317      	adds	r3, #23
 800224c:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 1][coll + 1]
		| playerPtr->board[row - 1][coll + 2]
		| playerPtr->board[row - 2][coll]
		| playerPtr->board[row - 3][coll - 1]
		| playerPtr->board[row - 3][coll]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 800224e:	430b      	orrs	r3, r1
 8002250:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll - 1]
 8002252:	4bbc      	ldr	r3, [pc, #752]	; (8002544 <logic+0x1d60>)
 8002254:	681c      	ldr	r4, [r3, #0]
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	1e5a      	subs	r2, r3, #1
 800225c:	1cfb      	adds	r3, r7, #3
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	1e58      	subs	r0, r3, #1
 8002262:	0013      	movs	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	189b      	adds	r3, r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	18e3      	adds	r3, r4, r3
 800226c:	181b      	adds	r3, r3, r0
 800226e:	3317      	adds	r3, #23
 8002270:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 8002272:	430b      	orrs	r3, r1
 8002274:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll]
 8002276:	4bb3      	ldr	r3, [pc, #716]	; (8002544 <logic+0x1d60>)
 8002278:	681c      	ldr	r4, [r3, #0]
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	1cfb      	adds	r3, r7, #3
 8002282:	7818      	ldrb	r0, [r3, #0]
 8002284:	0013      	movs	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	189b      	adds	r3, r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	18e3      	adds	r3, r4, r3
 800228e:	181b      	adds	r3, r3, r0
 8002290:	3317      	adds	r3, #23
 8002292:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 8002294:	430b      	orrs	r3, r1
 8002296:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll + 1]
 8002298:	4baa      	ldr	r3, [pc, #680]	; (8002544 <logic+0x1d60>)
 800229a:	681c      	ldr	r4, [r3, #0]
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	1cfb      	adds	r3, r7, #3
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	1c58      	adds	r0, r3, #1
 80022a8:	0013      	movs	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	189b      	adds	r3, r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	18e3      	adds	r3, r4, r3
 80022b2:	181b      	adds	r3, r3, r0
 80022b4:	3317      	adds	r3, #23
 80022b6:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 80022b8:	430b      	orrs	r3, r1
 80022ba:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll + 2]
 80022bc:	4ba1      	ldr	r3, [pc, #644]	; (8002544 <logic+0x1d60>)
 80022be:	681c      	ldr	r4, [r3, #0]
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	1cfb      	adds	r3, r7, #3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	1c98      	adds	r0, r3, #2
 80022cc:	0013      	movs	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	189b      	adds	r3, r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	18e3      	adds	r3, r4, r3
 80022d6:	181b      	adds	r3, r3, r0
 80022d8:	3317      	adds	r3, #23
 80022da:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 80022dc:	430b      	orrs	r3, r1
 80022de:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 2][coll]
 80022e0:	4b98      	ldr	r3, [pc, #608]	; (8002544 <logic+0x1d60>)
 80022e2:	681c      	ldr	r4, [r3, #0]
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	1e9a      	subs	r2, r3, #2
 80022ea:	1cfb      	adds	r3, r7, #3
 80022ec:	7818      	ldrb	r0, [r3, #0]
 80022ee:	0013      	movs	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	18e3      	adds	r3, r4, r3
 80022f8:	181b      	adds	r3, r3, r0
 80022fa:	3317      	adds	r3, #23
 80022fc:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 80022fe:	430b      	orrs	r3, r1
 8002300:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 3][coll - 1]
 8002302:	4b90      	ldr	r3, [pc, #576]	; (8002544 <logic+0x1d60>)
 8002304:	681c      	ldr	r4, [r3, #0]
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	1eda      	subs	r2, r3, #3
 800230c:	1cfb      	adds	r3, r7, #3
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	1e58      	subs	r0, r3, #1
 8002312:	0013      	movs	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	189b      	adds	r3, r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	18e3      	adds	r3, r4, r3
 800231c:	181b      	adds	r3, r3, r0
 800231e:	3317      	adds	r3, #23
 8002320:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 8002322:	430b      	orrs	r3, r1
 8002324:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 3][coll]
 8002326:	4b87      	ldr	r3, [pc, #540]	; (8002544 <logic+0x1d60>)
 8002328:	681c      	ldr	r4, [r3, #0]
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	1eda      	subs	r2, r3, #3
 8002330:	1cfb      	adds	r3, r7, #3
 8002332:	7818      	ldrb	r0, [r3, #0]
 8002334:	0013      	movs	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	189b      	adds	r3, r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	18e3      	adds	r3, r4, r3
 800233e:	181b      	adds	r3, r3, r0
 8002340:	3317      	adds	r3, #23
 8002342:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row - 3][coll + 1]) == 0x00)
 8002344:	430b      	orrs	r3, r1
 8002346:	b2d9      	uxtb	r1, r3
 8002348:	4b7e      	ldr	r3, [pc, #504]	; (8002544 <logic+0x1d60>)
 800234a:	681c      	ldr	r4, [r3, #0]
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	1eda      	subs	r2, r3, #3
 8002352:	1cfb      	adds	r3, r7, #3
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	1c58      	adds	r0, r3, #1
 8002358:	0013      	movs	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	189b      	adds	r3, r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	18e3      	adds	r3, r4, r3
 8002362:	181b      	adds	r3, r3, r0
 8002364:	3317      	adds	r3, #23
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2108      	movs	r1, #8
 800236e:	187a      	adds	r2, r7, r1
 8002370:	1879      	adds	r1, r7, r1
 8002372:	7809      	ldrb	r1, [r1, #0]
 8002374:	7011      	strb	r1, [r2, #0]
		if ((playerPtr->board[row][coll]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <logic+0x1b9a>
 800237a:	f000 fc13 	bl	8002ba4 <logic+0x23c0>
		{
		playerPtr->board[row][coll] = 'C';
 800237e:	4b71      	ldr	r3, [pc, #452]	; (8002544 <logic+0x1d60>)
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	1cfb      	adds	r3, r7, #3
 8002388:	7819      	ldrb	r1, [r3, #0]
 800238a:	0013      	movs	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	189b      	adds	r3, r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	18c3      	adds	r3, r0, r3
 8002394:	185b      	adds	r3, r3, r1
 8002396:	3317      	adds	r3, #23
 8002398:	2243      	movs	r2, #67	; 0x43
 800239a:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
		playerPtr->board[row - 1][coll + 2] =
		playerPtr->board[row - 2][coll] =
		playerPtr->board[row - 3][coll - 1] =
		playerPtr->board[row - 3][coll] =
		playerPtr->board[row - 3][coll + 1] = 'c';
 800239c:	4b69      	ldr	r3, [pc, #420]	; (8002544 <logic+0x1d60>)
 800239e:	681e      	ldr	r6, [r3, #0]
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	1ed9      	subs	r1, r3, #3
 80023a6:	1cfb      	adds	r3, r7, #3
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	1c5d      	adds	r5, r3, #1
 80023ac:	000b      	movs	r3, r1
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	185b      	adds	r3, r3, r1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	18f3      	adds	r3, r6, r3
 80023b6:	195b      	adds	r3, r3, r5
 80023b8:	3317      	adds	r3, #23
 80023ba:	2263      	movs	r2, #99	; 0x63
 80023bc:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 3][coll] =
 80023be:	4b61      	ldr	r3, [pc, #388]	; (8002544 <logic+0x1d60>)
 80023c0:	681c      	ldr	r4, [r3, #0]
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	1eda      	subs	r2, r3, #3
 80023c8:	1cfb      	adds	r3, r7, #3
 80023ca:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row - 3][coll + 1] = 'c';
 80023cc:	000b      	movs	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	185b      	adds	r3, r3, r1
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	18f3      	adds	r3, r6, r3
 80023d6:	195b      	adds	r3, r3, r5
 80023d8:	3317      	adds	r3, #23
 80023da:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 3][coll] =
 80023dc:	0013      	movs	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	189b      	adds	r3, r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	18e3      	adds	r3, r4, r3
 80023e6:	181b      	adds	r3, r3, r0
 80023e8:	3317      	adds	r3, #23
 80023ea:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 3][coll - 1] =
 80023ec:	4b55      	ldr	r3, [pc, #340]	; (8002544 <logic+0x1d60>)
 80023ee:	681e      	ldr	r6, [r3, #0]
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	1ed9      	subs	r1, r3, #3
 80023f6:	1cfb      	adds	r3, r7, #3
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row - 3][coll] =
 80023fc:	0013      	movs	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	189b      	adds	r3, r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	18e3      	adds	r3, r4, r3
 8002406:	181b      	adds	r3, r3, r0
 8002408:	3317      	adds	r3, #23
 800240a:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 3][coll - 1] =
 800240c:	000b      	movs	r3, r1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	185b      	adds	r3, r3, r1
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	18f3      	adds	r3, r6, r3
 8002416:	195b      	adds	r3, r3, r5
 8002418:	3317      	adds	r3, #23
 800241a:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 2][coll] =
 800241c:	4b49      	ldr	r3, [pc, #292]	; (8002544 <logic+0x1d60>)
 800241e:	681c      	ldr	r4, [r3, #0]
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	1e9a      	subs	r2, r3, #2
 8002426:	1cfb      	adds	r3, r7, #3
 8002428:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row - 3][coll - 1] =
 800242a:	000b      	movs	r3, r1
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	185b      	adds	r3, r3, r1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	18f3      	adds	r3, r6, r3
 8002434:	195b      	adds	r3, r3, r5
 8002436:	3317      	adds	r3, #23
 8002438:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 2][coll] =
 800243a:	0013      	movs	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	189b      	adds	r3, r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	18e3      	adds	r3, r4, r3
 8002444:	181b      	adds	r3, r3, r0
 8002446:	3317      	adds	r3, #23
 8002448:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 2] =
 800244a:	4b3e      	ldr	r3, [pc, #248]	; (8002544 <logic+0x1d60>)
 800244c:	681e      	ldr	r6, [r3, #0]
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	1e59      	subs	r1, r3, #1
 8002454:	1cfb      	adds	r3, r7, #3
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	1c9d      	adds	r5, r3, #2
		playerPtr->board[row - 2][coll] =
 800245a:	0013      	movs	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	189b      	adds	r3, r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	18e3      	adds	r3, r4, r3
 8002464:	181b      	adds	r3, r3, r0
 8002466:	3317      	adds	r3, #23
 8002468:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 2] =
 800246a:	000b      	movs	r3, r1
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	185b      	adds	r3, r3, r1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	18f3      	adds	r3, r6, r3
 8002474:	195b      	adds	r3, r3, r5
 8002476:	3317      	adds	r3, #23
 8002478:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 800247a:	4b32      	ldr	r3, [pc, #200]	; (8002544 <logic+0x1d60>)
 800247c:	681c      	ldr	r4, [r3, #0]
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	1e5a      	subs	r2, r3, #1
 8002484:	1cfb      	adds	r3, r7, #3
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	1c58      	adds	r0, r3, #1
		playerPtr->board[row - 1][coll + 2] =
 800248a:	000b      	movs	r3, r1
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	185b      	adds	r3, r3, r1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	18f3      	adds	r3, r6, r3
 8002494:	195b      	adds	r3, r3, r5
 8002496:	3317      	adds	r3, #23
 8002498:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 800249a:	0013      	movs	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	189b      	adds	r3, r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	18e3      	adds	r3, r4, r3
 80024a4:	181b      	adds	r3, r3, r0
 80024a6:	3317      	adds	r3, #23
 80024a8:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll] =
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <logic+0x1d60>)
 80024ac:	681e      	ldr	r6, [r3, #0]
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	1e59      	subs	r1, r3, #1
 80024b4:	1cfb      	adds	r3, r7, #3
 80024b6:	781d      	ldrb	r5, [r3, #0]
		playerPtr->board[row - 1][coll + 1] =
 80024b8:	0013      	movs	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	189b      	adds	r3, r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	18e3      	adds	r3, r4, r3
 80024c2:	181b      	adds	r3, r3, r0
 80024c4:	3317      	adds	r3, #23
 80024c6:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll] =
 80024c8:	000b      	movs	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	185b      	adds	r3, r3, r1
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	18f3      	adds	r3, r6, r3
 80024d2:	195b      	adds	r3, r3, r5
 80024d4:	3317      	adds	r3, #23
 80024d6:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <logic+0x1d60>)
 80024da:	681c      	ldr	r4, [r3, #0]
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	1cfb      	adds	r3, r7, #3
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	1e58      	subs	r0, r3, #1
		playerPtr->board[row - 1][coll] =
 80024e8:	000b      	movs	r3, r1
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	185b      	adds	r3, r3, r1
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	18f3      	adds	r3, r6, r3
 80024f2:	195b      	adds	r3, r3, r5
 80024f4:	3317      	adds	r3, #23
 80024f6:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 80024f8:	0013      	movs	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	189b      	adds	r3, r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	18e3      	adds	r3, r4, r3
 8002502:	181b      	adds	r3, r3, r0
 8002504:	3317      	adds	r3, #23
 8002506:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 2] =
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <logic+0x1d60>)
 800250a:	681e      	ldr	r6, [r3, #0]
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	1e59      	subs	r1, r3, #1
 8002512:	1cfb      	adds	r3, r7, #3
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	1e9d      	subs	r5, r3, #2
		playerPtr->board[row - 1][coll - 1] =
 8002518:	0013      	movs	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	189b      	adds	r3, r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	18e3      	adds	r3, r4, r3
 8002522:	181b      	adds	r3, r3, r0
 8002524:	3317      	adds	r3, #23
 8002526:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 2] =
 8002528:	000b      	movs	r3, r1
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	185b      	adds	r3, r3, r1
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	18f3      	adds	r3, r6, r3
 8002532:	195b      	adds	r3, r3, r5
 8002534:	3317      	adds	r3, #23
 8002536:	701a      	strb	r2, [r3, #0]
		generat3 = 1;
 8002538:	2108      	movs	r1, #8
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e330      	b.n	8002ba4 <logic+0x23c0>
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	2000007c 	.word	0x2000007c
		}
	}

	else if (a3 == 3)//varful in jos
 8002548:	1cbb      	adds	r3, r7, #2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d000      	beq.n	8002552 <logic+0x1d6e>
 8002550:	e188      	b.n	8002864 <logic+0x2080>
	{
		if ((playerPtr->board[row][coll]
 8002552:	4bc3      	ldr	r3, [pc, #780]	; (8002860 <logic+0x207c>)
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	1cfb      	adds	r3, r7, #3
 800255c:	7819      	ldrb	r1, [r3, #0]
 800255e:	0013      	movs	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	189b      	adds	r3, r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	18c3      	adds	r3, r0, r3
 8002568:	185b      	adds	r3, r3, r1
 800256a:	3317      	adds	r3, #23
 800256c:	7819      	ldrb	r1, [r3, #0]
		| playerPtr->board[row - 2][coll - 1]
 800256e:	4bbc      	ldr	r3, [pc, #752]	; (8002860 <logic+0x207c>)
 8002570:	681c      	ldr	r4, [r3, #0]
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	1e9a      	subs	r2, r3, #2
 8002578:	1cfb      	adds	r3, r7, #3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	1e58      	subs	r0, r3, #1
 800257e:	0013      	movs	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	189b      	adds	r3, r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	18e3      	adds	r3, r4, r3
 8002588:	181b      	adds	r3, r3, r0
 800258a:	3317      	adds	r3, #23
 800258c:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 1]
		| playerPtr->board[row + 2][coll - 1]
		| playerPtr->board[row][coll - 2]
		| playerPtr->board[row - 1][coll - 3]
		| playerPtr->board[row][coll - 3]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 800258e:	430b      	orrs	r3, r1
 8002590:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll - 1]
 8002592:	4bb3      	ldr	r3, [pc, #716]	; (8002860 <logic+0x207c>)
 8002594:	681c      	ldr	r4, [r3, #0]
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	1cfb      	adds	r3, r7, #3
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	1e58      	subs	r0, r3, #1
 80025a2:	0013      	movs	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	18e3      	adds	r3, r4, r3
 80025ac:	181b      	adds	r3, r3, r0
 80025ae:	3317      	adds	r3, #23
 80025b0:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 80025b2:	430b      	orrs	r3, r1
 80025b4:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll - 1]
 80025b6:	4baa      	ldr	r3, [pc, #680]	; (8002860 <logic+0x207c>)
 80025b8:	681c      	ldr	r4, [r3, #0]
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	1cfb      	adds	r3, r7, #3
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	1e58      	subs	r0, r3, #1
 80025c6:	0013      	movs	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	189b      	adds	r3, r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	18e3      	adds	r3, r4, r3
 80025d0:	181b      	adds	r3, r3, r0
 80025d2:	3317      	adds	r3, #23
 80025d4:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 80025d6:	430b      	orrs	r3, r1
 80025d8:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 2][coll - 1]
 80025da:	4ba1      	ldr	r3, [pc, #644]	; (8002860 <logic+0x207c>)
 80025dc:	681c      	ldr	r4, [r3, #0]
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	1c9a      	adds	r2, r3, #2
 80025e4:	1cfb      	adds	r3, r7, #3
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	1e58      	subs	r0, r3, #1
 80025ea:	0013      	movs	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	18e3      	adds	r3, r4, r3
 80025f4:	181b      	adds	r3, r3, r0
 80025f6:	3317      	adds	r3, #23
 80025f8:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 80025fa:	430b      	orrs	r3, r1
 80025fc:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll - 2]
 80025fe:	4b98      	ldr	r3, [pc, #608]	; (8002860 <logic+0x207c>)
 8002600:	681c      	ldr	r4, [r3, #0]
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	1cfb      	adds	r3, r7, #3
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	1e98      	subs	r0, r3, #2
 800260c:	0013      	movs	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	189b      	adds	r3, r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	18e3      	adds	r3, r4, r3
 8002616:	181b      	adds	r3, r3, r0
 8002618:	3317      	adds	r3, #23
 800261a:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 800261c:	430b      	orrs	r3, r1
 800261e:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row - 1][coll - 3]
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <logic+0x207c>)
 8002622:	681c      	ldr	r4, [r3, #0]
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	1cfb      	adds	r3, r7, #3
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	1ed8      	subs	r0, r3, #3
 8002630:	0013      	movs	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	189b      	adds	r3, r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	18e3      	adds	r3, r4, r3
 800263a:	181b      	adds	r3, r3, r0
 800263c:	3317      	adds	r3, #23
 800263e:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 8002640:	430b      	orrs	r3, r1
 8002642:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row][coll - 3]
 8002644:	4b86      	ldr	r3, [pc, #536]	; (8002860 <logic+0x207c>)
 8002646:	681c      	ldr	r4, [r3, #0]
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	1cfb      	adds	r3, r7, #3
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	1ed8      	subs	r0, r3, #3
 8002652:	0013      	movs	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	189b      	adds	r3, r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	181b      	adds	r3, r3, r0
 800265e:	3317      	adds	r3, #23
 8002660:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll - 3]) == 0x00)
 8002662:	430b      	orrs	r3, r1
 8002664:	b2d9      	uxtb	r1, r3
 8002666:	4b7e      	ldr	r3, [pc, #504]	; (8002860 <logic+0x207c>)
 8002668:	681c      	ldr	r4, [r3, #0]
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	1cfb      	adds	r3, r7, #3
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	1ed8      	subs	r0, r3, #3
 8002676:	0013      	movs	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	189b      	adds	r3, r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	18e3      	adds	r3, r4, r3
 8002680:	181b      	adds	r3, r3, r0
 8002682:	3317      	adds	r3, #23
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	430b      	orrs	r3, r1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2108      	movs	r1, #8
 800268c:	187a      	adds	r2, r7, r1
 800268e:	1879      	adds	r1, r7, r1
 8002690:	7809      	ldrb	r1, [r1, #0]
 8002692:	7011      	strb	r1, [r2, #0]
		if ((playerPtr->board[row][coll]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d000      	beq.n	800269a <logic+0x1eb6>
 8002698:	e284      	b.n	8002ba4 <logic+0x23c0>
		{
		playerPtr->board[row][coll] = 'C';
 800269a:	4b71      	ldr	r3, [pc, #452]	; (8002860 <logic+0x207c>)
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	1cfb      	adds	r3, r7, #3
 80026a4:	7819      	ldrb	r1, [r3, #0]
 80026a6:	0013      	movs	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	189b      	adds	r3, r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	18c3      	adds	r3, r0, r3
 80026b0:	185b      	adds	r3, r3, r1
 80026b2:	3317      	adds	r3, #23
 80026b4:	2243      	movs	r2, #67	; 0x43
 80026b6:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
		playerPtr->board[row + 2][coll - 1] =
		playerPtr->board[row][coll - 2] =
		playerPtr->board[row - 1][coll - 3] =
		playerPtr->board[row][coll - 3] =
		playerPtr->board[row + 1][coll - 3] = 'c';
 80026b8:	4b69      	ldr	r3, [pc, #420]	; (8002860 <logic+0x207c>)
 80026ba:	681e      	ldr	r6, [r3, #0]
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	1c59      	adds	r1, r3, #1
 80026c2:	1cfb      	adds	r3, r7, #3
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	1edd      	subs	r5, r3, #3
 80026c8:	000b      	movs	r3, r1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	185b      	adds	r3, r3, r1
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	18f3      	adds	r3, r6, r3
 80026d2:	195b      	adds	r3, r3, r5
 80026d4:	3317      	adds	r3, #23
 80026d6:	2263      	movs	r2, #99	; 0x63
 80026d8:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll - 3] =
 80026da:	4b61      	ldr	r3, [pc, #388]	; (8002860 <logic+0x207c>)
 80026dc:	681c      	ldr	r4, [r3, #0]
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	1cfb      	adds	r3, r7, #3
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	1ed8      	subs	r0, r3, #3
		playerPtr->board[row + 1][coll - 3] = 'c';
 80026e8:	000b      	movs	r3, r1
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	185b      	adds	r3, r3, r1
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	18f3      	adds	r3, r6, r3
 80026f2:	195b      	adds	r3, r3, r5
 80026f4:	3317      	adds	r3, #23
 80026f6:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll - 3] =
 80026f8:	0013      	movs	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	18e3      	adds	r3, r4, r3
 8002702:	181b      	adds	r3, r3, r0
 8002704:	3317      	adds	r3, #23
 8002706:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 3] =
 8002708:	4b55      	ldr	r3, [pc, #340]	; (8002860 <logic+0x207c>)
 800270a:	681e      	ldr	r6, [r3, #0]
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	1e59      	subs	r1, r3, #1
 8002712:	1cfb      	adds	r3, r7, #3
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	1edd      	subs	r5, r3, #3
		playerPtr->board[row][coll - 3] =
 8002718:	0013      	movs	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	189b      	adds	r3, r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	18e3      	adds	r3, r4, r3
 8002722:	181b      	adds	r3, r3, r0
 8002724:	3317      	adds	r3, #23
 8002726:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 3] =
 8002728:	000b      	movs	r3, r1
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	185b      	adds	r3, r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	18f3      	adds	r3, r6, r3
 8002732:	195b      	adds	r3, r3, r5
 8002734:	3317      	adds	r3, #23
 8002736:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row][coll - 2] =
 8002738:	4b49      	ldr	r3, [pc, #292]	; (8002860 <logic+0x207c>)
 800273a:	681c      	ldr	r4, [r3, #0]
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	1cfb      	adds	r3, r7, #3
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	1e98      	subs	r0, r3, #2
		playerPtr->board[row - 1][coll - 3] =
 8002746:	000b      	movs	r3, r1
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	185b      	adds	r3, r3, r1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	18f3      	adds	r3, r6, r3
 8002750:	195b      	adds	r3, r3, r5
 8002752:	3317      	adds	r3, #23
 8002754:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row][coll - 2] =
 8002756:	0013      	movs	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	189b      	adds	r3, r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	18e3      	adds	r3, r4, r3
 8002760:	181b      	adds	r3, r3, r0
 8002762:	3317      	adds	r3, #23
 8002764:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 2][coll - 1] =
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <logic+0x207c>)
 8002768:	681e      	ldr	r6, [r3, #0]
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	1c99      	adds	r1, r3, #2
 8002770:	1cfb      	adds	r3, r7, #3
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row][coll - 2] =
 8002776:	0013      	movs	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	189b      	adds	r3, r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	18e3      	adds	r3, r4, r3
 8002780:	181b      	adds	r3, r3, r0
 8002782:	3317      	adds	r3, #23
 8002784:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 2][coll - 1] =
 8002786:	000b      	movs	r3, r1
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	185b      	adds	r3, r3, r1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	18f3      	adds	r3, r6, r3
 8002790:	195b      	adds	r3, r3, r5
 8002792:	3317      	adds	r3, #23
 8002794:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 8002796:	4b32      	ldr	r3, [pc, #200]	; (8002860 <logic+0x207c>)
 8002798:	681c      	ldr	r4, [r3, #0]
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	1cfb      	adds	r3, r7, #3
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	1e58      	subs	r0, r3, #1
		playerPtr->board[row + 2][coll - 1] =
 80027a6:	000b      	movs	r3, r1
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	185b      	adds	r3, r3, r1
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	18f3      	adds	r3, r6, r3
 80027b0:	195b      	adds	r3, r3, r5
 80027b2:	3317      	adds	r3, #23
 80027b4:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 80027b6:	0013      	movs	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	189b      	adds	r3, r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	181b      	adds	r3, r3, r0
 80027c2:	3317      	adds	r3, #23
 80027c4:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row][coll - 1] =
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <logic+0x207c>)
 80027c8:	681e      	ldr	r6, [r3, #0]
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	7819      	ldrb	r1, [r3, #0]
 80027ce:	1cfb      	adds	r3, r7, #3
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row + 1][coll - 1] =
 80027d4:	0013      	movs	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	18e3      	adds	r3, r4, r3
 80027de:	181b      	adds	r3, r3, r0
 80027e0:	3317      	adds	r3, #23
 80027e2:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row][coll - 1] =
 80027e4:	000b      	movs	r3, r1
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	185b      	adds	r3, r3, r1
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	18f3      	adds	r3, r6, r3
 80027ee:	195b      	adds	r3, r3, r5
 80027f0:	3317      	adds	r3, #23
 80027f2:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <logic+0x207c>)
 80027f6:	681c      	ldr	r4, [r3, #0]
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	1e5a      	subs	r2, r3, #1
 80027fe:	1cfb      	adds	r3, r7, #3
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	1e58      	subs	r0, r3, #1
		playerPtr->board[row][coll - 1] =
 8002804:	000b      	movs	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	185b      	adds	r3, r3, r1
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	18f3      	adds	r3, r6, r3
 800280e:	195b      	adds	r3, r3, r5
 8002810:	3317      	adds	r3, #23
 8002812:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row - 1][coll - 1] =
 8002814:	0013      	movs	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	189b      	adds	r3, r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	18e3      	adds	r3, r4, r3
 800281e:	181b      	adds	r3, r3, r0
 8002820:	3317      	adds	r3, #23
 8002822:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row - 2][coll - 1] =
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <logic+0x207c>)
 8002826:	681e      	ldr	r6, [r3, #0]
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	1e99      	subs	r1, r3, #2
 800282e:	1cfb      	adds	r3, r7, #3
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row - 1][coll - 1] =
 8002834:	0013      	movs	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	189b      	adds	r3, r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	18e3      	adds	r3, r4, r3
 800283e:	181b      	adds	r3, r3, r0
 8002840:	3317      	adds	r3, #23
 8002842:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row - 2][coll - 1] =
 8002844:	000b      	movs	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	185b      	adds	r3, r3, r1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	18f3      	adds	r3, r6, r3
 800284e:	195b      	adds	r3, r3, r5
 8002850:	3317      	adds	r3, #23
 8002852:	701a      	strb	r2, [r3, #0]
		generat3 = 1;
 8002854:	2108      	movs	r1, #8
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e1a2      	b.n	8002ba4 <logic+0x23c0>
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	2000007c 	.word	0x2000007c
		}
	}

	else if (a3 == 4)//varful la stanga
 8002864:	1cbb      	adds	r3, r7, #2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d000      	beq.n	800286e <logic+0x208a>
 800286c:	e196      	b.n	8002b9c <logic+0x23b8>
	{
		if ((playerPtr->board[row][coll]
 800286e:	4bd3      	ldr	r3, [pc, #844]	; (8002bbc <logic+0x23d8>)
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	1cfb      	adds	r3, r7, #3
 8002878:	7819      	ldrb	r1, [r3, #0]
 800287a:	0013      	movs	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	189b      	adds	r3, r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	18c3      	adds	r3, r0, r3
 8002884:	185b      	adds	r3, r3, r1
 8002886:	3317      	adds	r3, #23
 8002888:	7819      	ldrb	r1, [r3, #0]
		| playerPtr->board[row + 1][coll - 2]
 800288a:	4bcc      	ldr	r3, [pc, #816]	; (8002bbc <logic+0x23d8>)
 800288c:	681c      	ldr	r4, [r3, #0]
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	1cfb      	adds	r3, r7, #3
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	1e98      	subs	r0, r3, #2
 800289a:	0013      	movs	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	189b      	adds	r3, r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	18e3      	adds	r3, r4, r3
 80028a4:	181b      	adds	r3, r3, r0
 80028a6:	3317      	adds	r3, #23
 80028a8:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 1][coll + 1]
		| playerPtr->board[row + 1][coll + 2]
		| playerPtr->board[row + 2][coll]
		| playerPtr->board[row + 3][coll - 1]
		| playerPtr->board[row + 3][coll]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 80028aa:	430b      	orrs	r3, r1
 80028ac:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll - 1]
 80028ae:	4bc3      	ldr	r3, [pc, #780]	; (8002bbc <logic+0x23d8>)
 80028b0:	681c      	ldr	r4, [r3, #0]
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	1cfb      	adds	r3, r7, #3
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	1e58      	subs	r0, r3, #1
 80028be:	0013      	movs	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	189b      	adds	r3, r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	18e3      	adds	r3, r4, r3
 80028c8:	181b      	adds	r3, r3, r0
 80028ca:	3317      	adds	r3, #23
 80028cc:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 80028ce:	430b      	orrs	r3, r1
 80028d0:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll]
 80028d2:	4bba      	ldr	r3, [pc, #744]	; (8002bbc <logic+0x23d8>)
 80028d4:	681c      	ldr	r4, [r3, #0]
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	1cfb      	adds	r3, r7, #3
 80028de:	7818      	ldrb	r0, [r3, #0]
 80028e0:	0013      	movs	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	189b      	adds	r3, r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	18e3      	adds	r3, r4, r3
 80028ea:	181b      	adds	r3, r3, r0
 80028ec:	3317      	adds	r3, #23
 80028ee:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 80028f0:	430b      	orrs	r3, r1
 80028f2:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll + 1]
 80028f4:	4bb1      	ldr	r3, [pc, #708]	; (8002bbc <logic+0x23d8>)
 80028f6:	681c      	ldr	r4, [r3, #0]
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	1cfb      	adds	r3, r7, #3
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	1c58      	adds	r0, r3, #1
 8002904:	0013      	movs	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	189b      	adds	r3, r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	18e3      	adds	r3, r4, r3
 800290e:	181b      	adds	r3, r3, r0
 8002910:	3317      	adds	r3, #23
 8002912:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8002914:	430b      	orrs	r3, r1
 8002916:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 1][coll + 2]
 8002918:	4ba8      	ldr	r3, [pc, #672]	; (8002bbc <logic+0x23d8>)
 800291a:	681c      	ldr	r4, [r3, #0]
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	1cfb      	adds	r3, r7, #3
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	1c98      	adds	r0, r3, #2
 8002928:	0013      	movs	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	189b      	adds	r3, r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	18e3      	adds	r3, r4, r3
 8002932:	181b      	adds	r3, r3, r0
 8002934:	3317      	adds	r3, #23
 8002936:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 8002938:	430b      	orrs	r3, r1
 800293a:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 2][coll]
 800293c:	4b9f      	ldr	r3, [pc, #636]	; (8002bbc <logic+0x23d8>)
 800293e:	681c      	ldr	r4, [r3, #0]
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	1c9a      	adds	r2, r3, #2
 8002946:	1cfb      	adds	r3, r7, #3
 8002948:	7818      	ldrb	r0, [r3, #0]
 800294a:	0013      	movs	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	189b      	adds	r3, r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	18e3      	adds	r3, r4, r3
 8002954:	181b      	adds	r3, r3, r0
 8002956:	3317      	adds	r3, #23
 8002958:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 800295a:	430b      	orrs	r3, r1
 800295c:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 3][coll - 1]
 800295e:	4b97      	ldr	r3, [pc, #604]	; (8002bbc <logic+0x23d8>)
 8002960:	681c      	ldr	r4, [r3, #0]
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	1cda      	adds	r2, r3, #3
 8002968:	1cfb      	adds	r3, r7, #3
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	1e58      	subs	r0, r3, #1
 800296e:	0013      	movs	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	189b      	adds	r3, r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	18e3      	adds	r3, r4, r3
 8002978:	181b      	adds	r3, r3, r0
 800297a:	3317      	adds	r3, #23
 800297c:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 800297e:	430b      	orrs	r3, r1
 8002980:	b2d9      	uxtb	r1, r3
		| playerPtr->board[row + 3][coll]
 8002982:	4b8e      	ldr	r3, [pc, #568]	; (8002bbc <logic+0x23d8>)
 8002984:	681c      	ldr	r4, [r3, #0]
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	1cda      	adds	r2, r3, #3
 800298c:	1cfb      	adds	r3, r7, #3
 800298e:	7818      	ldrb	r0, [r3, #0]
 8002990:	0013      	movs	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	189b      	adds	r3, r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	18e3      	adds	r3, r4, r3
 800299a:	181b      	adds	r3, r3, r0
 800299c:	3317      	adds	r3, #23
 800299e:	781b      	ldrb	r3, [r3, #0]
		| playerPtr->board[row + 3][coll + 1]) ==0x00)
 80029a0:	430b      	orrs	r3, r1
 80029a2:	b2d9      	uxtb	r1, r3
 80029a4:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <logic+0x23d8>)
 80029a6:	681c      	ldr	r4, [r3, #0]
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	1cda      	adds	r2, r3, #3
 80029ae:	1cfb      	adds	r3, r7, #3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	1c58      	adds	r0, r3, #1
 80029b4:	0013      	movs	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	189b      	adds	r3, r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	18e3      	adds	r3, r4, r3
 80029be:	181b      	adds	r3, r3, r0
 80029c0:	3317      	adds	r3, #23
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2108      	movs	r1, #8
 80029ca:	187a      	adds	r2, r7, r1
 80029cc:	1879      	adds	r1, r7, r1
 80029ce:	7809      	ldrb	r1, [r1, #0]
 80029d0:	7011      	strb	r1, [r2, #0]
		if ((playerPtr->board[row][coll]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d000      	beq.n	80029d8 <logic+0x21f4>
 80029d6:	e0e5      	b.n	8002ba4 <logic+0x23c0>
		{
		playerPtr->board[row][coll] = 'C';
 80029d8:	4b78      	ldr	r3, [pc, #480]	; (8002bbc <logic+0x23d8>)
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	1cfb      	adds	r3, r7, #3
 80029e2:	7819      	ldrb	r1, [r3, #0]
 80029e4:	0013      	movs	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	189b      	adds	r3, r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	18c3      	adds	r3, r0, r3
 80029ee:	185b      	adds	r3, r3, r1
 80029f0:	3317      	adds	r3, #23
 80029f2:	2243      	movs	r2, #67	; 0x43
 80029f4:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
		playerPtr->board[row + 1][coll + 2] =
		playerPtr->board[row + 2][coll] =
		playerPtr->board[row + 3][coll - 1] =
		playerPtr->board[row + 3][coll] =
		playerPtr->board[row + 3][coll + 1] = 'c';
 80029f6:	4b71      	ldr	r3, [pc, #452]	; (8002bbc <logic+0x23d8>)
 80029f8:	681e      	ldr	r6, [r3, #0]
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	1cd9      	adds	r1, r3, #3
 8002a00:	1cfb      	adds	r3, r7, #3
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	1c5d      	adds	r5, r3, #1
 8002a06:	000b      	movs	r3, r1
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	185b      	adds	r3, r3, r1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	18f3      	adds	r3, r6, r3
 8002a10:	195b      	adds	r3, r3, r5
 8002a12:	3317      	adds	r3, #23
 8002a14:	2263      	movs	r2, #99	; 0x63
 8002a16:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 3][coll] =
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <logic+0x23d8>)
 8002a1a:	681c      	ldr	r4, [r3, #0]
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	1cda      	adds	r2, r3, #3
 8002a22:	1cfb      	adds	r3, r7, #3
 8002a24:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row + 3][coll + 1] = 'c';
 8002a26:	000b      	movs	r3, r1
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	185b      	adds	r3, r3, r1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	18f3      	adds	r3, r6, r3
 8002a30:	195b      	adds	r3, r3, r5
 8002a32:	3317      	adds	r3, #23
 8002a34:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 3][coll] =
 8002a36:	0013      	movs	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	189b      	adds	r3, r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	18e3      	adds	r3, r4, r3
 8002a40:	181b      	adds	r3, r3, r0
 8002a42:	3317      	adds	r3, #23
 8002a44:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 3][coll - 1] =
 8002a46:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <logic+0x23d8>)
 8002a48:	681e      	ldr	r6, [r3, #0]
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	1cd9      	adds	r1, r3, #3
 8002a50:	1cfb      	adds	r3, r7, #3
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	1e5d      	subs	r5, r3, #1
		playerPtr->board[row + 3][coll] =
 8002a56:	0013      	movs	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	18e3      	adds	r3, r4, r3
 8002a60:	181b      	adds	r3, r3, r0
 8002a62:	3317      	adds	r3, #23
 8002a64:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 3][coll - 1] =
 8002a66:	000b      	movs	r3, r1
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	185b      	adds	r3, r3, r1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	18f3      	adds	r3, r6, r3
 8002a70:	195b      	adds	r3, r3, r5
 8002a72:	3317      	adds	r3, #23
 8002a74:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 2][coll] =
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <logic+0x23d8>)
 8002a78:	681c      	ldr	r4, [r3, #0]
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	1c9a      	adds	r2, r3, #2
 8002a80:	1cfb      	adds	r3, r7, #3
 8002a82:	7818      	ldrb	r0, [r3, #0]
		playerPtr->board[row + 3][coll - 1] =
 8002a84:	000b      	movs	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	185b      	adds	r3, r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	18f3      	adds	r3, r6, r3
 8002a8e:	195b      	adds	r3, r3, r5
 8002a90:	3317      	adds	r3, #23
 8002a92:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 2][coll] =
 8002a94:	0013      	movs	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	189b      	adds	r3, r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	18e3      	adds	r3, r4, r3
 8002a9e:	181b      	adds	r3, r3, r0
 8002aa0:	3317      	adds	r3, #23
 8002aa2:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 1][coll + 2] =
 8002aa4:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <logic+0x23d8>)
 8002aa6:	681e      	ldr	r6, [r3, #0]
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	1c59      	adds	r1, r3, #1
 8002aae:	1cfb      	adds	r3, r7, #3
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	1c9d      	adds	r5, r3, #2
		playerPtr->board[row + 2][coll] =
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	18e3      	adds	r3, r4, r3
 8002abe:	181b      	adds	r3, r3, r0
 8002ac0:	3317      	adds	r3, #23
 8002ac2:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 2] =
 8002ac4:	000b      	movs	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	185b      	adds	r3, r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	18f3      	adds	r3, r6, r3
 8002ace:	195b      	adds	r3, r3, r5
 8002ad0:	3317      	adds	r3, #23
 8002ad2:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8002ad4:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <logic+0x23d8>)
 8002ad6:	681c      	ldr	r4, [r3, #0]
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	1cfb      	adds	r3, r7, #3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	1c58      	adds	r0, r3, #1
		playerPtr->board[row + 1][coll + 2] =
 8002ae4:	000b      	movs	r3, r1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	185b      	adds	r3, r3, r1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	18f3      	adds	r3, r6, r3
 8002aee:	195b      	adds	r3, r3, r5
 8002af0:	3317      	adds	r3, #23
 8002af2:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8002af4:	0013      	movs	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	189b      	adds	r3, r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	18e3      	adds	r3, r4, r3
 8002afe:	181b      	adds	r3, r3, r0
 8002b00:	3317      	adds	r3, #23
 8002b02:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 1][coll] =
 8002b04:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <logic+0x23d8>)
 8002b06:	681e      	ldr	r6, [r3, #0]
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	1c59      	adds	r1, r3, #1
 8002b0e:	1cfb      	adds	r3, r7, #3
 8002b10:	781d      	ldrb	r5, [r3, #0]
		playerPtr->board[row + 1][coll + 1] =
 8002b12:	0013      	movs	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	18e3      	adds	r3, r4, r3
 8002b1c:	181b      	adds	r3, r3, r0
 8002b1e:	3317      	adds	r3, #23
 8002b20:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 1][coll] =
 8002b22:	000b      	movs	r3, r1
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	185b      	adds	r3, r3, r1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	18f3      	adds	r3, r6, r3
 8002b2c:	195b      	adds	r3, r3, r5
 8002b2e:	3317      	adds	r3, #23
 8002b30:	701a      	strb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <logic+0x23d8>)
 8002b34:	681c      	ldr	r4, [r3, #0]
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	1cfb      	adds	r3, r7, #3
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	1e58      	subs	r0, r3, #1
		playerPtr->board[row + 1][coll] =
 8002b42:	000b      	movs	r3, r1
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	185b      	adds	r3, r3, r1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	18f3      	adds	r3, r6, r3
 8002b4c:	195b      	adds	r3, r3, r5
 8002b4e:	3317      	adds	r3, #23
 8002b50:	7819      	ldrb	r1, [r3, #0]
		playerPtr->board[row + 1][coll - 1] =
 8002b52:	0013      	movs	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	189b      	adds	r3, r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	18e3      	adds	r3, r4, r3
 8002b5c:	181b      	adds	r3, r3, r0
 8002b5e:	3317      	adds	r3, #23
 8002b60:	7019      	strb	r1, [r3, #0]
		playerPtr->board[row + 1][coll - 2] =
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <logic+0x23d8>)
 8002b64:	681e      	ldr	r6, [r3, #0]
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	1c59      	adds	r1, r3, #1
 8002b6c:	1cfb      	adds	r3, r7, #3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	1e9d      	subs	r5, r3, #2
		playerPtr->board[row + 1][coll - 1] =
 8002b72:	0013      	movs	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	18e3      	adds	r3, r4, r3
 8002b7c:	181b      	adds	r3, r3, r0
 8002b7e:	3317      	adds	r3, #23
 8002b80:	781a      	ldrb	r2, [r3, #0]
		playerPtr->board[row + 1][coll - 2] =
 8002b82:	000b      	movs	r3, r1
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	185b      	adds	r3, r3, r1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	18f3      	adds	r3, r6, r3
 8002b8c:	195b      	adds	r3, r3, r5
 8002b8e:	3317      	adds	r3, #23
 8002b90:	701a      	strb	r2, [r3, #0]
		generat3 = 1;
 8002b92:	2108      	movs	r1, #8
 8002b94:	187b      	adds	r3, r7, r1
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e003      	b.n	8002ba4 <logic+0x23c0>
		}

	}
		else //incearca alte randomizari
		generat3 = 0;
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
	while (!generat3)
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <logic+0x23ce>
 8002bae:	f7ff f924 	bl	8001dfa <logic+0x1616>
	}
	return 0;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b005      	add	sp, #20
 8002bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bbc:	2000007c 	.word	0x2000007c

08002bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	4c14      	ldr	r4, [pc, #80]	; (8002c14 <main+0x54>)
 8002bc4:	44a5      	add	sp, r4
 8002bc6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc8:	f000 fb94 	bl	80032f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bcc:	f000 f826 	bl	8002c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd0:	f000 f8ba 	bl	8002d48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002bd4:	f000 f86a 	bl	8002cac <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t inMessage[255];
  size_t inLen = 0x00;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	1d7a      	adds	r2, r7, #5
 8002bdc:	32ff      	adds	r2, #255	; 0xff
 8002bde:	6013      	str	r3, [r2, #0]

  uint8_t outMessage[255];
  size_t outLen = 0x00;
 8002be0:	2300      	movs	r3, #0
 8002be2:	603b      	str	r3, [r7, #0]

  while (1)
  {
	  srv_ReceiveMessage(&huart2, (uint8_t*)&inMessage, &inLen, 500);
 8002be4:	23fa      	movs	r3, #250	; 0xfa
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	1d7a      	adds	r2, r7, #5
 8002bea:	32ff      	adds	r2, #255	; 0xff
 8002bec:	2484      	movs	r4, #132	; 0x84
 8002bee:	0064      	lsls	r4, r4, #1
 8002bf0:	1939      	adds	r1, r7, r4
 8002bf2:	4809      	ldr	r0, [pc, #36]	; (8002c18 <main+0x58>)
 8002bf4:	f000 f8fd 	bl	8002df2 <srv_ReceiveMessage>
	  //HAL_Delay(10000);
	  //srv_TransmitMessage(&huart2, (uint8_t*)&outMessage, &outLen,(uint8_t*)&inMessage, 100);
	  srv_TransmitMessage(&huart2, outMessage, &outLen, inMessage, &inLen, 100);
 8002bf8:	193c      	adds	r4, r7, r4
 8002bfa:	003a      	movs	r2, r7
 8002bfc:	1d39      	adds	r1, r7, #4
 8002bfe:	4806      	ldr	r0, [pc, #24]	; (8002c18 <main+0x58>)
 8002c00:	2364      	movs	r3, #100	; 0x64
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	1d7b      	adds	r3, r7, #5
 8002c06:	33ff      	adds	r3, #255	; 0xff
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	0023      	movs	r3, r4
 8002c0c:	f000 f91e 	bl	8002e4c <srv_TransmitMessage>
	  srv_ReceiveMessage(&huart2, (uint8_t*)&inMessage, &inLen, 500);
 8002c10:	e7e8      	b.n	8002be4 <main+0x24>
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	fffffdec 	.word	0xfffffdec
 8002c18:	20000110 	.word	0x20000110

08002c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b093      	sub	sp, #76	; 0x4c
 8002c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c22:	2410      	movs	r4, #16
 8002c24:	193b      	adds	r3, r7, r4
 8002c26:	0018      	movs	r0, r3
 8002c28:	2338      	movs	r3, #56	; 0x38
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	f002 fcc8 	bl	80055c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c32:	003b      	movs	r3, r7
 8002c34:	0018      	movs	r0, r3
 8002c36:	2310      	movs	r3, #16
 8002c38:	001a      	movs	r2, r3
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	f002 fcc1 	bl	80055c2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 fe27 	bl	8003898 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	0052      	lsls	r2, r2, #1
 8002c56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c5e:	193b      	adds	r3, r7, r4
 8002c60:	2240      	movs	r2, #64	; 0x40
 8002c62:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c64:	193b      	adds	r3, r7, r4
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c6a:	193b      	adds	r3, r7, r4
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 fe5f 	bl	8003930 <HAL_RCC_OscConfig>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002c76:	f000 f8b7 	bl	8002de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c7a:	003b      	movs	r3, r7
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c80:	003b      	movs	r3, r7
 8002c82:	2200      	movs	r2, #0
 8002c84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c86:	003b      	movs	r3, r7
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c8c:	003b      	movs	r3, r7
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c92:	003b      	movs	r3, r7
 8002c94:	2100      	movs	r1, #0
 8002c96:	0018      	movs	r0, r3
 8002c98:	f001 f96a 	bl	8003f70 <HAL_RCC_ClockConfig>
 8002c9c:	1e03      	subs	r3, r0, #0
 8002c9e:	d001      	beq.n	8002ca4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002ca0:	f000 f8a2 	bl	8002de8 <Error_Handler>
  }
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b013      	add	sp, #76	; 0x4c
 8002caa:	bd90      	pop	{r4, r7, pc}

08002cac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cb2:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <MX_USART2_UART_Init+0x98>)
 8002cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cb8:	22e1      	movs	r2, #225	; 0xe1
 8002cba:	0252      	lsls	r2, r2, #9
 8002cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f001 fc9c 	bl	8004634 <HAL_UART_Init>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d00:	f000 f872 	bl	8002de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002d06:	2100      	movs	r1, #0
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f002 fb47 	bl	800539c <HAL_UARTEx_SetTxFifoThreshold>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d001      	beq.n	8002d16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d12:	f000 f869 	bl	8002de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f002 fb7e 	bl	800541c <HAL_UARTEx_SetRxFifoThreshold>
 8002d20:	1e03      	subs	r3, r0, #0
 8002d22:	d001      	beq.n	8002d28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d24:	f000 f860 	bl	8002de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <MX_USART2_UART_Init+0x94>)
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f002 fafc 	bl	8005328 <HAL_UARTEx_DisableFifoMode>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d34:	f000 f858 	bl	8002de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	20000110 	.word	0x20000110
 8002d44:	40004400 	.word	0x40004400

08002d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4e:	240c      	movs	r4, #12
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	0018      	movs	r0, r3
 8002d54:	2314      	movs	r3, #20
 8002d56:	001a      	movs	r2, r3
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f002 fc32 	bl	80055c2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5e:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <MX_GPIO_Init+0x9c>)
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <MX_GPIO_Init+0x9c>)
 8002d64:	2104      	movs	r1, #4
 8002d66:	430a      	orrs	r2, r1
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <MX_GPIO_Init+0x9c>)
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6e:	2204      	movs	r2, #4
 8002d70:	4013      	ands	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <MX_GPIO_Init+0x9c>)
 8002d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <MX_GPIO_Init+0x9c>)
 8002d7c:	2120      	movs	r1, #32
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	635a      	str	r2, [r3, #52]	; 0x34
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <MX_GPIO_Init+0x9c>)
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	2220      	movs	r2, #32
 8002d88:	4013      	ands	r3, r2
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <MX_GPIO_Init+0x9c>)
 8002d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <MX_GPIO_Init+0x9c>)
 8002d94:	2101      	movs	r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <MX_GPIO_Init+0x9c>)
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002da6:	23a0      	movs	r3, #160	; 0xa0
 8002da8:	05db      	lsls	r3, r3, #23
 8002daa:	2200      	movs	r2, #0
 8002dac:	2120      	movs	r1, #32
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 fd54 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002db4:	0021      	movs	r1, r4
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2220      	movs	r2, #32
 8002dba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	2202      	movs	r2, #2
 8002dcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002dce:	187a      	adds	r2, r7, r1
 8002dd0:	23a0      	movs	r3, #160	; 0xa0
 8002dd2:	05db      	lsls	r3, r3, #23
 8002dd4:	0011      	movs	r1, r2
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 fbdc 	bl	8003594 <HAL_GPIO_Init>

}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b009      	add	sp, #36	; 0x24
 8002de2:	bd90      	pop	{r4, r7, pc}
 8002de4:	40021000 	.word	0x40021000

08002de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dec:	b672      	cpsid	i
}
 8002dee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <Error_Handler+0x8>

08002df2 <srv_ReceiveMessage>:
 */

#include "server.h"

StatusFlag srv_ReceiveMessage(UART_HandleTypeDef *uart, uint8_t *inData,
		size_t *inLen, uint32_t timeout) {
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	603b      	str	r3, [r7, #0]
	 * inData - the buffer where we save the message we receive
	 * inLen - the variable where we store the length of the received message
	 * timeout - how much time we wait for each byte received, if this time passes it's going to result in a timeout
	 * Returns a StatusFlag type message OK/FAIL/ERROR/TIMEOUT
	 */
	while (HAL_OK != HAL_UART_Receive(uart, inData, 3, timeout)) {
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	f001 fd15 	bl	8004838 <HAL_UART_Receive>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d1f7      	bne.n	8002e02 <srv_ReceiveMessage+0x10>

	}
	*inLen = 3 + ((inData[2] << 8 | inData[1]) + 1);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	3302      	adds	r3, #2
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	3201      	adds	r2, #1
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	3304      	adds	r3, #4
 8002e24:	001a      	movs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	601a      	str	r2, [r3, #0]
	return (StatusFlag) HAL_UART_Receive(uart, &(inData[3]), *inLen - 3,
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1cd9      	adds	r1, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b03      	subs	r3, #3
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f001 fcfc 	bl	8004838 <HAL_UART_Receive>
 8002e40:	0003      	movs	r3, r0
			timeout);
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <srv_TransmitMessage>:

StatusFlag srv_TransmitMessage(UART_HandleTypeDef *uart, uint8_t *outData,
		size_t *outLen, uint8_t *inData, const size_t *inLen, uint32_t timeout) {
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
	 * inData - the last message we received from the server, we use this in some functions where we want to store the payload we receive
	 * 			we also use this for the first byte which shows us the type of message we need to transmit back to the server
	 * timeout - how much time we wait for each byte to be transmitted, results in timeout if this passes
	 * Returns a StatusFlag type message OK/FAIL/ERROR/TIMEOUT
	 */
	size_t payloadLen = 0x00;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
	MessageType msgTransmitType = (MessageType) inData[0];
 8002e5e:	2113      	movs	r1, #19
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	701a      	strb	r2, [r3, #0]

	switch (msgTransmitType) {
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b07      	cmp	r3, #7
 8002e6e:	d853      	bhi.n	8002f18 <srv_TransmitMessage+0xcc>
 8002e70:	009a      	lsls	r2, r3, #2
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <srv_TransmitMessage+0x134>)
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	469f      	mov	pc, r3

	case RECEIVE_ROUND_START:
		gm_ReceiveStartRound(inData, inLen);
 8002e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	0011      	movs	r1, r2
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7fd fc57 	bl	8000734 <gm_ReceiveStartRound>
		msgTransmitType = SEND_OK; //Send back OK
 8002e86:	2313      	movs	r3, #19
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	22ee      	movs	r2, #238	; 0xee
 8002e8c:	701a      	strb	r2, [r3, #0]
		break;
 8002e8e:	e048      	b.n	8002f22 <srv_TransmitMessage+0xd6>

	case RECEIVE_CONFIRM_HIT:
		gm_ReceiveConfirmHit(inData, inLen);
 8002e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	0011      	movs	r1, r2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7fd fc55 	bl	8000746 <gm_ReceiveConfirmHit>
		msgTransmitType = SEND_OK;
 8002e9c:	2313      	movs	r3, #19
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	22ee      	movs	r2, #238	; 0xee
 8002ea2:	701a      	strb	r2, [r3, #0]
		break;
 8002ea4:	e03d      	b.n	8002f22 <srv_TransmitMessage+0xd6>

	case RECEIVE_TARGETED:
		gm_ReceiveTargeted(inData, inLen);
 8002ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	0011      	movs	r1, r2
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7fd fc53 	bl	8000758 <gm_ReceiveTargeted>
		msgTransmitType = SEND_OK;
 8002eb2:	2313      	movs	r3, #19
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	22ee      	movs	r2, #238	; 0xee
 8002eb8:	701a      	strb	r2, [r3, #0]
		break;
 8002eba:	e032      	b.n	8002f22 <srv_TransmitMessage+0xd6>

	case RECEIVE_MY_ID:
		gm_ReceiveMyID(inData, inLen);
 8002ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7fd fbe2 	bl	800068c <gm_ReceiveMyID>
		msgTransmitType = SEND_OK;
 8002ec8:	2313      	movs	r3, #19
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	22ee      	movs	r2, #238	; 0xee
 8002ece:	701a      	strb	r2, [r3, #0]
		break;
 8002ed0:	e027      	b.n	8002f22 <srv_TransmitMessage+0xd6>

	case RECEIVE_GAME_END:
		gm_ReceiveGameEnd(inData, inLen);
 8002ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	0011      	movs	r1, r2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fd fc46 	bl	800076a <gm_ReceiveGameEnd>
		msgTransmitType = SEND_OK;
 8002ede:	2313      	movs	r3, #19
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	22ee      	movs	r2, #238	; 0xee
 8002ee4:	701a      	strb	r2, [r3, #0]
		break;
 8002ee6:	e01c      	b.n	8002f22 <srv_TransmitMessage+0xd6>

	case SEND_COORD:
		payloadLen = gm_SendCoord(&(outData[3]));
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	3303      	adds	r3, #3
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7fd fc07 	bl	8000700 <gm_SendCoord>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	617b      	str	r3, [r7, #20]
		//msgTransmitType = SEND_COORD; //Commented out because we don't need it, just here to understand
		break;
 8002ef6:	e014      	b.n	8002f22 <srv_TransmitMessage+0xd6>

	case SEND_NAME:
		payloadLen = gm_SendName(&(outData[3]));
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	3303      	adds	r3, #3
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7fd fbd5 	bl	80006ac <gm_SendName>
 8002f02:	0003      	movs	r3, r0
 8002f04:	617b      	str	r3, [r7, #20]
		//msgTransmitType = SEND_NAME;
		break;
 8002f06:	e00c      	b.n	8002f22 <srv_TransmitMessage+0xd6>

	case SEND_BOARD:
		payloadLen = gm_SendBoard(&(outData[3]));
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3303      	adds	r3, #3
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7fd fbe1 	bl	80006d4 <gm_SendBoard>
 8002f12:	0003      	movs	r3, r0
 8002f14:	617b      	str	r3, [r7, #20]
		//msgTransmitType = SEND_BOARD;
		break;
 8002f16:	e004      	b.n	8002f22 <srv_TransmitMessage+0xd6>

	default:
		msgTransmitType = SEND_NOT_OK; //If every case fails it means something went wrong
 8002f18:	2313      	movs	r3, #19
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	22ff      	movs	r2, #255	; 0xff
 8002f1e:	701a      	strb	r2, [r3, #0]
		break;
 8002f20:	46c0      	nop			; (mov r8, r8)
	}

	*outLen = 3 + payloadLen + 1;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	1d1a      	adds	r2, r3, #4
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	601a      	str	r2, [r3, #0]
	outData[0] = msgTransmitType;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2213      	movs	r2, #19
 8002f2e:	18ba      	adds	r2, r7, r2
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	701a      	strb	r2, [r3, #0]
	outData[1] = (uint8_t) payloadLen;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3301      	adds	r3, #1
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]
	outData[2] = (uint8_t) (payloadLen >> 8);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	0a1a      	lsrs	r2, r3, #8
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3302      	adds	r3, #2
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]
	outData[3 + payloadLen] = srv_GetCRC(outData, *outLen - 1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	1e59      	subs	r1, r3, #1
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3303      	adds	r3, #3
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	18d4      	adds	r4, r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 f812 	bl	8002f84 <srv_GetCRC>
 8002f60:	0003      	movs	r3, r0
 8002f62:	7023      	strb	r3, [r4, #0]

	return (StatusFlag) HAL_UART_Transmit(uart, (uint8_t*) outData, *outLen,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	2364      	movs	r3, #100	; 0x64
 8002f70:	f001 fbb6 	bl	80046e0 <HAL_UART_Transmit>
 8002f74:	0003      	movs	r3, r0
			100);
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b007      	add	sp, #28
 8002f7c:	bd90      	pop	{r4, r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	080067c4 	.word	0x080067c4

08002f84 <srv_GetCRC>:

uint8_t srv_GetCRC(uint8_t *data, size_t buffLen) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
	 * The function we use to check for the CRC (last number in the buffer) in the given buffer - 1
	 * data - the buffer we want to get the CRC for
	 * buffLen - the length of the buffer we give as argument
	 * Returns the CRC
	 */
	uint8_t crc = 0x00;
 8002f8e:	230f      	movs	r3, #15
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < buffLen; i++) {
 8002f96:	230e      	movs	r3, #14
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e010      	b.n	8002fc2 <srv_GetCRC+0x3e>
		crc ^= data[i];
 8002fa0:	200e      	movs	r0, #14
 8002fa2:	183b      	adds	r3, r7, r0
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	18d3      	adds	r3, r2, r3
 8002faa:	7819      	ldrb	r1, [r3, #0]
 8002fac:	220f      	movs	r2, #15
 8002fae:	18bb      	adds	r3, r7, r2
 8002fb0:	18ba      	adds	r2, r7, r2
 8002fb2:	7812      	ldrb	r2, [r2, #0]
 8002fb4:	404a      	eors	r2, r1
 8002fb6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < buffLen; i++) {
 8002fb8:	183b      	adds	r3, r7, r0
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	183b      	adds	r3, r7, r0
 8002fbe:	3201      	adds	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	230e      	movs	r3, #14
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d8e8      	bhi.n	8002fa0 <srv_GetCRC+0x1c>
	}

	return crc;
 8002fce:	230f      	movs	r3, #15
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	781b      	ldrb	r3, [r3, #0]
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b004      	add	sp, #16
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HAL_MspInit+0x4c>)
 8002fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_MspInit+0x4c>)
 8002fe8:	2101      	movs	r1, #1
 8002fea:	430a      	orrs	r2, r1
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_MspInit+0x4c>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_MspInit+0x4c>)
 8002ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_MspInit+0x4c>)
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	0549      	lsls	r1, r1, #21
 8003004:	430a      	orrs	r2, r1
 8003006:	63da      	str	r2, [r3, #60]	; 0x3c
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <HAL_MspInit+0x4c>)
 800300a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	055b      	lsls	r3, r3, #21
 8003010:	4013      	ands	r3, r2
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003016:	23c0      	movs	r3, #192	; 0xc0
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	0018      	movs	r0, r3
 800301c:	f000 f9f0 	bl	8003400 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000

0800302c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b097      	sub	sp, #92	; 0x5c
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	2344      	movs	r3, #68	; 0x44
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	0018      	movs	r0, r3
 800303a:	2314      	movs	r3, #20
 800303c:	001a      	movs	r2, r3
 800303e:	2100      	movs	r1, #0
 8003040:	f002 fabf 	bl	80055c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003044:	2410      	movs	r4, #16
 8003046:	193b      	adds	r3, r7, r4
 8003048:	0018      	movs	r0, r3
 800304a:	2334      	movs	r3, #52	; 0x34
 800304c:	001a      	movs	r2, r3
 800304e:	2100      	movs	r1, #0
 8003050:	f002 fab7 	bl	80055c2 <memset>
  if(huart->Instance==USART2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <HAL_UART_MspInit+0xb8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d13e      	bne.n	80030dc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800305e:	193b      	adds	r3, r7, r4
 8003060:	2202      	movs	r2, #2
 8003062:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003064:	193b      	adds	r3, r7, r4
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800306a:	193b      	adds	r3, r7, r4
 800306c:	0018      	movs	r0, r3
 800306e:	f001 f929 	bl	80042c4 <HAL_RCCEx_PeriphCLKConfig>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d001      	beq.n	800307a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003076:	f7ff feb7 	bl	8002de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_UART_MspInit+0xbc>)
 800307c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_UART_MspInit+0xbc>)
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	0289      	lsls	r1, r1, #10
 8003084:	430a      	orrs	r2, r1
 8003086:	63da      	str	r2, [r3, #60]	; 0x3c
 8003088:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <HAL_UART_MspInit+0xbc>)
 800308a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	029b      	lsls	r3, r3, #10
 8003090:	4013      	ands	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_UART_MspInit+0xbc>)
 8003098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_UART_MspInit+0xbc>)
 800309c:	2101      	movs	r1, #1
 800309e:	430a      	orrs	r2, r1
 80030a0:	635a      	str	r2, [r3, #52]	; 0x34
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_UART_MspInit+0xbc>)
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80030ae:	2144      	movs	r1, #68	; 0x44
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	220c      	movs	r2, #12
 80030b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	2202      	movs	r2, #2
 80030ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	2201      	movs	r2, #1
 80030c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2200      	movs	r2, #0
 80030c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	2201      	movs	r2, #1
 80030cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	187a      	adds	r2, r7, r1
 80030d0:	23a0      	movs	r3, #160	; 0xa0
 80030d2:	05db      	lsls	r3, r3, #23
 80030d4:	0011      	movs	r1, r2
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fa5c 	bl	8003594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b017      	add	sp, #92	; 0x5c
 80030e2:	bd90      	pop	{r4, r7, pc}
 80030e4:	40004400 	.word	0x40004400
 80030e8:	40021000 	.word	0x40021000

080030ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <NMI_Handler+0x4>

080030f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f6:	e7fe      	b.n	80030f6 <HardFault_Handler+0x4>

080030f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003110:	f000 f95a 	bl	80033c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	af00      	add	r7, sp, #0
	return 1;
 800311e:	2301      	movs	r3, #1
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <_kill>:

int _kill(int pid, int sig)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003130:	f002 fa14 	bl	800555c <__errno>
 8003134:	0003      	movs	r3, r0
 8003136:	2216      	movs	r2, #22
 8003138:	601a      	str	r2, [r3, #0]
	return -1;
 800313a:	2301      	movs	r3, #1
 800313c:	425b      	negs	r3, r3
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b002      	add	sp, #8
 8003144:	bd80      	pop	{r7, pc}

08003146 <_exit>:

void _exit (int status)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800314e:	2301      	movs	r3, #1
 8003150:	425a      	negs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f7ff ffe5 	bl	8003126 <_kill>
	while (1) {}		/* Make sure we hang here */
 800315c:	e7fe      	b.n	800315c <_exit+0x16>

0800315e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e00a      	b.n	8003186 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003170:	e000      	b.n	8003174 <_read+0x16>
 8003172:	bf00      	nop
 8003174:	0001      	movs	r1, r0
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	60ba      	str	r2, [r7, #8]
 800317c:	b2ca      	uxtb	r2, r1
 800317e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	3301      	adds	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	429a      	cmp	r2, r3
 800318c:	dbf0      	blt.n	8003170 <_read+0x12>
	}

return len;
 800318e:	687b      	ldr	r3, [r7, #4]
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b006      	add	sp, #24
 8003196:	bd80      	pop	{r7, pc}

08003198 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e009      	b.n	80031be <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	60ba      	str	r2, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	0018      	movs	r0, r3
 80031b4:	e000      	b.n	80031b8 <_write+0x20>
 80031b6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3301      	adds	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	dbf1      	blt.n	80031aa <_write+0x12>
	}
	return len;
 80031c6:	687b      	ldr	r3, [r7, #4]
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b006      	add	sp, #24
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <_close>:

int _close(int file)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	return -1;
 80031d8:	2301      	movs	r3, #1
 80031da:	425b      	negs	r3, r3
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	0192      	lsls	r2, r2, #6
 80031f4:	605a      	str	r2, [r3, #4]
	return 0;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_isatty>:

int _isatty(int file)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	return 1;
 8003208:	2301      	movs	r3, #1
}
 800320a:	0018      	movs	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	b002      	add	sp, #8
 8003210:	bd80      	pop	{r7, pc}

08003212 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
	return 0;
 800321e:	2300      	movs	r3, #0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b004      	add	sp, #16
 8003226:	bd80      	pop	{r7, pc}

08003228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <_sbrk+0x5c>)
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <_sbrk+0x60>)
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <_sbrk+0x64>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <_sbrk+0x64>)
 8003246:	4a12      	ldr	r2, [pc, #72]	; (8003290 <_sbrk+0x68>)
 8003248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <_sbrk+0x64>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	18d3      	adds	r3, r2, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	429a      	cmp	r2, r3
 8003256:	d207      	bcs.n	8003268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003258:	f002 f980 	bl	800555c <__errno>
 800325c:	0003      	movs	r3, r0
 800325e:	220c      	movs	r2, #12
 8003260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003262:	2301      	movs	r3, #1
 8003264:	425b      	negs	r3, r3
 8003266:	e009      	b.n	800327c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <_sbrk+0x64>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <_sbrk+0x64>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	18d2      	adds	r2, r2, r3
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <_sbrk+0x64>)
 8003278:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800327a:	68fb      	ldr	r3, [r7, #12]
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b006      	add	sp, #24
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20009000 	.word	0x20009000
 8003288:	00000400 	.word	0x00000400
 800328c:	200001a0 	.word	0x200001a0
 8003290:	200001b8 	.word	0x200001b8

08003294 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032a0:	480d      	ldr	r0, [pc, #52]	; (80032d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032a4:	f7ff fff6 	bl	8003294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032a8:	480c      	ldr	r0, [pc, #48]	; (80032dc <LoopForever+0x6>)
  ldr r1, =_edata
 80032aa:	490d      	ldr	r1, [pc, #52]	; (80032e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032ac:	4a0d      	ldr	r2, [pc, #52]	; (80032e4 <LoopForever+0xe>)
  movs r3, #0
 80032ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b0:	e002      	b.n	80032b8 <LoopCopyDataInit>

080032b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032b6:	3304      	adds	r3, #4

080032b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032bc:	d3f9      	bcc.n	80032b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032c0:	4c0a      	ldr	r4, [pc, #40]	; (80032ec <LoopForever+0x16>)
  movs r3, #0
 80032c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c4:	e001      	b.n	80032ca <LoopFillZerobss>

080032c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032c8:	3204      	adds	r2, #4

080032ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032cc:	d3fb      	bcc.n	80032c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032ce:	f002 f94b 	bl	8005568 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80032d2:	f7ff fc75 	bl	8002bc0 <main>

080032d6 <LoopForever>:

LoopForever:
  b LoopForever
 80032d6:	e7fe      	b.n	80032d6 <LoopForever>
  ldr   r0, =_estack
 80032d8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80032dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032e0:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80032e4:	080069c4 	.word	0x080069c4
  ldr r2, =_sbss
 80032e8:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80032ec:	200001b8 	.word	0x200001b8

080032f0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032f0:	e7fe      	b.n	80032f0 <ADC1_COMP_IRQHandler>
	...

080032f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032fa:	1dfb      	adds	r3, r7, #7
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_Init+0x3c>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_Init+0x3c>)
 8003306:	2180      	movs	r1, #128	; 0x80
 8003308:	0049      	lsls	r1, r1, #1
 800330a:	430a      	orrs	r2, r1
 800330c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800330e:	2000      	movs	r0, #0
 8003310:	f000 f810 	bl	8003334 <HAL_InitTick>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d003      	beq.n	8003320 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e001      	b.n	8003324 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003320:	f7ff fe5c 	bl	8002fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40022000 	.word	0x40022000

08003334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800333c:	230f      	movs	r3, #15
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_InitTick+0x88>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02b      	beq.n	80033a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <HAL_InitTick+0x8c>)
 800334e:	681c      	ldr	r4, [r3, #0]
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <HAL_InitTick+0x88>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	0019      	movs	r1, r3
 8003356:	23fa      	movs	r3, #250	; 0xfa
 8003358:	0098      	lsls	r0, r3, #2
 800335a:	f7fc fedd 	bl	8000118 <__udivsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	0019      	movs	r1, r3
 8003362:	0020      	movs	r0, r4
 8003364:	f7fc fed8 	bl	8000118 <__udivsi3>
 8003368:	0003      	movs	r3, r0
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f905 	bl	800357a <HAL_SYSTICK_Config>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d112      	bne.n	800339a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d80a      	bhi.n	8003390 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	2301      	movs	r3, #1
 800337e:	425b      	negs	r3, r3
 8003380:	2200      	movs	r2, #0
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f8e4 	bl	8003550 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_InitTick+0x90>)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e00d      	b.n	80033ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003390:	230f      	movs	r3, #15
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e008      	b.n	80033ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800339a:	230f      	movs	r3, #15
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e003      	b.n	80033ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033a4:	230f      	movs	r3, #15
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80033ac:	230f      	movs	r3, #15
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	781b      	ldrb	r3, [r3, #0]
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b005      	add	sp, #20
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	20000088 	.word	0x20000088
 80033c0:	20000080 	.word	0x20000080
 80033c4:	20000084 	.word	0x20000084

080033c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_IncTick+0x1c>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	001a      	movs	r2, r3
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_IncTick+0x20>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	18d2      	adds	r2, r2, r3
 80033d8:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <HAL_IncTick+0x20>)
 80033da:	601a      	str	r2, [r3, #0]
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	20000088 	.word	0x20000088
 80033e8:	200001a4 	.word	0x200001a4

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b02      	ldr	r3, [pc, #8]	; (80033fc <HAL_GetTick+0x10>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	200001a4 	.word	0x200001a4

08003400 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a06      	ldr	r2, [pc, #24]	; (8003428 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800340e:	4013      	ands	r3, r2
 8003410:	0019      	movs	r1, r3
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	40010000 	.word	0x40010000
 8003428:	fffff9ff 	.word	0xfffff9ff

0800342c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	0002      	movs	r2, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b7f      	cmp	r3, #127	; 0x7f
 8003440:	d828      	bhi.n	8003494 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003442:	4a2f      	ldr	r2, [pc, #188]	; (8003500 <__NVIC_SetPriority+0xd4>)
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	b25b      	sxtb	r3, r3
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	33c0      	adds	r3, #192	; 0xc0
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	589b      	ldr	r3, [r3, r2]
 8003452:	1dfa      	adds	r2, r7, #7
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	0011      	movs	r1, r2
 8003458:	2203      	movs	r2, #3
 800345a:	400a      	ands	r2, r1
 800345c:	00d2      	lsls	r2, r2, #3
 800345e:	21ff      	movs	r1, #255	; 0xff
 8003460:	4091      	lsls	r1, r2
 8003462:	000a      	movs	r2, r1
 8003464:	43d2      	mvns	r2, r2
 8003466:	401a      	ands	r2, r3
 8003468:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	019b      	lsls	r3, r3, #6
 800346e:	22ff      	movs	r2, #255	; 0xff
 8003470:	401a      	ands	r2, r3
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	0018      	movs	r0, r3
 8003478:	2303      	movs	r3, #3
 800347a:	4003      	ands	r3, r0
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003480:	481f      	ldr	r0, [pc, #124]	; (8003500 <__NVIC_SetPriority+0xd4>)
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b25b      	sxtb	r3, r3
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	430a      	orrs	r2, r1
 800348c:	33c0      	adds	r3, #192	; 0xc0
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003492:	e031      	b.n	80034f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <__NVIC_SetPriority+0xd8>)
 8003496:	1dfb      	adds	r3, r7, #7
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	0019      	movs	r1, r3
 800349c:	230f      	movs	r3, #15
 800349e:	400b      	ands	r3, r1
 80034a0:	3b08      	subs	r3, #8
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	3306      	adds	r3, #6
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	18d3      	adds	r3, r2, r3
 80034aa:	3304      	adds	r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1dfa      	adds	r2, r7, #7
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	0011      	movs	r1, r2
 80034b4:	2203      	movs	r2, #3
 80034b6:	400a      	ands	r2, r1
 80034b8:	00d2      	lsls	r2, r2, #3
 80034ba:	21ff      	movs	r1, #255	; 0xff
 80034bc:	4091      	lsls	r1, r2
 80034be:	000a      	movs	r2, r1
 80034c0:	43d2      	mvns	r2, r2
 80034c2:	401a      	ands	r2, r3
 80034c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	22ff      	movs	r2, #255	; 0xff
 80034cc:	401a      	ands	r2, r3
 80034ce:	1dfb      	adds	r3, r7, #7
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	0018      	movs	r0, r3
 80034d4:	2303      	movs	r3, #3
 80034d6:	4003      	ands	r3, r0
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034dc:	4809      	ldr	r0, [pc, #36]	; (8003504 <__NVIC_SetPriority+0xd8>)
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	001c      	movs	r4, r3
 80034e4:	230f      	movs	r3, #15
 80034e6:	4023      	ands	r3, r4
 80034e8:	3b08      	subs	r3, #8
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	430a      	orrs	r2, r1
 80034ee:	3306      	adds	r3, #6
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	18c3      	adds	r3, r0, r3
 80034f4:	3304      	adds	r3, #4
 80034f6:	601a      	str	r2, [r3, #0]
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b003      	add	sp, #12
 80034fe:	bd90      	pop	{r4, r7, pc}
 8003500:	e000e100 	.word	0xe000e100
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	045b      	lsls	r3, r3, #17
 8003518:	429a      	cmp	r2, r3
 800351a:	d301      	bcc.n	8003520 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351c:	2301      	movs	r3, #1
 800351e:	e010      	b.n	8003542 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <SysTick_Config+0x44>)
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	3a01      	subs	r2, #1
 8003526:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003528:	2301      	movs	r3, #1
 800352a:	425b      	negs	r3, r3
 800352c:	2103      	movs	r1, #3
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff ff7c 	bl	800342c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <SysTick_Config+0x44>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <SysTick_Config+0x44>)
 800353c:	2207      	movs	r2, #7
 800353e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003540:	2300      	movs	r3, #0
}
 8003542:	0018      	movs	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	b002      	add	sp, #8
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	e000e010 	.word	0xe000e010

08003550 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	210f      	movs	r1, #15
 800355c:	187b      	adds	r3, r7, r1
 800355e:	1c02      	adds	r2, r0, #0
 8003560:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	187b      	adds	r3, r7, r1
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b25b      	sxtb	r3, r3
 800356a:	0011      	movs	r1, r2
 800356c:	0018      	movs	r0, r3
 800356e:	f7ff ff5d 	bl	800342c <__NVIC_SetPriority>
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f7ff ffbf 	bl	8003508 <SysTick_Config>
 800358a:	0003      	movs	r3, r0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a2:	e147      	b.n	8003834 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4091      	lsls	r1, r2
 80035ae:	000a      	movs	r2, r1
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d100      	bne.n	80035bc <HAL_GPIO_Init+0x28>
 80035ba:	e138      	b.n	800382e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2203      	movs	r2, #3
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d005      	beq.n	80035d4 <HAL_GPIO_Init+0x40>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2203      	movs	r2, #3
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d130      	bne.n	8003636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	409a      	lsls	r2, r3
 80035e2:	0013      	movs	r3, r2
 80035e4:	43da      	mvns	r2, r3
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	409a      	lsls	r2, r3
 80035f6:	0013      	movs	r3, r2
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360a:	2201      	movs	r2, #1
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	409a      	lsls	r2, r3
 8003610:	0013      	movs	r3, r2
 8003612:	43da      	mvns	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	2201      	movs	r2, #1
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
 8003628:	0013      	movs	r3, r2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2203      	movs	r2, #3
 800363c:	4013      	ands	r3, r2
 800363e:	2b03      	cmp	r3, #3
 8003640:	d017      	beq.n	8003672 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	409a      	lsls	r2, r3
 8003650:	0013      	movs	r3, r2
 8003652:	43da      	mvns	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	409a      	lsls	r2, r3
 8003664:	0013      	movs	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2203      	movs	r2, #3
 8003678:	4013      	ands	r3, r2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d123      	bne.n	80036c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	0092      	lsls	r2, r2, #2
 8003688:	58d3      	ldr	r3, [r2, r3]
 800368a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2207      	movs	r2, #7
 8003690:	4013      	ands	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	409a      	lsls	r2, r3
 8003698:	0013      	movs	r3, r2
 800369a:	43da      	mvns	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2107      	movs	r1, #7
 80036aa:	400b      	ands	r3, r1
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	409a      	lsls	r2, r3
 80036b0:	0013      	movs	r3, r2
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	0092      	lsls	r2, r2, #2
 80036c2:	6939      	ldr	r1, [r7, #16]
 80036c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	409a      	lsls	r2, r3
 80036d4:	0013      	movs	r3, r2
 80036d6:	43da      	mvns	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2203      	movs	r2, #3
 80036e4:	401a      	ands	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	0013      	movs	r3, r2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	23c0      	movs	r3, #192	; 0xc0
 8003700:	029b      	lsls	r3, r3, #10
 8003702:	4013      	ands	r3, r2
 8003704:	d100      	bne.n	8003708 <HAL_GPIO_Init+0x174>
 8003706:	e092      	b.n	800382e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003708:	4a50      	ldr	r2, [pc, #320]	; (800384c <HAL_GPIO_Init+0x2b8>)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	089b      	lsrs	r3, r3, #2
 800370e:	3318      	adds	r3, #24
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	589b      	ldr	r3, [r3, r2]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2203      	movs	r2, #3
 800371a:	4013      	ands	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	220f      	movs	r2, #15
 8003720:	409a      	lsls	r2, r3
 8003722:	0013      	movs	r3, r2
 8003724:	43da      	mvns	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	23a0      	movs	r3, #160	; 0xa0
 8003730:	05db      	lsls	r3, r3, #23
 8003732:	429a      	cmp	r2, r3
 8003734:	d013      	beq.n	800375e <HAL_GPIO_Init+0x1ca>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a45      	ldr	r2, [pc, #276]	; (8003850 <HAL_GPIO_Init+0x2bc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00d      	beq.n	800375a <HAL_GPIO_Init+0x1c6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a44      	ldr	r2, [pc, #272]	; (8003854 <HAL_GPIO_Init+0x2c0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <HAL_GPIO_Init+0x1c2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a43      	ldr	r2, [pc, #268]	; (8003858 <HAL_GPIO_Init+0x2c4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_GPIO_Init+0x1be>
 800374e:	2303      	movs	r3, #3
 8003750:	e006      	b.n	8003760 <HAL_GPIO_Init+0x1cc>
 8003752:	2305      	movs	r3, #5
 8003754:	e004      	b.n	8003760 <HAL_GPIO_Init+0x1cc>
 8003756:	2302      	movs	r3, #2
 8003758:	e002      	b.n	8003760 <HAL_GPIO_Init+0x1cc>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_GPIO_Init+0x1cc>
 800375e:	2300      	movs	r3, #0
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	2103      	movs	r1, #3
 8003764:	400a      	ands	r2, r1
 8003766:	00d2      	lsls	r2, r2, #3
 8003768:	4093      	lsls	r3, r2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003770:	4936      	ldr	r1, [pc, #216]	; (800384c <HAL_GPIO_Init+0x2b8>)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3318      	adds	r3, #24
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800377e:	4a33      	ldr	r2, [pc, #204]	; (800384c <HAL_GPIO_Init+0x2b8>)
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	58d3      	ldr	r3, [r2, r3]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43da      	mvns	r2, r3
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	025b      	lsls	r3, r3, #9
 8003798:	4013      	ands	r3, r2
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037a4:	4929      	ldr	r1, [pc, #164]	; (800384c <HAL_GPIO_Init+0x2b8>)
 80037a6:	2280      	movs	r2, #128	; 0x80
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80037ac:	4a27      	ldr	r2, [pc, #156]	; (800384c <HAL_GPIO_Init+0x2b8>)
 80037ae:	2384      	movs	r3, #132	; 0x84
 80037b0:	58d3      	ldr	r3, [r2, r3]
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43da      	mvns	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	029b      	lsls	r3, r3, #10
 80037c6:	4013      	ands	r3, r2
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037d2:	491e      	ldr	r1, [pc, #120]	; (800384c <HAL_GPIO_Init+0x2b8>)
 80037d4:	2284      	movs	r2, #132	; 0x84
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_GPIO_Init+0x2b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43da      	mvns	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	035b      	lsls	r3, r3, #13
 80037f2:	4013      	ands	r3, r2
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_GPIO_Init+0x2b8>)
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_GPIO_Init+0x2b8>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43da      	mvns	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	039b      	lsls	r3, r3, #14
 800381c:	4013      	ands	r3, r2
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_GPIO_Init+0x2b8>)
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3301      	adds	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	40da      	lsrs	r2, r3
 800383c:	1e13      	subs	r3, r2, #0
 800383e:	d000      	beq.n	8003842 <HAL_GPIO_Init+0x2ae>
 8003840:	e6b0      	b.n	80035a4 <HAL_GPIO_Init+0x10>
  }
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b006      	add	sp, #24
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021800 	.word	0x40021800
 8003850:	50000400 	.word	0x50000400
 8003854:	50000800 	.word	0x50000800
 8003858:	50000c00 	.word	0x50000c00

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	0008      	movs	r0, r1
 8003866:	0011      	movs	r1, r2
 8003868:	1cbb      	adds	r3, r7, #2
 800386a:	1c02      	adds	r2, r0, #0
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	1c7b      	adds	r3, r7, #1
 8003870:	1c0a      	adds	r2, r1, #0
 8003872:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003874:	1c7b      	adds	r3, r7, #1
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800387c:	1cbb      	adds	r3, r7, #2
 800387e:	881a      	ldrh	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003884:	e003      	b.n	800388e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003886:	1cbb      	adds	r3, r7, #2
 8003888:	881a      	ldrh	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a19      	ldr	r2, [pc, #100]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d11f      	bne.n	80038fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	0013      	movs	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	189b      	adds	r3, r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4912      	ldr	r1, [pc, #72]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80038ca:	0018      	movs	r0, r3
 80038cc:	f7fc fc24 	bl	8000118 <__udivsi3>
 80038d0:	0003      	movs	r3, r0
 80038d2:	3301      	adds	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038d6:	e008      	b.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e001      	b.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e009      	b.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ea:	4b07      	ldr	r3, [pc, #28]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	401a      	ands	r2, r3
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d0ed      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	40007000 	.word	0x40007000
 800390c:	fffff9ff 	.word	0xfffff9ff
 8003910:	20000080 	.word	0x20000080
 8003914:	000f4240 	.word	0x000f4240

08003918 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <LL_RCC_GetAPB1Prescaler+0x14>)
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	23e0      	movs	r3, #224	; 0xe0
 8003922:	01db      	lsls	r3, r3, #7
 8003924:	4013      	ands	r3, r2
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e304      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
 800394a:	d100      	bne.n	800394e <HAL_RCC_OscConfig+0x1e>
 800394c:	e07c      	b.n	8003a48 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394e:	4bc3      	ldr	r3, [pc, #780]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2238      	movs	r2, #56	; 0x38
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003958:	4bc0      	ldr	r3, [pc, #768]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2203      	movs	r2, #3
 800395e:	4013      	ands	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b10      	cmp	r3, #16
 8003966:	d102      	bne.n	800396e <HAL_RCC_OscConfig+0x3e>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d002      	beq.n	8003974 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d10b      	bne.n	800398c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4bb9      	ldr	r3, [pc, #740]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	029b      	lsls	r3, r3, #10
 800397c:	4013      	ands	r3, r2
 800397e:	d062      	beq.n	8003a46 <HAL_RCC_OscConfig+0x116>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d15e      	bne.n	8003a46 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e2df      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	025b      	lsls	r3, r3, #9
 8003994:	429a      	cmp	r2, r3
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x78>
 8003998:	4bb0      	ldr	r3, [pc, #704]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4baf      	ldr	r3, [pc, #700]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	0249      	lsls	r1, r1, #9
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e020      	b.n	80039ea <HAL_RCC_OscConfig+0xba>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	23a0      	movs	r3, #160	; 0xa0
 80039ae:	02db      	lsls	r3, r3, #11
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d10e      	bne.n	80039d2 <HAL_RCC_OscConfig+0xa2>
 80039b4:	4ba9      	ldr	r3, [pc, #676]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4ba8      	ldr	r3, [pc, #672]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	02c9      	lsls	r1, r1, #11
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	4ba6      	ldr	r3, [pc, #664]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4ba5      	ldr	r3, [pc, #660]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	0249      	lsls	r1, r1, #9
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e00b      	b.n	80039ea <HAL_RCC_OscConfig+0xba>
 80039d2:	4ba2      	ldr	r3, [pc, #648]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4ba1      	ldr	r3, [pc, #644]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 80039d8:	49a1      	ldr	r1, [pc, #644]	; (8003c60 <HAL_RCC_OscConfig+0x330>)
 80039da:	400a      	ands	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	4b9f      	ldr	r3, [pc, #636]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b9e      	ldr	r3, [pc, #632]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 80039e4:	499f      	ldr	r1, [pc, #636]	; (8003c64 <HAL_RCC_OscConfig+0x334>)
 80039e6:	400a      	ands	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d014      	beq.n	8003a1c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7ff fcfb 	bl	80033ec <HAL_GetTick>
 80039f6:	0003      	movs	r3, r0
 80039f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039fc:	f7ff fcf6 	bl	80033ec <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e29e      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0e:	4b93      	ldr	r3, [pc, #588]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	029b      	lsls	r3, r3, #10
 8003a16:	4013      	ands	r3, r2
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0xcc>
 8003a1a:	e015      	b.n	8003a48 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7ff fce6 	bl	80033ec <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a26:	f7ff fce1 	bl	80033ec <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b64      	cmp	r3, #100	; 0x64
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e289      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a38:	4b88      	ldr	r3, [pc, #544]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	029b      	lsls	r3, r3, #10
 8003a40:	4013      	ands	r3, r2
 8003a42:	d1f0      	bne.n	8003a26 <HAL_RCC_OscConfig+0xf6>
 8003a44:	e000      	b.n	8003a48 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d100      	bne.n	8003a54 <HAL_RCC_OscConfig+0x124>
 8003a52:	e099      	b.n	8003b88 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a54:	4b81      	ldr	r3, [pc, #516]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2238      	movs	r2, #56	; 0x38
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a5e:	4b7f      	ldr	r3, [pc, #508]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2203      	movs	r2, #3
 8003a64:	4013      	ands	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d102      	bne.n	8003a74 <HAL_RCC_OscConfig+0x144>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d002      	beq.n	8003a7a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d135      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a7a:	4b78      	ldr	r3, [pc, #480]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4013      	ands	r3, r2
 8003a84:	d005      	beq.n	8003a92 <HAL_RCC_OscConfig+0x162>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e25c      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a92:	4b72      	ldr	r3, [pc, #456]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4a74      	ldr	r2, [pc, #464]	; (8003c68 <HAL_RCC_OscConfig+0x338>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	021a      	lsls	r2, r3, #8
 8003aa2:	4b6e      	ldr	r3, [pc, #440]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d112      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003aae:	4b6b      	ldr	r3, [pc, #428]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6e      	ldr	r2, [pc, #440]	; (8003c6c <HAL_RCC_OscConfig+0x33c>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	4b67      	ldr	r3, [pc, #412]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003ac2:	4b66      	ldr	r3, [pc, #408]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	0adb      	lsrs	r3, r3, #11
 8003ac8:	2207      	movs	r2, #7
 8003aca:	4013      	ands	r3, r2
 8003acc:	4a68      	ldr	r2, [pc, #416]	; (8003c70 <HAL_RCC_OscConfig+0x340>)
 8003ace:	40da      	lsrs	r2, r3
 8003ad0:	4b68      	ldr	r3, [pc, #416]	; (8003c74 <HAL_RCC_OscConfig+0x344>)
 8003ad2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_OscConfig+0x348>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7ff fc2b 	bl	8003334 <HAL_InitTick>
 8003ade:	1e03      	subs	r3, r0, #0
 8003ae0:	d051      	beq.n	8003b86 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e232      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d030      	beq.n	8003b50 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003aee:	4b5b      	ldr	r3, [pc, #364]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5e      	ldr	r2, [pc, #376]	; (8003c6c <HAL_RCC_OscConfig+0x33c>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	4b57      	ldr	r3, [pc, #348]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003afe:	430a      	orrs	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b02:	4b56      	ldr	r3, [pc, #344]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b55      	ldr	r3, [pc, #340]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	0049      	lsls	r1, r1, #1
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7ff fc6c 	bl	80033ec <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7ff fc67 	bl	80033ec <HAL_GetTick>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e20f      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b2c:	4b4b      	ldr	r3, [pc, #300]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4013      	ands	r3, r2
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b48      	ldr	r3, [pc, #288]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a4a      	ldr	r2, [pc, #296]	; (8003c68 <HAL_RCC_OscConfig+0x338>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	0019      	movs	r1, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	021a      	lsls	r2, r3, #8
 8003b48:	4b44      	ldr	r3, [pc, #272]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e01b      	b.n	8003b88 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b50:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003b56:	4949      	ldr	r1, [pc, #292]	; (8003c7c <HAL_RCC_OscConfig+0x34c>)
 8003b58:	400a      	ands	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7ff fc46 	bl	80033ec <HAL_GetTick>
 8003b60:	0003      	movs	r3, r0
 8003b62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b66:	f7ff fc41 	bl	80033ec <HAL_GetTick>
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e1e9      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4013      	ands	r3, r2
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x236>
 8003b84:	e000      	b.n	8003b88 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d047      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b92:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2238      	movs	r2, #56	; 0x38
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b18      	cmp	r3, #24
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d03c      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d138      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e1cb      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d019      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bc0:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7ff fc10 	bl	80033ec <HAL_GetTick>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd2:	f7ff fc0b 	bl	80033ec <HAL_GetTick>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e1b3      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be8:	2202      	movs	r2, #2
 8003bea:	4013      	ands	r3, r2
 8003bec:	d0f1      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2a2>
 8003bee:	e018      	b.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003bf2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bf4:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7ff fbf6 	bl	80033ec <HAL_GetTick>
 8003c00:	0003      	movs	r3, r0
 8003c02:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c06:	f7ff fbf1 	bl	80033ec <HAL_GetTick>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e199      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d1f1      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2204      	movs	r2, #4
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2fe>
 8003c2c:	e0c6      	b.n	8003dbc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2e:	231f      	movs	r3, #31
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2238      	movs	r2, #56	; 0x38
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d11e      	bne.n	8003c80 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <HAL_RCC_OscConfig+0x32c>)
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	2202      	movs	r2, #2
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d100      	bne.n	8003c4e <HAL_RCC_OscConfig+0x31e>
 8003c4c:	e0b6      	b.n	8003dbc <HAL_RCC_OscConfig+0x48c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d000      	beq.n	8003c58 <HAL_RCC_OscConfig+0x328>
 8003c56:	e0b1      	b.n	8003dbc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e177      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	fffeffff 	.word	0xfffeffff
 8003c64:	fffbffff 	.word	0xfffbffff
 8003c68:	ffff80ff 	.word	0xffff80ff
 8003c6c:	ffffc7ff 	.word	0xffffc7ff
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	20000080 	.word	0x20000080
 8003c78:	20000084 	.word	0x20000084
 8003c7c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c80:	4bb4      	ldr	r3, [pc, #720]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	055b      	lsls	r3, r3, #21
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_OscConfig+0x360>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x362>
 8003c90:	2300      	movs	r3, #0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d011      	beq.n	8003cba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	4baf      	ldr	r3, [pc, #700]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c9a:	4bae      	ldr	r3, [pc, #696]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	0549      	lsls	r1, r1, #21
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ca4:	4bab      	ldr	r3, [pc, #684]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	055b      	lsls	r3, r3, #21
 8003cac:	4013      	ands	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cba:	4ba7      	ldr	r3, [pc, #668]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d11a      	bne.n	8003cfc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc6:	4ba4      	ldr	r3, [pc, #656]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4ba3      	ldr	r3, [pc, #652]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003ccc:	2180      	movs	r1, #128	; 0x80
 8003cce:	0049      	lsls	r1, r1, #1
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003cd4:	f7ff fb8a 	bl	80033ec <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7ff fb85 	bl	80033ec <HAL_GetTick>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e12d      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf0:	4b99      	ldr	r3, [pc, #612]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x3e2>
 8003d04:	4b93      	ldr	r3, [pc, #588]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d08:	4b92      	ldr	r3, [pc, #584]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d10:	e01c      	b.n	8003d4c <HAL_RCC_OscConfig+0x41c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x404>
 8003d1a:	4b8e      	ldr	r3, [pc, #568]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d1e:	4b8d      	ldr	r3, [pc, #564]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d20:	2104      	movs	r1, #4
 8003d22:	430a      	orrs	r2, r1
 8003d24:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d26:	4b8b      	ldr	r3, [pc, #556]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d2a:	4b8a      	ldr	r3, [pc, #552]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0x41c>
 8003d34:	4b87      	ldr	r3, [pc, #540]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d38:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	438a      	bics	r2, r1
 8003d3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d40:	4b84      	ldr	r3, [pc, #528]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d44:	4b83      	ldr	r3, [pc, #524]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d46:	2104      	movs	r1, #4
 8003d48:	438a      	bics	r2, r1
 8003d4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d014      	beq.n	8003d7e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7ff fb4a 	bl	80033ec <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5c:	e009      	b.n	8003d72 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7ff fb45 	bl	80033ec <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	4a7c      	ldr	r2, [pc, #496]	; (8003f5c <HAL_RCC_OscConfig+0x62c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0ec      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d72:	4b78      	ldr	r3, [pc, #480]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2202      	movs	r2, #2
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x42e>
 8003d7c:	e013      	b.n	8003da6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7ff fb35 	bl	80033ec <HAL_GetTick>
 8003d82:	0003      	movs	r3, r0
 8003d84:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d86:	e009      	b.n	8003d9c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7ff fb30 	bl	80033ec <HAL_GetTick>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	4a72      	ldr	r2, [pc, #456]	; (8003f5c <HAL_RCC_OscConfig+0x62c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e0d7      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d9c:	4b6d      	ldr	r3, [pc, #436]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	2202      	movs	r2, #2
 8003da2:	4013      	ands	r3, r2
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003da6:	231f      	movs	r3, #31
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db4:	4b67      	ldr	r3, [pc, #412]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003db6:	496a      	ldr	r1, [pc, #424]	; (8003f60 <HAL_RCC_OscConfig+0x630>)
 8003db8:	400a      	ands	r2, r1
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d100      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x496>
 8003dc4:	e0c1      	b.n	8003f4a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2238      	movs	r2, #56	; 0x38
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b10      	cmp	r3, #16
 8003dd0:	d100      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4a4>
 8003dd2:	e081      	b.n	8003ed8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d156      	bne.n	8003e8a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ddc:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003de2:	4960      	ldr	r1, [pc, #384]	; (8003f64 <HAL_RCC_OscConfig+0x634>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7ff fb00 	bl	80033ec <HAL_GetTick>
 8003dec:	0003      	movs	r3, r0
 8003dee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df2:	f7ff fafb 	bl	80033ec <HAL_GetTick>
 8003df6:	0002      	movs	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0a3      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e04:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	049b      	lsls	r3, r3, #18
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e10:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a54      	ldr	r2, [pc, #336]	; (8003f68 <HAL_RCC_OscConfig+0x638>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	4b45      	ldr	r3, [pc, #276]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e40:	430a      	orrs	r2, r1
 8003e42:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e44:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b42      	ldr	r3, [pc, #264]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e4a:	2180      	movs	r1, #128	; 0x80
 8003e4c:	0449      	lsls	r1, r1, #17
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e52:	4b40      	ldr	r3, [pc, #256]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	0549      	lsls	r1, r1, #21
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7ff fac4 	bl	80033ec <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7ff fabf 	bl	80033ec <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e067      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7c:	4b35      	ldr	r3, [pc, #212]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	049b      	lsls	r3, r3, #18
 8003e84:	4013      	ands	r3, r2
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x53a>
 8003e88:	e05f      	b.n	8003f4a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8a:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e90:	4934      	ldr	r1, [pc, #208]	; (8003f64 <HAL_RCC_OscConfig+0x634>)
 8003e92:	400a      	ands	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003e96:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003e9c:	2103      	movs	r1, #3
 8003e9e:	438a      	bics	r2, r1
 8003ea0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003ea2:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003ea8:	4930      	ldr	r1, [pc, #192]	; (8003f6c <HAL_RCC_OscConfig+0x63c>)
 8003eaa:	400a      	ands	r2, r1
 8003eac:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7ff fa9d 	bl	80033ec <HAL_GetTick>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7ff fa98 	bl	80033ec <HAL_GetTick>
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e040      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	049b      	lsls	r3, r3, #18
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x588>
 8003ed6:	e038      	b.n	8003f4a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e033      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <HAL_RCC_OscConfig+0x624>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2203      	movs	r2, #3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d126      	bne.n	8003f46 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2270      	movs	r2, #112	; 0x70
 8003efc:	401a      	ands	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d11f      	bne.n	8003f46 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	23fe      	movs	r3, #254	; 0xfe
 8003f0a:	01db      	lsls	r3, r3, #7
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d116      	bne.n	8003f46 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	23f8      	movs	r3, #248	; 0xf8
 8003f1c:	039b      	lsls	r3, r3, #14
 8003f1e:	401a      	ands	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d10e      	bne.n	8003f46 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	23e0      	movs	r3, #224	; 0xe0
 8003f2c:	051b      	lsls	r3, r3, #20
 8003f2e:	401a      	ands	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	0f5b      	lsrs	r3, r3, #29
 8003f3c:	075a      	lsls	r2, r3, #29
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d001      	beq.n	8003f4a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b008      	add	sp, #32
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	00001388 	.word	0x00001388
 8003f60:	efffffff 	.word	0xefffffff
 8003f64:	feffffff 	.word	0xfeffffff
 8003f68:	11c1808c 	.word	0x11c1808c
 8003f6c:	eefeffff 	.word	0xeefeffff

08003f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0e9      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f84:	4b76      	ldr	r3, [pc, #472]	; (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2207      	movs	r2, #7
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d91e      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b73      	ldr	r3, [pc, #460]	; (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2207      	movs	r2, #7
 8003f98:	4393      	bics	r3, r2
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	4b70      	ldr	r3, [pc, #448]	; (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fa4:	f7ff fa22 	bl	80033ec <HAL_GetTick>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fac:	e009      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fae:	f7ff fa1d 	bl	80033ec <HAL_GetTick>
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	4a6a      	ldr	r2, [pc, #424]	; (8004164 <HAL_RCC_ClockConfig+0x1f4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e0ca      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fc2:	4b67      	ldr	r3, [pc, #412]	; (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2207      	movs	r2, #7
 8003fc8:	4013      	ands	r3, r2
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d1ee      	bne.n	8003fae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d015      	beq.n	8004006 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d006      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fe4:	4b60      	ldr	r3, [pc, #384]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	4b5f      	ldr	r3, [pc, #380]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8003fea:	21e0      	movs	r1, #224	; 0xe0
 8003fec:	01c9      	lsls	r1, r1, #7
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff2:	4b5d      	ldr	r3, [pc, #372]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	4a5d      	ldr	r2, [pc, #372]	; (800416c <HAL_RCC_ClockConfig+0x1fc>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2201      	movs	r2, #1
 800400c:	4013      	ands	r3, r2
 800400e:	d057      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	029b      	lsls	r3, r3, #10
 8004020:	4013      	ands	r3, r2
 8004022:	d12b      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e097      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d107      	bne.n	8004040 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004030:	4b4d      	ldr	r3, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	049b      	lsls	r3, r3, #18
 8004038:	4013      	ands	r3, r2
 800403a:	d11f      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e08b      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d107      	bne.n	8004058 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004048:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4013      	ands	r3, r2
 8004052:	d113      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e07f      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d106      	bne.n	800406e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	2202      	movs	r2, #2
 8004066:	4013      	ands	r3, r2
 8004068:	d108      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e074      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406e:	4b3e      	ldr	r3, [pc, #248]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	2202      	movs	r2, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e06d      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800407c:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2207      	movs	r2, #7
 8004082:	4393      	bics	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 800408c:	430a      	orrs	r2, r1
 800408e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7ff f9ac 	bl	80033ec <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004098:	e009      	b.n	80040ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409a:	f7ff f9a7 	bl	80033ec <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	4a2f      	ldr	r2, [pc, #188]	; (8004164 <HAL_RCC_ClockConfig+0x1f4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e054      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	4b2e      	ldr	r3, [pc, #184]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2238      	movs	r2, #56	; 0x38
 80040b4:	401a      	ands	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1ec      	bne.n	800409a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2207      	movs	r2, #7
 80040c6:	4013      	ands	r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d21e      	bcs.n	800410c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b24      	ldr	r3, [pc, #144]	; (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2207      	movs	r2, #7
 80040d4:	4393      	bics	r3, r2
 80040d6:	0019      	movs	r1, r3
 80040d8:	4b21      	ldr	r3, [pc, #132]	; (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040e0:	f7ff f984 	bl	80033ec <HAL_GetTick>
 80040e4:	0003      	movs	r3, r0
 80040e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040e8:	e009      	b.n	80040fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ea:	f7ff f97f 	bl	80033ec <HAL_GetTick>
 80040ee:	0002      	movs	r2, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <HAL_RCC_ClockConfig+0x1f4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e02c      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040fe:	4b18      	ldr	r3, [pc, #96]	; (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2207      	movs	r2, #7
 8004104:	4013      	ands	r3, r2
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d1ee      	bne.n	80040ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2204      	movs	r2, #4
 8004112:	4013      	ands	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <HAL_RCC_ClockConfig+0x200>)
 800411c:	4013      	ands	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800412a:	f000 f829 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800412e:	0001      	movs	r1, r0
 8004130:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	220f      	movs	r2, #15
 8004138:	401a      	ands	r2, r3
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x204>)
 800413c:	0092      	lsls	r2, r2, #2
 800413e:	58d3      	ldr	r3, [r2, r3]
 8004140:	221f      	movs	r2, #31
 8004142:	4013      	ands	r3, r2
 8004144:	000a      	movs	r2, r1
 8004146:	40da      	lsrs	r2, r3
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_ClockConfig+0x208>)
 800414a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_ClockConfig+0x20c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0018      	movs	r0, r3
 8004152:	f7ff f8ef 	bl	8003334 <HAL_InitTick>
 8004156:	0003      	movs	r3, r0
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b004      	add	sp, #16
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40022000 	.word	0x40022000
 8004164:	00001388 	.word	0x00001388
 8004168:	40021000 	.word	0x40021000
 800416c:	fffff0ff 	.word	0xfffff0ff
 8004170:	ffff8fff 	.word	0xffff8fff
 8004174:	080067e4 	.word	0x080067e4
 8004178:	20000080 	.word	0x20000080
 800417c:	20000084 	.word	0x20000084

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004186:	4b3c      	ldr	r3, [pc, #240]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2238      	movs	r2, #56	; 0x38
 800418c:	4013      	ands	r3, r2
 800418e:	d10f      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004190:	4b39      	ldr	r3, [pc, #228]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0adb      	lsrs	r3, r3, #11
 8004196:	2207      	movs	r2, #7
 8004198:	4013      	ands	r3, r2
 800419a:	2201      	movs	r2, #1
 800419c:	409a      	lsls	r2, r3
 800419e:	0013      	movs	r3, r2
 80041a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041a2:	6839      	ldr	r1, [r7, #0]
 80041a4:	4835      	ldr	r0, [pc, #212]	; (800427c <HAL_RCC_GetSysClockFreq+0xfc>)
 80041a6:	f7fb ffb7 	bl	8000118 <__udivsi3>
 80041aa:	0003      	movs	r3, r0
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	e05d      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b0:	4b31      	ldr	r3, [pc, #196]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2238      	movs	r2, #56	; 0x38
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d102      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041bc:	4b30      	ldr	r3, [pc, #192]	; (8004280 <HAL_RCC_GetSysClockFreq+0x100>)
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	e054      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c2:	4b2d      	ldr	r3, [pc, #180]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2238      	movs	r2, #56	; 0x38
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d138      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041ce:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2203      	movs	r2, #3
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	2207      	movs	r2, #7
 80041e0:	4013      	ands	r3, r2
 80041e2:	3301      	adds	r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d10d      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4824      	ldr	r0, [pc, #144]	; (8004280 <HAL_RCC_GetSysClockFreq+0x100>)
 80041f0:	f7fb ff92 	bl	8000118 <__udivsi3>
 80041f4:	0003      	movs	r3, r0
 80041f6:	0019      	movs	r1, r3
 80041f8:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	227f      	movs	r2, #127	; 0x7f
 8004200:	4013      	ands	r3, r2
 8004202:	434b      	muls	r3, r1
 8004204:	617b      	str	r3, [r7, #20]
        break;
 8004206:	e00d      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	481c      	ldr	r0, [pc, #112]	; (800427c <HAL_RCC_GetSysClockFreq+0xfc>)
 800420c:	f7fb ff84 	bl	8000118 <__udivsi3>
 8004210:	0003      	movs	r3, r0
 8004212:	0019      	movs	r1, r3
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	227f      	movs	r2, #127	; 0x7f
 800421c:	4013      	ands	r3, r2
 800421e:	434b      	muls	r3, r1
 8004220:	617b      	str	r3, [r7, #20]
        break;
 8004222:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	0f5b      	lsrs	r3, r3, #29
 800422a:	2207      	movs	r2, #7
 800422c:	4013      	ands	r3, r2
 800422e:	3301      	adds	r3, #1
 8004230:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	6978      	ldr	r0, [r7, #20]
 8004236:	f7fb ff6f 	bl	8000118 <__udivsi3>
 800423a:	0003      	movs	r3, r0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	e015      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004240:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2238      	movs	r2, #56	; 0x38
 8004246:	4013      	ands	r3, r2
 8004248:	2b20      	cmp	r3, #32
 800424a:	d103      	bne.n	8004254 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	e00b      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004254:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2238      	movs	r2, #56	; 0x38
 800425a:	4013      	ands	r3, r2
 800425c:	2b18      	cmp	r3, #24
 800425e:	d103      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004260:	23fa      	movs	r3, #250	; 0xfa
 8004262:	01db      	lsls	r3, r3, #7
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	e001      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800426c:	693b      	ldr	r3, [r7, #16]
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b006      	add	sp, #24
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	40021000 	.word	0x40021000
 800427c:	00f42400 	.word	0x00f42400
 8004280:	007a1200 	.word	0x007a1200

08004284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004288:	4b02      	ldr	r3, [pc, #8]	; (8004294 <HAL_RCC_GetHCLKFreq+0x10>)
 800428a:	681b      	ldr	r3, [r3, #0]
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	20000080 	.word	0x20000080

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004298:	b5b0      	push	{r4, r5, r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800429c:	f7ff fff2 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042a0:	0004      	movs	r4, r0
 80042a2:	f7ff fb39 	bl	8003918 <LL_RCC_GetAPB1Prescaler>
 80042a6:	0003      	movs	r3, r0
 80042a8:	0b1a      	lsrs	r2, r3, #12
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ac:	0092      	lsls	r2, r2, #2
 80042ae:	58d3      	ldr	r3, [r2, r3]
 80042b0:	221f      	movs	r2, #31
 80042b2:	4013      	ands	r3, r2
 80042b4:	40dc      	lsrs	r4, r3
 80042b6:	0023      	movs	r3, r4
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bdb0      	pop	{r4, r5, r7, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	08006824 	.word	0x08006824

080042c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80042cc:	2313      	movs	r3, #19
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042d4:	2312      	movs	r3, #18
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	029b      	lsls	r3, r3, #10
 80042e4:	4013      	ands	r3, r2
 80042e6:	d100      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80042e8:	e0a3      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2011      	movs	r0, #17
 80042ec:	183b      	adds	r3, r7, r0
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f2:	4bc3      	ldr	r3, [pc, #780]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	055b      	lsls	r3, r3, #21
 80042fa:	4013      	ands	r3, r2
 80042fc:	d110      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fe:	4bc0      	ldr	r3, [pc, #768]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004302:	4bbf      	ldr	r3, [pc, #764]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004304:	2180      	movs	r1, #128	; 0x80
 8004306:	0549      	lsls	r1, r1, #21
 8004308:	430a      	orrs	r2, r1
 800430a:	63da      	str	r2, [r3, #60]	; 0x3c
 800430c:	4bbc      	ldr	r3, [pc, #752]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800430e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	055b      	lsls	r3, r3, #21
 8004314:	4013      	ands	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431a:	183b      	adds	r3, r7, r0
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004320:	4bb8      	ldr	r3, [pc, #736]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4bb7      	ldr	r3, [pc, #732]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004326:	2180      	movs	r1, #128	; 0x80
 8004328:	0049      	lsls	r1, r1, #1
 800432a:	430a      	orrs	r2, r1
 800432c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800432e:	f7ff f85d 	bl	80033ec <HAL_GetTick>
 8004332:	0003      	movs	r3, r0
 8004334:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004336:	e00b      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7ff f858 	bl	80033ec <HAL_GetTick>
 800433c:	0002      	movs	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d904      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004346:	2313      	movs	r3, #19
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2203      	movs	r2, #3
 800434c:	701a      	strb	r2, [r3, #0]
        break;
 800434e:	e005      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004350:	4bac      	ldr	r3, [pc, #688]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4013      	ands	r3, r2
 800435a:	d0ed      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800435c:	2313      	movs	r3, #19
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d154      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004366:	4ba6      	ldr	r3, [pc, #664]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004368:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800436a:	23c0      	movs	r3, #192	; 0xc0
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4013      	ands	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d019      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	429a      	cmp	r2, r3
 8004380:	d014      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004382:	4b9f      	ldr	r3, [pc, #636]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004386:	4aa0      	ldr	r2, [pc, #640]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004388:	4013      	ands	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800438c:	4b9c      	ldr	r3, [pc, #624]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800438e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004390:	4b9b      	ldr	r3, [pc, #620]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	0249      	lsls	r1, r1, #9
 8004396:	430a      	orrs	r2, r1
 8004398:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800439a:	4b99      	ldr	r3, [pc, #612]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800439c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800439e:	4b98      	ldr	r3, [pc, #608]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043a0:	499a      	ldr	r1, [pc, #616]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80043a2:	400a      	ands	r2, r1
 80043a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043a6:	4b96      	ldr	r3, [pc, #600]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2201      	movs	r2, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d016      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7ff f81a 	bl	80033ec <HAL_GetTick>
 80043b8:	0003      	movs	r3, r0
 80043ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043bc:	e00c      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7ff f815 	bl	80033ec <HAL_GetTick>
 80043c2:	0002      	movs	r2, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	4a91      	ldr	r2, [pc, #580]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d904      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80043ce:	2313      	movs	r3, #19
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2203      	movs	r2, #3
 80043d4:	701a      	strb	r2, [r3, #0]
            break;
 80043d6:	e004      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d8:	4b89      	ldr	r3, [pc, #548]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	2202      	movs	r2, #2
 80043de:	4013      	ands	r3, r2
 80043e0:	d0ed      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80043e2:	2313      	movs	r3, #19
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ec:	4b84      	ldr	r3, [pc, #528]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f0:	4a85      	ldr	r2, [pc, #532]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	0019      	movs	r1, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043fa:	4b81      	ldr	r3, [pc, #516]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043fc:	430a      	orrs	r2, r1
 80043fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004400:	e00c      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004402:	2312      	movs	r3, #18
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2213      	movs	r2, #19
 8004408:	18ba      	adds	r2, r7, r2
 800440a:	7812      	ldrb	r2, [r2, #0]
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e005      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	2312      	movs	r3, #18
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	2213      	movs	r2, #19
 8004416:	18ba      	adds	r2, r7, r2
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800441c:	2311      	movs	r3, #17
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d105      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004426:	4b76      	ldr	r3, [pc, #472]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800442a:	4b75      	ldr	r3, [pc, #468]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800442c:	4979      	ldr	r1, [pc, #484]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800442e:	400a      	ands	r2, r1
 8004430:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2201      	movs	r2, #1
 8004438:	4013      	ands	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800443c:	4b70      	ldr	r3, [pc, #448]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	2203      	movs	r2, #3
 8004442:	4393      	bics	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4b6d      	ldr	r3, [pc, #436]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800444c:	430a      	orrs	r2, r1
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2202      	movs	r2, #2
 8004456:	4013      	ands	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800445a:	4b69      	ldr	r3, [pc, #420]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	220c      	movs	r2, #12
 8004460:	4393      	bics	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	4b65      	ldr	r3, [pc, #404]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800446a:	430a      	orrs	r2, r1
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2210      	movs	r2, #16
 8004474:	4013      	ands	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004478:	4b61      	ldr	r3, [pc, #388]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	4a66      	ldr	r2, [pc, #408]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800447e:	4013      	ands	r3, r2
 8004480:	0019      	movs	r1, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	4b5e      	ldr	r3, [pc, #376]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004488:	430a      	orrs	r2, r1
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4013      	ands	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	4a5f      	ldr	r2, [pc, #380]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800449e:	4013      	ands	r3, r2
 80044a0:	0019      	movs	r1, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	4b56      	ldr	r3, [pc, #344]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044a8:	430a      	orrs	r2, r1
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4013      	ands	r3, r2
 80044b6:	d009      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044b8:	4b51      	ldr	r3, [pc, #324]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	4a58      	ldr	r2, [pc, #352]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044be:	4013      	ands	r3, r2
 80044c0:	0019      	movs	r1, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69da      	ldr	r2, [r3, #28]
 80044c6:	4b4e      	ldr	r3, [pc, #312]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044c8:	430a      	orrs	r2, r1
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2220      	movs	r2, #32
 80044d2:	4013      	ands	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	4a52      	ldr	r2, [pc, #328]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80044dc:	4013      	ands	r3, r2
 80044de:	0019      	movs	r1, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044e6:	430a      	orrs	r2, r1
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	01db      	lsls	r3, r3, #7
 80044f2:	4013      	ands	r3, r2
 80044f4:	d015      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044f6:	4b42      	ldr	r3, [pc, #264]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	0899      	lsrs	r1, r3, #2
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004504:	430a      	orrs	r2, r1
 8004506:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1a      	ldr	r2, [r3, #32]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	05db      	lsls	r3, r3, #23
 8004510:	429a      	cmp	r2, r3
 8004512:	d106      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004514:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	4b39      	ldr	r3, [pc, #228]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800451a:	2180      	movs	r1, #128	; 0x80
 800451c:	0249      	lsls	r1, r1, #9
 800451e:	430a      	orrs	r2, r1
 8004520:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	4013      	ands	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800452e:	4b34      	ldr	r3, [pc, #208]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	2240      	movs	r2, #64	; 0x40
 8004534:	4393      	bics	r3, r2
 8004536:	0019      	movs	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800453c:	4b30      	ldr	r3, [pc, #192]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800453e:	430a      	orrs	r2, r1
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	039b      	lsls	r3, r3, #14
 800454a:	4013      	ands	r3, r2
 800454c:	d016      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	4a35      	ldr	r2, [pc, #212]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004554:	4013      	ands	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800455c:	4b28      	ldr	r3, [pc, #160]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800455e:	430a      	orrs	r2, r1
 8004560:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	03db      	lsls	r3, r3, #15
 800456a:	429a      	cmp	r2, r3
 800456c:	d106      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	0449      	lsls	r1, r1, #17
 8004578:	430a      	orrs	r2, r1
 800457a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	03db      	lsls	r3, r3, #15
 8004584:	4013      	ands	r3, r2
 8004586:	d016      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004588:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	4a27      	ldr	r2, [pc, #156]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800458e:	4013      	ands	r3, r2
 8004590:	0019      	movs	r1, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004598:	430a      	orrs	r2, r1
 800459a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	045b      	lsls	r3, r3, #17
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d106      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045ae:	2180      	movs	r1, #128	; 0x80
 80045b0:	0449      	lsls	r1, r1, #17
 80045b2:	430a      	orrs	r2, r1
 80045b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	4013      	ands	r3, r2
 80045c0:	d016      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	4a1a      	ldr	r2, [pc, #104]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	2380      	movs	r3, #128	; 0x80
 80045dc:	01db      	lsls	r3, r3, #7
 80045de:	429a      	cmp	r2, r3
 80045e0:	d106      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e8:	2180      	movs	r1, #128	; 0x80
 80045ea:	0249      	lsls	r1, r1, #9
 80045ec:	430a      	orrs	r2, r1
 80045ee:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80045f0:	2312      	movs	r3, #18
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	781b      	ldrb	r3, [r3, #0]
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b006      	add	sp, #24
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	40021000 	.word	0x40021000
 8004604:	40007000 	.word	0x40007000
 8004608:	fffffcff 	.word	0xfffffcff
 800460c:	fffeffff 	.word	0xfffeffff
 8004610:	00001388 	.word	0x00001388
 8004614:	efffffff 	.word	0xefffffff
 8004618:	fffff3ff 	.word	0xfffff3ff
 800461c:	fff3ffff 	.word	0xfff3ffff
 8004620:	ffcfffff 	.word	0xffcfffff
 8004624:	ffffcfff 	.word	0xffffcfff
 8004628:	ffbfffff 	.word	0xffbfffff
 800462c:	feffffff 	.word	0xfeffffff
 8004630:	ffff3fff 	.word	0xffff3fff

08004634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e046      	b.n	80046d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2284      	movs	r2, #132	; 0x84
 800464a:	589b      	ldr	r3, [r3, r2]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d107      	bne.n	8004660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2280      	movs	r2, #128	; 0x80
 8004654:	2100      	movs	r1, #0
 8004656:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	0018      	movs	r0, r3
 800465c:	f7fe fce6 	bl	800302c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2284      	movs	r2, #132	; 0x84
 8004664:	2124      	movs	r1, #36	; 0x24
 8004666:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2101      	movs	r1, #1
 8004674:	438a      	bics	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0018      	movs	r0, r3
 800467c:	f000 f9ce 	bl	8004a1c <UART_SetConfig>
 8004680:	0003      	movs	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e024      	b.n	80046d4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0018      	movs	r0, r3
 8004696:	f000 fc81 	bl	8004f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	490d      	ldr	r1, [pc, #52]	; (80046dc <HAL_UART_Init+0xa8>)
 80046a6:	400a      	ands	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	212a      	movs	r1, #42	; 0x2a
 80046b6:	438a      	bics	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2101      	movs	r1, #1
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	0018      	movs	r0, r3
 80046ce:	f000 fd19 	bl	8005104 <UART_CheckIdleState>
 80046d2:	0003      	movs	r3, r0
}
 80046d4:	0018      	movs	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b002      	add	sp, #8
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	ffffb7ff 	.word	0xffffb7ff

080046e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	1dbb      	adds	r3, r7, #6
 80046ee:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2284      	movs	r2, #132	; 0x84
 80046f4:	589b      	ldr	r3, [r3, r2]
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d000      	beq.n	80046fc <HAL_UART_Transmit+0x1c>
 80046fa:	e097      	b.n	800482c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_UART_Transmit+0x2a>
 8004702:	1dbb      	adds	r3, r7, #6
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e08f      	b.n	800482e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	2380      	movs	r3, #128	; 0x80
 8004714:	015b      	lsls	r3, r3, #5
 8004716:	429a      	cmp	r2, r3
 8004718:	d109      	bne.n	800472e <HAL_UART_Transmit+0x4e>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2201      	movs	r2, #1
 8004726:	4013      	ands	r3, r2
 8004728:	d001      	beq.n	800472e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e07f      	b.n	800482e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2280      	movs	r2, #128	; 0x80
 8004732:	5c9b      	ldrb	r3, [r3, r2]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_UART_Transmit+0x5c>
 8004738:	2302      	movs	r3, #2
 800473a:	e078      	b.n	800482e <HAL_UART_Transmit+0x14e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2280      	movs	r2, #128	; 0x80
 8004740:	2101      	movs	r1, #1
 8004742:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	228c      	movs	r2, #140	; 0x8c
 8004748:	2100      	movs	r1, #0
 800474a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2284      	movs	r2, #132	; 0x84
 8004750:	2121      	movs	r1, #33	; 0x21
 8004752:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004754:	f7fe fe4a 	bl	80033ec <HAL_GetTick>
 8004758:	0003      	movs	r3, r0
 800475a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1dba      	adds	r2, r7, #6
 8004760:	2154      	movs	r1, #84	; 0x54
 8004762:	8812      	ldrh	r2, [r2, #0]
 8004764:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1dba      	adds	r2, r7, #6
 800476a:	2156      	movs	r1, #86	; 0x56
 800476c:	8812      	ldrh	r2, [r2, #0]
 800476e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	015b      	lsls	r3, r3, #5
 8004778:	429a      	cmp	r2, r3
 800477a:	d108      	bne.n	800478e <HAL_UART_Transmit+0xae>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	e003      	b.n	8004796 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2280      	movs	r2, #128	; 0x80
 800479a:	2100      	movs	r1, #0
 800479c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800479e:	e02c      	b.n	80047fa <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	0013      	movs	r3, r2
 80047aa:	2200      	movs	r2, #0
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	f000 fcf3 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 80047b2:	1e03      	subs	r3, r0, #0
 80047b4:	d001      	beq.n	80047ba <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e039      	b.n	800482e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	001a      	movs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	05d2      	lsls	r2, r2, #23
 80047cc:	0dd2      	lsrs	r2, r2, #23
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	3302      	adds	r3, #2
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	e007      	b.n	80047e8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	781a      	ldrb	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2256      	movs	r2, #86	; 0x56
 80047ec:	5a9b      	ldrh	r3, [r3, r2]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b299      	uxth	r1, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2256      	movs	r2, #86	; 0x56
 80047f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2256      	movs	r2, #86	; 0x56
 80047fe:	5a9b      	ldrh	r3, [r3, r2]
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1cc      	bne.n	80047a0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	0013      	movs	r3, r2
 8004810:	2200      	movs	r2, #0
 8004812:	2140      	movs	r1, #64	; 0x40
 8004814:	f000 fcc0 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 8004818:	1e03      	subs	r3, r0, #0
 800481a:	d001      	beq.n	8004820 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e006      	b.n	800482e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2284      	movs	r2, #132	; 0x84
 8004824:	2120      	movs	r1, #32
 8004826:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e000      	b.n	800482e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b008      	add	sp, #32
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	1dbb      	adds	r3, r7, #6
 8004846:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2288      	movs	r2, #136	; 0x88
 800484c:	589b      	ldr	r3, [r3, r2]
 800484e:	2b20      	cmp	r3, #32
 8004850:	d000      	beq.n	8004854 <HAL_UART_Receive+0x1c>
 8004852:	e0db      	b.n	8004a0c <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_UART_Receive+0x2a>
 800485a:	1dbb      	adds	r3, r7, #6
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0d3      	b.n	8004a0e <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	015b      	lsls	r3, r3, #5
 800486e:	429a      	cmp	r2, r3
 8004870:	d109      	bne.n	8004886 <HAL_UART_Receive+0x4e>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2201      	movs	r2, #1
 800487e:	4013      	ands	r3, r2
 8004880:	d001      	beq.n	8004886 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0c3      	b.n	8004a0e <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2280      	movs	r2, #128	; 0x80
 800488a:	5c9b      	ldrb	r3, [r3, r2]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_UART_Receive+0x5c>
 8004890:	2302      	movs	r3, #2
 8004892:	e0bc      	b.n	8004a0e <HAL_UART_Receive+0x1d6>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2280      	movs	r2, #128	; 0x80
 8004898:	2101      	movs	r1, #1
 800489a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	228c      	movs	r2, #140	; 0x8c
 80048a0:	2100      	movs	r1, #0
 80048a2:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2288      	movs	r2, #136	; 0x88
 80048a8:	2122      	movs	r1, #34	; 0x22
 80048aa:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048b2:	f7fe fd9b 	bl	80033ec <HAL_GetTick>
 80048b6:	0003      	movs	r3, r0
 80048b8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1dba      	adds	r2, r7, #6
 80048be:	215c      	movs	r1, #92	; 0x5c
 80048c0:	8812      	ldrh	r2, [r2, #0]
 80048c2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1dba      	adds	r2, r7, #6
 80048c8:	215e      	movs	r1, #94	; 0x5e
 80048ca:	8812      	ldrh	r2, [r2, #0]
 80048cc:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	2380      	movs	r3, #128	; 0x80
 80048d4:	015b      	lsls	r3, r3, #5
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d10d      	bne.n	80048f6 <HAL_UART_Receive+0xbe>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <HAL_UART_Receive+0xb4>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2260      	movs	r2, #96	; 0x60
 80048e6:	494c      	ldr	r1, [pc, #304]	; (8004a18 <HAL_UART_Receive+0x1e0>)
 80048e8:	5299      	strh	r1, [r3, r2]
 80048ea:	e02e      	b.n	800494a <HAL_UART_Receive+0x112>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2260      	movs	r2, #96	; 0x60
 80048f0:	21ff      	movs	r1, #255	; 0xff
 80048f2:	5299      	strh	r1, [r3, r2]
 80048f4:	e029      	b.n	800494a <HAL_UART_Receive+0x112>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10d      	bne.n	800491a <HAL_UART_Receive+0xe2>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <HAL_UART_Receive+0xd8>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2260      	movs	r2, #96	; 0x60
 800490a:	21ff      	movs	r1, #255	; 0xff
 800490c:	5299      	strh	r1, [r3, r2]
 800490e:	e01c      	b.n	800494a <HAL_UART_Receive+0x112>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2260      	movs	r2, #96	; 0x60
 8004914:	217f      	movs	r1, #127	; 0x7f
 8004916:	5299      	strh	r1, [r3, r2]
 8004918:	e017      	b.n	800494a <HAL_UART_Receive+0x112>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	055b      	lsls	r3, r3, #21
 8004922:	429a      	cmp	r2, r3
 8004924:	d10d      	bne.n	8004942 <HAL_UART_Receive+0x10a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d104      	bne.n	8004938 <HAL_UART_Receive+0x100>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2260      	movs	r2, #96	; 0x60
 8004932:	217f      	movs	r1, #127	; 0x7f
 8004934:	5299      	strh	r1, [r3, r2]
 8004936:	e008      	b.n	800494a <HAL_UART_Receive+0x112>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2260      	movs	r2, #96	; 0x60
 800493c:	213f      	movs	r1, #63	; 0x3f
 800493e:	5299      	strh	r1, [r3, r2]
 8004940:	e003      	b.n	800494a <HAL_UART_Receive+0x112>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2260      	movs	r2, #96	; 0x60
 8004946:	2100      	movs	r1, #0
 8004948:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800494a:	2312      	movs	r3, #18
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	2160      	movs	r1, #96	; 0x60
 8004952:	5a52      	ldrh	r2, [r2, r1]
 8004954:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	015b      	lsls	r3, r3, #5
 800495e:	429a      	cmp	r2, r3
 8004960:	d108      	bne.n	8004974 <HAL_UART_Receive+0x13c>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e003      	b.n	800497c <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2280      	movs	r2, #128	; 0x80
 8004980:	2100      	movs	r1, #0
 8004982:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004984:	e036      	b.n	80049f4 <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	0013      	movs	r3, r2
 8004990:	2200      	movs	r2, #0
 8004992:	2120      	movs	r1, #32
 8004994:	f000 fc00 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 8004998:	1e03      	subs	r3, r0, #0
 800499a:	d001      	beq.n	80049a0 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e036      	b.n	8004a0e <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10e      	bne.n	80049c4 <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2212      	movs	r2, #18
 80049b0:	18ba      	adds	r2, r7, r2
 80049b2:	8812      	ldrh	r2, [r2, #0]
 80049b4:	4013      	ands	r3, r2
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	3302      	adds	r3, #2
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e00e      	b.n	80049e2 <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2212      	movs	r2, #18
 80049ce:	18ba      	adds	r2, r7, r2
 80049d0:	8812      	ldrh	r2, [r2, #0]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	4013      	ands	r3, r2
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	3301      	adds	r3, #1
 80049e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	225e      	movs	r2, #94	; 0x5e
 80049e6:	5a9b      	ldrh	r3, [r3, r2]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b299      	uxth	r1, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	225e      	movs	r2, #94	; 0x5e
 80049f2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	225e      	movs	r2, #94	; 0x5e
 80049f8:	5a9b      	ldrh	r3, [r3, r2]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1c2      	bne.n	8004986 <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2288      	movs	r2, #136	; 0x88
 8004a04:	2120      	movs	r1, #32
 8004a06:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b008      	add	sp, #32
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	000001ff 	.word	0x000001ff

08004a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	b5b0      	push	{r4, r5, r7, lr}
 8004a1e:	b090      	sub	sp, #64	; 0x40
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a24:	231a      	movs	r3, #26
 8004a26:	2220      	movs	r2, #32
 8004a28:	189b      	adds	r3, r3, r2
 8004a2a:	19db      	adds	r3, r3, r7
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4aaf      	ldr	r2, [pc, #700]	; (8004d0c <UART_SetConfig+0x2f0>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	0019      	movs	r1, r3
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4aaa      	ldr	r2, [pc, #680]	; (8004d10 <UART_SetConfig+0x2f4>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	0018      	movs	r0, r3
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	68d9      	ldr	r1, [r3, #12]
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	0003      	movs	r3, r0
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4aa4      	ldr	r2, [pc, #656]	; (8004d14 <UART_SetConfig+0x2f8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a9f      	ldr	r2, [pc, #636]	; (8004d18 <UART_SetConfig+0x2fc>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	220f      	movs	r2, #15
 8004ab0:	4393      	bics	r3, r2
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	0003      	movs	r3, r0
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a95      	ldr	r2, [pc, #596]	; (8004d1c <UART_SetConfig+0x300>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d131      	bne.n	8004b30 <UART_SetConfig+0x114>
 8004acc:	4b94      	ldr	r3, [pc, #592]	; (8004d20 <UART_SetConfig+0x304>)
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d01d      	beq.n	8004b14 <UART_SetConfig+0xf8>
 8004ad8:	d823      	bhi.n	8004b22 <UART_SetConfig+0x106>
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d00c      	beq.n	8004af8 <UART_SetConfig+0xdc>
 8004ade:	d820      	bhi.n	8004b22 <UART_SetConfig+0x106>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <UART_SetConfig+0xce>
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d00e      	beq.n	8004b06 <UART_SetConfig+0xea>
 8004ae8:	e01b      	b.n	8004b22 <UART_SetConfig+0x106>
 8004aea:	231b      	movs	r3, #27
 8004aec:	2220      	movs	r2, #32
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	19db      	adds	r3, r3, r7
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e0b4      	b.n	8004c62 <UART_SetConfig+0x246>
 8004af8:	231b      	movs	r3, #27
 8004afa:	2220      	movs	r2, #32
 8004afc:	189b      	adds	r3, r3, r2
 8004afe:	19db      	adds	r3, r3, r7
 8004b00:	2202      	movs	r2, #2
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e0ad      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b06:	231b      	movs	r3, #27
 8004b08:	2220      	movs	r2, #32
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	19db      	adds	r3, r3, r7
 8004b0e:	2204      	movs	r2, #4
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e0a6      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b14:	231b      	movs	r3, #27
 8004b16:	2220      	movs	r2, #32
 8004b18:	189b      	adds	r3, r3, r2
 8004b1a:	19db      	adds	r3, r3, r7
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e09f      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b22:	231b      	movs	r3, #27
 8004b24:	2220      	movs	r2, #32
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	19db      	adds	r3, r3, r7
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e098      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a7b      	ldr	r2, [pc, #492]	; (8004d24 <UART_SetConfig+0x308>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d131      	bne.n	8004b9e <UART_SetConfig+0x182>
 8004b3a:	4b79      	ldr	r3, [pc, #484]	; (8004d20 <UART_SetConfig+0x304>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	220c      	movs	r2, #12
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d01d      	beq.n	8004b82 <UART_SetConfig+0x166>
 8004b46:	d823      	bhi.n	8004b90 <UART_SetConfig+0x174>
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d00c      	beq.n	8004b66 <UART_SetConfig+0x14a>
 8004b4c:	d820      	bhi.n	8004b90 <UART_SetConfig+0x174>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <UART_SetConfig+0x13c>
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d00e      	beq.n	8004b74 <UART_SetConfig+0x158>
 8004b56:	e01b      	b.n	8004b90 <UART_SetConfig+0x174>
 8004b58:	231b      	movs	r3, #27
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	189b      	adds	r3, r3, r2
 8004b5e:	19db      	adds	r3, r3, r7
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	e07d      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b66:	231b      	movs	r3, #27
 8004b68:	2220      	movs	r2, #32
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	19db      	adds	r3, r3, r7
 8004b6e:	2202      	movs	r2, #2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	e076      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b74:	231b      	movs	r3, #27
 8004b76:	2220      	movs	r2, #32
 8004b78:	189b      	adds	r3, r3, r2
 8004b7a:	19db      	adds	r3, r3, r7
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e06f      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b82:	231b      	movs	r3, #27
 8004b84:	2220      	movs	r2, #32
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	19db      	adds	r3, r3, r7
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	e068      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b90:	231b      	movs	r3, #27
 8004b92:	2220      	movs	r2, #32
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	19db      	adds	r3, r3, r7
 8004b98:	2210      	movs	r2, #16
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	e061      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a61      	ldr	r2, [pc, #388]	; (8004d28 <UART_SetConfig+0x30c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d106      	bne.n	8004bb6 <UART_SetConfig+0x19a>
 8004ba8:	231b      	movs	r3, #27
 8004baa:	2220      	movs	r2, #32
 8004bac:	189b      	adds	r3, r3, r2
 8004bae:	19db      	adds	r3, r3, r7
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e055      	b.n	8004c62 <UART_SetConfig+0x246>
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5c      	ldr	r2, [pc, #368]	; (8004d2c <UART_SetConfig+0x310>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d106      	bne.n	8004bce <UART_SetConfig+0x1b2>
 8004bc0:	231b      	movs	r3, #27
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	189b      	adds	r3, r3, r2
 8004bc6:	19db      	adds	r3, r3, r7
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	e049      	b.n	8004c62 <UART_SetConfig+0x246>
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a50      	ldr	r2, [pc, #320]	; (8004d14 <UART_SetConfig+0x2f8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d13e      	bne.n	8004c56 <UART_SetConfig+0x23a>
 8004bd8:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <UART_SetConfig+0x304>)
 8004bda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bdc:	23c0      	movs	r3, #192	; 0xc0
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	4013      	ands	r3, r2
 8004be2:	22c0      	movs	r2, #192	; 0xc0
 8004be4:	0112      	lsls	r2, r2, #4
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d027      	beq.n	8004c3a <UART_SetConfig+0x21e>
 8004bea:	22c0      	movs	r2, #192	; 0xc0
 8004bec:	0112      	lsls	r2, r2, #4
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d82a      	bhi.n	8004c48 <UART_SetConfig+0x22c>
 8004bf2:	2280      	movs	r2, #128	; 0x80
 8004bf4:	0112      	lsls	r2, r2, #4
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d011      	beq.n	8004c1e <UART_SetConfig+0x202>
 8004bfa:	2280      	movs	r2, #128	; 0x80
 8004bfc:	0112      	lsls	r2, r2, #4
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d822      	bhi.n	8004c48 <UART_SetConfig+0x22c>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <UART_SetConfig+0x1f4>
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	00d2      	lsls	r2, r2, #3
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <UART_SetConfig+0x210>
 8004c0e:	e01b      	b.n	8004c48 <UART_SetConfig+0x22c>
 8004c10:	231b      	movs	r3, #27
 8004c12:	2220      	movs	r2, #32
 8004c14:	189b      	adds	r3, r3, r2
 8004c16:	19db      	adds	r3, r3, r7
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e021      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c1e:	231b      	movs	r3, #27
 8004c20:	2220      	movs	r2, #32
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	19db      	adds	r3, r3, r7
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e01a      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c2c:	231b      	movs	r3, #27
 8004c2e:	2220      	movs	r2, #32
 8004c30:	189b      	adds	r3, r3, r2
 8004c32:	19db      	adds	r3, r3, r7
 8004c34:	2204      	movs	r2, #4
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	e013      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c3a:	231b      	movs	r3, #27
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	189b      	adds	r3, r3, r2
 8004c40:	19db      	adds	r3, r3, r7
 8004c42:	2208      	movs	r2, #8
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e00c      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c48:	231b      	movs	r3, #27
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	189b      	adds	r3, r3, r2
 8004c4e:	19db      	adds	r3, r3, r7
 8004c50:	2210      	movs	r2, #16
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e005      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c56:	231b      	movs	r3, #27
 8004c58:	2220      	movs	r2, #32
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	19db      	adds	r3, r3, r7
 8004c5e:	2210      	movs	r2, #16
 8004c60:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2b      	ldr	r2, [pc, #172]	; (8004d14 <UART_SetConfig+0x2f8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d000      	beq.n	8004c6e <UART_SetConfig+0x252>
 8004c6c:	e0a9      	b.n	8004dc2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c6e:	231b      	movs	r3, #27
 8004c70:	2220      	movs	r2, #32
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	19db      	adds	r3, r3, r7
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d015      	beq.n	8004ca8 <UART_SetConfig+0x28c>
 8004c7c:	dc18      	bgt.n	8004cb0 <UART_SetConfig+0x294>
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d00d      	beq.n	8004c9e <UART_SetConfig+0x282>
 8004c82:	dc15      	bgt.n	8004cb0 <UART_SetConfig+0x294>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <UART_SetConfig+0x272>
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d005      	beq.n	8004c98 <UART_SetConfig+0x27c>
 8004c8c:	e010      	b.n	8004cb0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8e:	f7ff fb03 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8004c92:	0003      	movs	r3, r0
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c96:	e014      	b.n	8004cc2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c98:	4b25      	ldr	r3, [pc, #148]	; (8004d30 <UART_SetConfig+0x314>)
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c9c:	e011      	b.n	8004cc2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9e:	f7ff fa6f 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8004ca2:	0003      	movs	r3, r0
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ca6:	e00c      	b.n	8004cc2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cae:	e008      	b.n	8004cc2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004cb4:	231a      	movs	r3, #26
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	189b      	adds	r3, r3, r2
 8004cba:	19db      	adds	r3, r3, r7
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
        break;
 8004cc0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d100      	bne.n	8004cca <UART_SetConfig+0x2ae>
 8004cc8:	e14c      	b.n	8004f64 <UART_SetConfig+0x548>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <UART_SetConfig+0x318>)
 8004cd0:	0052      	lsls	r2, r2, #1
 8004cd2:	5ad3      	ldrh	r3, [r2, r3]
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004cd8:	f7fb fa1e 	bl	8000118 <__udivsi3>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	0013      	movs	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d305      	bcc.n	8004cfc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d91d      	bls.n	8004d38 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004cfc:	231a      	movs	r3, #26
 8004cfe:	2220      	movs	r2, #32
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	19db      	adds	r3, r3, r7
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e12c      	b.n	8004f64 <UART_SetConfig+0x548>
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	cfff69f3 	.word	0xcfff69f3
 8004d10:	ffffcfff 	.word	0xffffcfff
 8004d14:	40008000 	.word	0x40008000
 8004d18:	11fff4ff 	.word	0x11fff4ff
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40004400 	.word	0x40004400
 8004d28:	40004800 	.word	0x40004800
 8004d2c:	40004c00 	.word	0x40004c00
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	08006844 	.word	0x08006844
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d44:	4b93      	ldr	r3, [pc, #588]	; (8004f94 <UART_SetConfig+0x578>)
 8004d46:	0052      	lsls	r2, r2, #1
 8004d48:	5ad3      	ldrh	r3, [r2, r3]
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	69b8      	ldr	r0, [r7, #24]
 8004d56:	69f9      	ldr	r1, [r7, #28]
 8004d58:	f7fb fb54 	bl	8000404 <__aeabi_uldivmod>
 8004d5c:	0002      	movs	r2, r0
 8004d5e:	000b      	movs	r3, r1
 8004d60:	0e11      	lsrs	r1, r2, #24
 8004d62:	021d      	lsls	r5, r3, #8
 8004d64:	430d      	orrs	r5, r1
 8004d66:	0214      	lsls	r4, r2, #8
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	68b8      	ldr	r0, [r7, #8]
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	1900      	adds	r0, r0, r4
 8004d7a:	4169      	adcs	r1, r5
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f7fb fb3b 	bl	8000404 <__aeabi_uldivmod>
 8004d8e:	0002      	movs	r2, r0
 8004d90:	000b      	movs	r3, r1
 8004d92:	0013      	movs	r3, r2
 8004d94:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d98:	23c0      	movs	r3, #192	; 0xc0
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d309      	bcc.n	8004db4 <UART_SetConfig+0x398>
 8004da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	035b      	lsls	r3, r3, #13
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d204      	bcs.n	8004db4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db0:	60da      	str	r2, [r3, #12]
 8004db2:	e0d7      	b.n	8004f64 <UART_SetConfig+0x548>
        }
        else
        {
          ret = HAL_ERROR;
 8004db4:	231a      	movs	r3, #26
 8004db6:	2220      	movs	r2, #32
 8004db8:	189b      	adds	r3, r3, r2
 8004dba:	19db      	adds	r3, r3, r7
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e0d0      	b.n	8004f64 <UART_SetConfig+0x548>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	2380      	movs	r3, #128	; 0x80
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d000      	beq.n	8004dd0 <UART_SetConfig+0x3b4>
 8004dce:	e071      	b.n	8004eb4 <UART_SetConfig+0x498>
  {
    switch (clocksource)
 8004dd0:	231b      	movs	r3, #27
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	189b      	adds	r3, r3, r2
 8004dd6:	19db      	adds	r3, r3, r7
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d015      	beq.n	8004e0a <UART_SetConfig+0x3ee>
 8004dde:	dc18      	bgt.n	8004e12 <UART_SetConfig+0x3f6>
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d00d      	beq.n	8004e00 <UART_SetConfig+0x3e4>
 8004de4:	dc15      	bgt.n	8004e12 <UART_SetConfig+0x3f6>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <UART_SetConfig+0x3d4>
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d005      	beq.n	8004dfa <UART_SetConfig+0x3de>
 8004dee:	e010      	b.n	8004e12 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df0:	f7ff fa52 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8004df4:	0003      	movs	r3, r0
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004df8:	e014      	b.n	8004e24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dfa:	4b67      	ldr	r3, [pc, #412]	; (8004f98 <UART_SetConfig+0x57c>)
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dfe:	e011      	b.n	8004e24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e00:	f7ff f9be 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8004e04:	0003      	movs	r3, r0
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e08:	e00c      	b.n	8004e24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e10:	e008      	b.n	8004e24 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004e16:	231a      	movs	r3, #26
 8004e18:	2220      	movs	r2, #32
 8004e1a:	189b      	adds	r3, r3, r2
 8004e1c:	19db      	adds	r3, r3, r7
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
        break;
 8004e22:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d100      	bne.n	8004e2c <UART_SetConfig+0x410>
 8004e2a:	e09b      	b.n	8004f64 <UART_SetConfig+0x548>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e30:	4b58      	ldr	r3, [pc, #352]	; (8004f94 <UART_SetConfig+0x578>)
 8004e32:	0052      	lsls	r2, r2, #1
 8004e34:	5ad3      	ldrh	r3, [r2, r3]
 8004e36:	0019      	movs	r1, r3
 8004e38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e3a:	f7fb f96d 	bl	8000118 <__udivsi3>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	005a      	lsls	r2, r3, #1
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	18d2      	adds	r2, r2, r3
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	0019      	movs	r1, r3
 8004e50:	0010      	movs	r0, r2
 8004e52:	f7fb f961 	bl	8000118 <__udivsi3>
 8004e56:	0003      	movs	r3, r0
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	d921      	bls.n	8004ea6 <UART_SetConfig+0x48a>
 8004e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	025b      	lsls	r3, r3, #9
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d21c      	bcs.n	8004ea6 <UART_SetConfig+0x48a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	200e      	movs	r0, #14
 8004e72:	2420      	movs	r4, #32
 8004e74:	1903      	adds	r3, r0, r4
 8004e76:	19db      	adds	r3, r3, r7
 8004e78:	210f      	movs	r1, #15
 8004e7a:	438a      	bics	r2, r1
 8004e7c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2207      	movs	r2, #7
 8004e86:	4013      	ands	r3, r2
 8004e88:	b299      	uxth	r1, r3
 8004e8a:	1903      	adds	r3, r0, r4
 8004e8c:	19db      	adds	r3, r3, r7
 8004e8e:	1902      	adds	r2, r0, r4
 8004e90:	19d2      	adds	r2, r2, r7
 8004e92:	8812      	ldrh	r2, [r2, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	1902      	adds	r2, r0, r4
 8004e9e:	19d2      	adds	r2, r2, r7
 8004ea0:	8812      	ldrh	r2, [r2, #0]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	e05e      	b.n	8004f64 <UART_SetConfig+0x548>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea6:	231a      	movs	r3, #26
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	189b      	adds	r3, r3, r2
 8004eac:	19db      	adds	r3, r3, r7
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e057      	b.n	8004f64 <UART_SetConfig+0x548>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb4:	231b      	movs	r3, #27
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	189b      	adds	r3, r3, r2
 8004eba:	19db      	adds	r3, r3, r7
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d015      	beq.n	8004eee <UART_SetConfig+0x4d2>
 8004ec2:	dc18      	bgt.n	8004ef6 <UART_SetConfig+0x4da>
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d00d      	beq.n	8004ee4 <UART_SetConfig+0x4c8>
 8004ec8:	dc15      	bgt.n	8004ef6 <UART_SetConfig+0x4da>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <UART_SetConfig+0x4b8>
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d005      	beq.n	8004ede <UART_SetConfig+0x4c2>
 8004ed2:	e010      	b.n	8004ef6 <UART_SetConfig+0x4da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7ff f9e0 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004edc:	e014      	b.n	8004f08 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ede:	4b2e      	ldr	r3, [pc, #184]	; (8004f98 <UART_SetConfig+0x57c>)
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ee2:	e011      	b.n	8004f08 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee4:	f7ff f94c 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004eec:	e00c      	b.n	8004f08 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ef4:	e008      	b.n	8004f08 <UART_SetConfig+0x4ec>
      default:
        pclk = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004efa:	231a      	movs	r3, #26
 8004efc:	2220      	movs	r2, #32
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	19db      	adds	r3, r3, r7
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
        break;
 8004f06:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d02a      	beq.n	8004f64 <UART_SetConfig+0x548>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f12:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <UART_SetConfig+0x578>)
 8004f14:	0052      	lsls	r2, r2, #1
 8004f16:	5ad3      	ldrh	r3, [r2, r3]
 8004f18:	0019      	movs	r1, r3
 8004f1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f1c:	f7fb f8fc 	bl	8000118 <__udivsi3>
 8004f20:	0003      	movs	r3, r0
 8004f22:	001a      	movs	r2, r3
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	18d2      	adds	r2, r2, r3
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	0019      	movs	r1, r3
 8004f32:	0010      	movs	r0, r2
 8004f34:	f7fb f8f0 	bl	8000118 <__udivsi3>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	2b0f      	cmp	r3, #15
 8004f42:	d909      	bls.n	8004f58 <UART_SetConfig+0x53c>
 8004f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	025b      	lsls	r3, r3, #9
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d204      	bcs.n	8004f58 <UART_SetConfig+0x53c>
      {
        huart->Instance->BRR = usartdiv;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f54:	60da      	str	r2, [r3, #12]
 8004f56:	e005      	b.n	8004f64 <UART_SetConfig+0x548>
      }
      else
      {
        ret = HAL_ERROR;
 8004f58:	231a      	movs	r3, #26
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	189b      	adds	r3, r3, r2
 8004f5e:	19db      	adds	r3, r3, r7
 8004f60:	2201      	movs	r2, #1
 8004f62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	226a      	movs	r2, #106	; 0x6a
 8004f68:	2101      	movs	r1, #1
 8004f6a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	2268      	movs	r2, #104	; 0x68
 8004f70:	2101      	movs	r1, #1
 8004f72:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	2200      	movs	r2, #0
 8004f78:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004f80:	231a      	movs	r3, #26
 8004f82:	2220      	movs	r2, #32
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	19db      	adds	r3, r3, r7
 8004f88:	781b      	ldrb	r3, [r3, #0]
}
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b010      	add	sp, #64	; 0x40
 8004f90:	bdb0      	pop	{r4, r5, r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	08006844 	.word	0x08006844
 8004f98:	00f42400 	.word	0x00f42400

08004f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	2201      	movs	r2, #1
 8004faa:	4013      	ands	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4a4a      	ldr	r2, [pc, #296]	; (80050e0 <UART_AdvFeatureConfig+0x144>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	2202      	movs	r2, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4a43      	ldr	r2, [pc, #268]	; (80050e4 <UART_AdvFeatureConfig+0x148>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	0019      	movs	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	2204      	movs	r2, #4
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d00b      	beq.n	800500a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4a3b      	ldr	r2, [pc, #236]	; (80050e8 <UART_AdvFeatureConfig+0x14c>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	2208      	movs	r2, #8
 8005010:	4013      	ands	r3, r2
 8005012:	d00b      	beq.n	800502c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4a34      	ldr	r2, [pc, #208]	; (80050ec <UART_AdvFeatureConfig+0x150>)
 800501c:	4013      	ands	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	2210      	movs	r2, #16
 8005032:	4013      	ands	r3, r2
 8005034:	d00b      	beq.n	800504e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4a2c      	ldr	r2, [pc, #176]	; (80050f0 <UART_AdvFeatureConfig+0x154>)
 800503e:	4013      	ands	r3, r2
 8005040:	0019      	movs	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	2220      	movs	r2, #32
 8005054:	4013      	ands	r3, r2
 8005056:	d00b      	beq.n	8005070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4a25      	ldr	r2, [pc, #148]	; (80050f4 <UART_AdvFeatureConfig+0x158>)
 8005060:	4013      	ands	r3, r2
 8005062:	0019      	movs	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	2240      	movs	r2, #64	; 0x40
 8005076:	4013      	ands	r3, r2
 8005078:	d01d      	beq.n	80050b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <UART_AdvFeatureConfig+0x15c>)
 8005082:	4013      	ands	r3, r2
 8005084:	0019      	movs	r1, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	035b      	lsls	r3, r3, #13
 800509a:	429a      	cmp	r2, r3
 800509c:	d10b      	bne.n	80050b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a15      	ldr	r2, [pc, #84]	; (80050fc <UART_AdvFeatureConfig+0x160>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	4013      	ands	r3, r2
 80050be:	d00b      	beq.n	80050d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4a0e      	ldr	r2, [pc, #56]	; (8005100 <UART_AdvFeatureConfig+0x164>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }
}
 80050d8:	46c0      	nop			; (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b002      	add	sp, #8
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	fffdffff 	.word	0xfffdffff
 80050e4:	fffeffff 	.word	0xfffeffff
 80050e8:	fffbffff 	.word	0xfffbffff
 80050ec:	ffff7fff 	.word	0xffff7fff
 80050f0:	ffffefff 	.word	0xffffefff
 80050f4:	ffffdfff 	.word	0xffffdfff
 80050f8:	ffefffff 	.word	0xffefffff
 80050fc:	ff9fffff 	.word	0xff9fffff
 8005100:	fff7ffff 	.word	0xfff7ffff

08005104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	228c      	movs	r2, #140	; 0x8c
 8005110:	2100      	movs	r1, #0
 8005112:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005114:	f7fe f96a 	bl	80033ec <HAL_GetTick>
 8005118:	0003      	movs	r3, r0
 800511a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2208      	movs	r2, #8
 8005124:	4013      	ands	r3, r2
 8005126:	2b08      	cmp	r3, #8
 8005128:	d10c      	bne.n	8005144 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	0391      	lsls	r1, r2, #14
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4a18      	ldr	r2, [pc, #96]	; (8005194 <UART_CheckIdleState+0x90>)
 8005134:	9200      	str	r2, [sp, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	f000 f82e 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 800513c:	1e03      	subs	r3, r0, #0
 800513e:	d001      	beq.n	8005144 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e023      	b.n	800518c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2204      	movs	r2, #4
 800514c:	4013      	ands	r3, r2
 800514e:	2b04      	cmp	r3, #4
 8005150:	d10c      	bne.n	800516c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	03d1      	lsls	r1, r2, #15
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4a0e      	ldr	r2, [pc, #56]	; (8005194 <UART_CheckIdleState+0x90>)
 800515c:	9200      	str	r2, [sp, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	f000 f81a 	bl	8005198 <UART_WaitOnFlagUntilTimeout>
 8005164:	1e03      	subs	r3, r0, #0
 8005166:	d001      	beq.n	800516c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e00f      	b.n	800518c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2284      	movs	r2, #132	; 0x84
 8005170:	2120      	movs	r1, #32
 8005172:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2288      	movs	r2, #136	; 0x88
 8005178:	2120      	movs	r1, #32
 800517a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2280      	movs	r2, #128	; 0x80
 8005186:	2100      	movs	r1, #0
 8005188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	0018      	movs	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	b004      	add	sp, #16
 8005192:	bd80      	pop	{r7, pc}
 8005194:	01ffffff 	.word	0x01ffffff

08005198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b094      	sub	sp, #80	; 0x50
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	1dfb      	adds	r3, r7, #7
 80051a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a8:	e0a7      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ac:	3301      	adds	r3, #1
 80051ae:	d100      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80051b0:	e0a3      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b2:	f7fe f91b 	bl	80033ec <HAL_GetTick>
 80051b6:	0002      	movs	r2, r0
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051be:	429a      	cmp	r2, r3
 80051c0:	d302      	bcc.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d13f      	bne.n	8005248 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c8:	f3ef 8310 	mrs	r3, PRIMASK
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051d0:	647b      	str	r3, [r7, #68]	; 0x44
 80051d2:	2301      	movs	r3, #1
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	494e      	ldr	r1, [pc, #312]	; (8005324 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80051ea:	400a      	ands	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f383 8810 	msr	PRIMASK, r3
}
 80051f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fa:	f3ef 8310 	mrs	r3, PRIMASK
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	643b      	str	r3, [r7, #64]	; 0x40
 8005204:	2301      	movs	r3, #1
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	f383 8810 	msr	PRIMASK, r3
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2101      	movs	r1, #1
 800521c:	438a      	bics	r2, r1
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2284      	movs	r2, #132	; 0x84
 8005230:	2120      	movs	r1, #32
 8005232:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2288      	movs	r2, #136	; 0x88
 8005238:	2120      	movs	r1, #32
 800523a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2280      	movs	r2, #128	; 0x80
 8005240:	2100      	movs	r1, #0
 8005242:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e069      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2204      	movs	r2, #4
 8005250:	4013      	ands	r3, r2
 8005252:	d052      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69da      	ldr	r2, [r3, #28]
 800525a:	2380      	movs	r3, #128	; 0x80
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	401a      	ands	r2, r3
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	429a      	cmp	r2, r3
 8005266:	d148      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	0112      	lsls	r2, r2, #4
 8005270:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005272:	f3ef 8310 	mrs	r3, PRIMASK
 8005276:	613b      	str	r3, [r7, #16]
  return(result);
 8005278:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527c:	2301      	movs	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f383 8810 	msr	PRIMASK, r3
}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4924      	ldr	r1, [pc, #144]	; (8005324 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005294:	400a      	ands	r2, r1
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f383 8810 	msr	PRIMASK, r3
}
 80052a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a4:	f3ef 8310 	mrs	r3, PRIMASK
 80052a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80052aa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ae:	2301      	movs	r3, #1
 80052b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f383 8810 	msr	PRIMASK, r3
}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2101      	movs	r1, #1
 80052c6:	438a      	bics	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2284      	movs	r2, #132	; 0x84
 80052da:	2120      	movs	r1, #32
 80052dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2288      	movs	r2, #136	; 0x88
 80052e2:	2120      	movs	r1, #32
 80052e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	228c      	movs	r2, #140	; 0x8c
 80052ea:	2120      	movs	r1, #32
 80052ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	2100      	movs	r1, #0
 80052f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e010      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	4013      	ands	r3, r2
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	425a      	negs	r2, r3
 800530a:	4153      	adcs	r3, r2
 800530c:	b2db      	uxtb	r3, r3
 800530e:	001a      	movs	r2, r3
 8005310:	1dfb      	adds	r3, r7, #7
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d100      	bne.n	800531a <UART_WaitOnFlagUntilTimeout+0x182>
 8005318:	e747      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b014      	add	sp, #80	; 0x50
 8005322:	bd80      	pop	{r7, pc}
 8005324:	fffffe5f 	.word	0xfffffe5f

08005328 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2280      	movs	r2, #128	; 0x80
 8005334:	5c9b      	ldrb	r3, [r3, r2]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_UARTEx_DisableFifoMode+0x16>
 800533a:	2302      	movs	r3, #2
 800533c:	e027      	b.n	800538e <HAL_UARTEx_DisableFifoMode+0x66>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2280      	movs	r2, #128	; 0x80
 8005342:	2101      	movs	r1, #1
 8005344:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2284      	movs	r2, #132	; 0x84
 800534a:	2124      	movs	r1, #36	; 0x24
 800534c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2101      	movs	r1, #1
 8005362:	438a      	bics	r2, r1
 8005364:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <HAL_UARTEx_DisableFifoMode+0x70>)
 800536a:	4013      	ands	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2284      	movs	r2, #132	; 0x84
 8005380:	2120      	movs	r1, #32
 8005382:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2280      	movs	r2, #128	; 0x80
 8005388:	2100      	movs	r1, #0
 800538a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b004      	add	sp, #16
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	dfffffff 	.word	0xdfffffff

0800539c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	5c9b      	ldrb	r3, [r3, r2]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e02e      	b.n	8005412 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2280      	movs	r2, #128	; 0x80
 80053b8:	2101      	movs	r1, #1
 80053ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2284      	movs	r2, #132	; 0x84
 80053c0:	2124      	movs	r1, #36	; 0x24
 80053c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2101      	movs	r1, #1
 80053d8:	438a      	bics	r2, r1
 80053da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	08d9      	lsrs	r1, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 f854 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2284      	movs	r2, #132	; 0x84
 8005404:	2120      	movs	r1, #32
 8005406:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	2100      	movs	r1, #0
 800540e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	0018      	movs	r0, r3
 8005414:	46bd      	mov	sp, r7
 8005416:	b004      	add	sp, #16
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2280      	movs	r2, #128	; 0x80
 800542a:	5c9b      	ldrb	r3, [r3, r2]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005430:	2302      	movs	r3, #2
 8005432:	e02f      	b.n	8005494 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2280      	movs	r2, #128	; 0x80
 8005438:	2101      	movs	r1, #1
 800543a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2284      	movs	r2, #132	; 0x84
 8005440:	2124      	movs	r1, #36	; 0x24
 8005442:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2101      	movs	r1, #1
 8005458:	438a      	bics	r2, r1
 800545a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	4a0e      	ldr	r2, [pc, #56]	; (800549c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005464:	4013      	ands	r3, r2
 8005466:	0019      	movs	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	0018      	movs	r0, r3
 8005476:	f000 f813 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2284      	movs	r2, #132	; 0x84
 8005486:	2120      	movs	r1, #32
 8005488:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2280      	movs	r2, #128	; 0x80
 800548e:	2100      	movs	r1, #0
 8005490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b004      	add	sp, #16
 800549a:	bd80      	pop	{r7, pc}
 800549c:	f1ffffff 	.word	0xf1ffffff

080054a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	226a      	movs	r2, #106	; 0x6a
 80054b4:	2101      	movs	r1, #1
 80054b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2268      	movs	r2, #104	; 0x68
 80054bc:	2101      	movs	r1, #1
 80054be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054c0:	e043      	b.n	800554a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054c2:	260f      	movs	r6, #15
 80054c4:	19bb      	adds	r3, r7, r6
 80054c6:	2208      	movs	r2, #8
 80054c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054ca:	200e      	movs	r0, #14
 80054cc:	183b      	adds	r3, r7, r0
 80054ce:	2208      	movs	r2, #8
 80054d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	0e5b      	lsrs	r3, r3, #25
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	240d      	movs	r4, #13
 80054de:	193b      	adds	r3, r7, r4
 80054e0:	2107      	movs	r1, #7
 80054e2:	400a      	ands	r2, r1
 80054e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	0f5b      	lsrs	r3, r3, #29
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	250c      	movs	r5, #12
 80054f2:	197b      	adds	r3, r7, r5
 80054f4:	2107      	movs	r1, #7
 80054f6:	400a      	ands	r2, r1
 80054f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054fa:	183b      	adds	r3, r7, r0
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	197a      	adds	r2, r7, r5
 8005500:	7812      	ldrb	r2, [r2, #0]
 8005502:	4914      	ldr	r1, [pc, #80]	; (8005554 <UARTEx_SetNbDataToProcess+0xb4>)
 8005504:	5c8a      	ldrb	r2, [r1, r2]
 8005506:	435a      	muls	r2, r3
 8005508:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800550a:	197b      	adds	r3, r7, r5
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	4a12      	ldr	r2, [pc, #72]	; (8005558 <UARTEx_SetNbDataToProcess+0xb8>)
 8005510:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005512:	0019      	movs	r1, r3
 8005514:	f7fa fe8a 	bl	800022c <__divsi3>
 8005518:	0003      	movs	r3, r0
 800551a:	b299      	uxth	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	226a      	movs	r2, #106	; 0x6a
 8005520:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005522:	19bb      	adds	r3, r7, r6
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	193a      	adds	r2, r7, r4
 8005528:	7812      	ldrb	r2, [r2, #0]
 800552a:	490a      	ldr	r1, [pc, #40]	; (8005554 <UARTEx_SetNbDataToProcess+0xb4>)
 800552c:	5c8a      	ldrb	r2, [r1, r2]
 800552e:	435a      	muls	r2, r3
 8005530:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005532:	193b      	adds	r3, r7, r4
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	4a08      	ldr	r2, [pc, #32]	; (8005558 <UARTEx_SetNbDataToProcess+0xb8>)
 8005538:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800553a:	0019      	movs	r1, r3
 800553c:	f7fa fe76 	bl	800022c <__divsi3>
 8005540:	0003      	movs	r3, r0
 8005542:	b299      	uxth	r1, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2268      	movs	r2, #104	; 0x68
 8005548:	5299      	strh	r1, [r3, r2]
}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	b005      	add	sp, #20
 8005550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	0800685c 	.word	0x0800685c
 8005558:	08006864 	.word	0x08006864

0800555c <__errno>:
 800555c:	4b01      	ldr	r3, [pc, #4]	; (8005564 <__errno+0x8>)
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	4770      	bx	lr
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	2000008c 	.word	0x2000008c

08005568 <__libc_init_array>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	2600      	movs	r6, #0
 800556c:	4d0c      	ldr	r5, [pc, #48]	; (80055a0 <__libc_init_array+0x38>)
 800556e:	4c0d      	ldr	r4, [pc, #52]	; (80055a4 <__libc_init_array+0x3c>)
 8005570:	1b64      	subs	r4, r4, r5
 8005572:	10a4      	asrs	r4, r4, #2
 8005574:	42a6      	cmp	r6, r4
 8005576:	d109      	bne.n	800558c <__libc_init_array+0x24>
 8005578:	2600      	movs	r6, #0
 800557a:	f001 f915 	bl	80067a8 <_init>
 800557e:	4d0a      	ldr	r5, [pc, #40]	; (80055a8 <__libc_init_array+0x40>)
 8005580:	4c0a      	ldr	r4, [pc, #40]	; (80055ac <__libc_init_array+0x44>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	42a6      	cmp	r6, r4
 8005588:	d105      	bne.n	8005596 <__libc_init_array+0x2e>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	00b3      	lsls	r3, r6, #2
 800558e:	58eb      	ldr	r3, [r5, r3]
 8005590:	4798      	blx	r3
 8005592:	3601      	adds	r6, #1
 8005594:	e7ee      	b.n	8005574 <__libc_init_array+0xc>
 8005596:	00b3      	lsls	r3, r6, #2
 8005598:	58eb      	ldr	r3, [r5, r3]
 800559a:	4798      	blx	r3
 800559c:	3601      	adds	r6, #1
 800559e:	e7f2      	b.n	8005586 <__libc_init_array+0x1e>
 80055a0:	080069bc 	.word	0x080069bc
 80055a4:	080069bc 	.word	0x080069bc
 80055a8:	080069bc 	.word	0x080069bc
 80055ac:	080069c0 	.word	0x080069c0

080055b0 <memcpy>:
 80055b0:	2300      	movs	r3, #0
 80055b2:	b510      	push	{r4, lr}
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d100      	bne.n	80055ba <memcpy+0xa>
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	5ccc      	ldrb	r4, [r1, r3]
 80055bc:	54c4      	strb	r4, [r0, r3]
 80055be:	3301      	adds	r3, #1
 80055c0:	e7f8      	b.n	80055b4 <memcpy+0x4>

080055c2 <memset>:
 80055c2:	0003      	movs	r3, r0
 80055c4:	1882      	adds	r2, r0, r2
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d100      	bne.n	80055cc <memset+0xa>
 80055ca:	4770      	bx	lr
 80055cc:	7019      	strb	r1, [r3, #0]
 80055ce:	3301      	adds	r3, #1
 80055d0:	e7f9      	b.n	80055c6 <memset+0x4>
	...

080055d4 <srand>:
 80055d4:	4b11      	ldr	r3, [pc, #68]	; (800561c <srand+0x48>)
 80055d6:	b570      	push	{r4, r5, r6, lr}
 80055d8:	681d      	ldr	r5, [r3, #0]
 80055da:	0004      	movs	r4, r0
 80055dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d116      	bne.n	8005610 <srand+0x3c>
 80055e2:	2018      	movs	r0, #24
 80055e4:	f000 f8be 	bl	8005764 <malloc>
 80055e8:	1e02      	subs	r2, r0, #0
 80055ea:	63a8      	str	r0, [r5, #56]	; 0x38
 80055ec:	d104      	bne.n	80055f8 <srand+0x24>
 80055ee:	2142      	movs	r1, #66	; 0x42
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <srand+0x4c>)
 80055f2:	480c      	ldr	r0, [pc, #48]	; (8005624 <srand+0x50>)
 80055f4:	f000 f876 	bl	80056e4 <__assert_func>
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <srand+0x54>)
 80055fa:	2100      	movs	r1, #0
 80055fc:	6003      	str	r3, [r0, #0]
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <srand+0x58>)
 8005600:	6043      	str	r3, [r0, #4]
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <srand+0x5c>)
 8005604:	6083      	str	r3, [r0, #8]
 8005606:	230b      	movs	r3, #11
 8005608:	8183      	strh	r3, [r0, #12]
 800560a:	2001      	movs	r0, #1
 800560c:	6110      	str	r0, [r2, #16]
 800560e:	6151      	str	r1, [r2, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005614:	611c      	str	r4, [r3, #16]
 8005616:	615a      	str	r2, [r3, #20]
 8005618:	bd70      	pop	{r4, r5, r6, pc}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	2000008c 	.word	0x2000008c
 8005620:	08006870 	.word	0x08006870
 8005624:	08006887 	.word	0x08006887
 8005628:	abcd330e 	.word	0xabcd330e
 800562c:	e66d1234 	.word	0xe66d1234
 8005630:	0005deec 	.word	0x0005deec

08005634 <rand>:
 8005634:	4b16      	ldr	r3, [pc, #88]	; (8005690 <rand+0x5c>)
 8005636:	b510      	push	{r4, lr}
 8005638:	681c      	ldr	r4, [r3, #0]
 800563a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800563c:	2b00      	cmp	r3, #0
 800563e:	d116      	bne.n	800566e <rand+0x3a>
 8005640:	2018      	movs	r0, #24
 8005642:	f000 f88f 	bl	8005764 <malloc>
 8005646:	1e02      	subs	r2, r0, #0
 8005648:	63a0      	str	r0, [r4, #56]	; 0x38
 800564a:	d104      	bne.n	8005656 <rand+0x22>
 800564c:	214e      	movs	r1, #78	; 0x4e
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <rand+0x60>)
 8005650:	4811      	ldr	r0, [pc, #68]	; (8005698 <rand+0x64>)
 8005652:	f000 f847 	bl	80056e4 <__assert_func>
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <rand+0x68>)
 8005658:	2100      	movs	r1, #0
 800565a:	6003      	str	r3, [r0, #0]
 800565c:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <rand+0x6c>)
 800565e:	6043      	str	r3, [r0, #4]
 8005660:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <rand+0x70>)
 8005662:	6083      	str	r3, [r0, #8]
 8005664:	230b      	movs	r3, #11
 8005666:	8183      	strh	r3, [r0, #12]
 8005668:	2001      	movs	r0, #1
 800566a:	6110      	str	r0, [r2, #16]
 800566c:	6151      	str	r1, [r2, #20]
 800566e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005670:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <rand+0x74>)
 8005672:	6920      	ldr	r0, [r4, #16]
 8005674:	6961      	ldr	r1, [r4, #20]
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <rand+0x78>)
 8005678:	f7fa fee4 	bl	8000444 <__aeabi_lmul>
 800567c:	2201      	movs	r2, #1
 800567e:	2300      	movs	r3, #0
 8005680:	1880      	adds	r0, r0, r2
 8005682:	4159      	adcs	r1, r3
 8005684:	6120      	str	r0, [r4, #16]
 8005686:	6161      	str	r1, [r4, #20]
 8005688:	0048      	lsls	r0, r1, #1
 800568a:	0840      	lsrs	r0, r0, #1
 800568c:	bd10      	pop	{r4, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	2000008c 	.word	0x2000008c
 8005694:	08006870 	.word	0x08006870
 8005698:	08006887 	.word	0x08006887
 800569c:	abcd330e 	.word	0xabcd330e
 80056a0:	e66d1234 	.word	0xe66d1234
 80056a4:	0005deec 	.word	0x0005deec
 80056a8:	4c957f2d 	.word	0x4c957f2d
 80056ac:	5851f42d 	.word	0x5851f42d

080056b0 <time>:
 80056b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056b2:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <time+0x30>)
 80056b4:	0004      	movs	r4, r0
 80056b6:	2200      	movs	r2, #0
 80056b8:	4669      	mov	r1, sp
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	f000 f840 	bl	8005740 <_gettimeofday_r>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	da04      	bge.n	80056ce <time+0x1e>
 80056c4:	2201      	movs	r2, #1
 80056c6:	4252      	negs	r2, r2
 80056c8:	17d3      	asrs	r3, r2, #31
 80056ca:	9200      	str	r2, [sp, #0]
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	9800      	ldr	r0, [sp, #0]
 80056d0:	9901      	ldr	r1, [sp, #4]
 80056d2:	2c00      	cmp	r4, #0
 80056d4:	d001      	beq.n	80056da <time+0x2a>
 80056d6:	6020      	str	r0, [r4, #0]
 80056d8:	6061      	str	r1, [r4, #4]
 80056da:	b004      	add	sp, #16
 80056dc:	bd10      	pop	{r4, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	2000008c 	.word	0x2000008c

080056e4 <__assert_func>:
 80056e4:	b530      	push	{r4, r5, lr}
 80056e6:	0014      	movs	r4, r2
 80056e8:	001a      	movs	r2, r3
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <__assert_func+0x2c>)
 80056ec:	0005      	movs	r5, r0
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	b085      	sub	sp, #20
 80056f2:	68d8      	ldr	r0, [r3, #12]
 80056f4:	4b07      	ldr	r3, [pc, #28]	; (8005714 <__assert_func+0x30>)
 80056f6:	2c00      	cmp	r4, #0
 80056f8:	d101      	bne.n	80056fe <__assert_func+0x1a>
 80056fa:	4b07      	ldr	r3, [pc, #28]	; (8005718 <__assert_func+0x34>)
 80056fc:	001c      	movs	r4, r3
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	9100      	str	r1, [sp, #0]
 8005702:	002b      	movs	r3, r5
 8005704:	4905      	ldr	r1, [pc, #20]	; (800571c <__assert_func+0x38>)
 8005706:	9402      	str	r4, [sp, #8]
 8005708:	f000 f80a 	bl	8005720 <fiprintf>
 800570c:	f000 fcda 	bl	80060c4 <abort>
 8005710:	2000008c 	.word	0x2000008c
 8005714:	080068e2 	.word	0x080068e2
 8005718:	0800691d 	.word	0x0800691d
 800571c:	080068ef 	.word	0x080068ef

08005720 <fiprintf>:
 8005720:	b40e      	push	{r1, r2, r3}
 8005722:	b503      	push	{r0, r1, lr}
 8005724:	0001      	movs	r1, r0
 8005726:	ab03      	add	r3, sp, #12
 8005728:	4804      	ldr	r0, [pc, #16]	; (800573c <fiprintf+0x1c>)
 800572a:	cb04      	ldmia	r3!, {r2}
 800572c:	6800      	ldr	r0, [r0, #0]
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	f000 f92c 	bl	800598c <_vfiprintf_r>
 8005734:	b002      	add	sp, #8
 8005736:	bc08      	pop	{r3}
 8005738:	b003      	add	sp, #12
 800573a:	4718      	bx	r3
 800573c:	2000008c 	.word	0x2000008c

08005740 <_gettimeofday_r>:
 8005740:	2300      	movs	r3, #0
 8005742:	b570      	push	{r4, r5, r6, lr}
 8005744:	4d06      	ldr	r5, [pc, #24]	; (8005760 <_gettimeofday_r+0x20>)
 8005746:	0004      	movs	r4, r0
 8005748:	0008      	movs	r0, r1
 800574a:	0011      	movs	r1, r2
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	f001 f823 	bl	8006798 <_gettimeofday>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	d103      	bne.n	800575e <_gettimeofday_r+0x1e>
 8005756:	682b      	ldr	r3, [r5, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d000      	beq.n	800575e <_gettimeofday_r+0x1e>
 800575c:	6023      	str	r3, [r4, #0]
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	200001b0 	.word	0x200001b0

08005764 <malloc>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4b03      	ldr	r3, [pc, #12]	; (8005774 <malloc+0x10>)
 8005768:	0001      	movs	r1, r0
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	f000 f870 	bl	8005850 <_malloc_r>
 8005770:	bd10      	pop	{r4, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	2000008c 	.word	0x2000008c

08005778 <_free_r>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	0005      	movs	r5, r0
 800577c:	2900      	cmp	r1, #0
 800577e:	d010      	beq.n	80057a2 <_free_r+0x2a>
 8005780:	1f0c      	subs	r4, r1, #4
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	da00      	bge.n	800578a <_free_r+0x12>
 8005788:	18e4      	adds	r4, r4, r3
 800578a:	0028      	movs	r0, r5
 800578c:	f000 feec 	bl	8006568 <__malloc_lock>
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <_free_r+0x90>)
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d105      	bne.n	80057a4 <_free_r+0x2c>
 8005798:	6063      	str	r3, [r4, #4]
 800579a:	6014      	str	r4, [r2, #0]
 800579c:	0028      	movs	r0, r5
 800579e:	f000 feeb 	bl	8006578 <__malloc_unlock>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d908      	bls.n	80057ba <_free_r+0x42>
 80057a8:	6821      	ldr	r1, [r4, #0]
 80057aa:	1860      	adds	r0, r4, r1
 80057ac:	4283      	cmp	r3, r0
 80057ae:	d1f3      	bne.n	8005798 <_free_r+0x20>
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	1841      	adds	r1, r0, r1
 80057b6:	6021      	str	r1, [r4, #0]
 80057b8:	e7ee      	b.n	8005798 <_free_r+0x20>
 80057ba:	001a      	movs	r2, r3
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <_free_r+0x4e>
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	d9f9      	bls.n	80057ba <_free_r+0x42>
 80057c6:	6811      	ldr	r1, [r2, #0]
 80057c8:	1850      	adds	r0, r2, r1
 80057ca:	42a0      	cmp	r0, r4
 80057cc:	d10b      	bne.n	80057e6 <_free_r+0x6e>
 80057ce:	6820      	ldr	r0, [r4, #0]
 80057d0:	1809      	adds	r1, r1, r0
 80057d2:	1850      	adds	r0, r2, r1
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	4283      	cmp	r3, r0
 80057d8:	d1e0      	bne.n	800579c <_free_r+0x24>
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	1841      	adds	r1, r0, r1
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	6053      	str	r3, [r2, #4]
 80057e4:	e7da      	b.n	800579c <_free_r+0x24>
 80057e6:	42a0      	cmp	r0, r4
 80057e8:	d902      	bls.n	80057f0 <_free_r+0x78>
 80057ea:	230c      	movs	r3, #12
 80057ec:	602b      	str	r3, [r5, #0]
 80057ee:	e7d5      	b.n	800579c <_free_r+0x24>
 80057f0:	6821      	ldr	r1, [r4, #0]
 80057f2:	1860      	adds	r0, r4, r1
 80057f4:	4283      	cmp	r3, r0
 80057f6:	d103      	bne.n	8005800 <_free_r+0x88>
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	1841      	adds	r1, r0, r1
 80057fe:	6021      	str	r1, [r4, #0]
 8005800:	6063      	str	r3, [r4, #4]
 8005802:	6054      	str	r4, [r2, #4]
 8005804:	e7ca      	b.n	800579c <_free_r+0x24>
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	200001a8 	.word	0x200001a8

0800580c <sbrk_aligned>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4e0f      	ldr	r6, [pc, #60]	; (800584c <sbrk_aligned+0x40>)
 8005810:	000d      	movs	r5, r1
 8005812:	6831      	ldr	r1, [r6, #0]
 8005814:	0004      	movs	r4, r0
 8005816:	2900      	cmp	r1, #0
 8005818:	d102      	bne.n	8005820 <sbrk_aligned+0x14>
 800581a:	f000 fb73 	bl	8005f04 <_sbrk_r>
 800581e:	6030      	str	r0, [r6, #0]
 8005820:	0029      	movs	r1, r5
 8005822:	0020      	movs	r0, r4
 8005824:	f000 fb6e 	bl	8005f04 <_sbrk_r>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d00a      	beq.n	8005842 <sbrk_aligned+0x36>
 800582c:	2303      	movs	r3, #3
 800582e:	1cc5      	adds	r5, r0, #3
 8005830:	439d      	bics	r5, r3
 8005832:	42a8      	cmp	r0, r5
 8005834:	d007      	beq.n	8005846 <sbrk_aligned+0x3a>
 8005836:	1a29      	subs	r1, r5, r0
 8005838:	0020      	movs	r0, r4
 800583a:	f000 fb63 	bl	8005f04 <_sbrk_r>
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	d101      	bne.n	8005846 <sbrk_aligned+0x3a>
 8005842:	2501      	movs	r5, #1
 8005844:	426d      	negs	r5, r5
 8005846:	0028      	movs	r0, r5
 8005848:	bd70      	pop	{r4, r5, r6, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	200001ac 	.word	0x200001ac

08005850 <_malloc_r>:
 8005850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005852:	2203      	movs	r2, #3
 8005854:	1ccb      	adds	r3, r1, #3
 8005856:	4393      	bics	r3, r2
 8005858:	3308      	adds	r3, #8
 800585a:	0006      	movs	r6, r0
 800585c:	001f      	movs	r7, r3
 800585e:	2b0c      	cmp	r3, #12
 8005860:	d232      	bcs.n	80058c8 <_malloc_r+0x78>
 8005862:	270c      	movs	r7, #12
 8005864:	42b9      	cmp	r1, r7
 8005866:	d831      	bhi.n	80058cc <_malloc_r+0x7c>
 8005868:	0030      	movs	r0, r6
 800586a:	f000 fe7d 	bl	8006568 <__malloc_lock>
 800586e:	4d32      	ldr	r5, [pc, #200]	; (8005938 <_malloc_r+0xe8>)
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	001c      	movs	r4, r3
 8005874:	2c00      	cmp	r4, #0
 8005876:	d12e      	bne.n	80058d6 <_malloc_r+0x86>
 8005878:	0039      	movs	r1, r7
 800587a:	0030      	movs	r0, r6
 800587c:	f7ff ffc6 	bl	800580c <sbrk_aligned>
 8005880:	0004      	movs	r4, r0
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	d11e      	bne.n	80058c4 <_malloc_r+0x74>
 8005886:	682c      	ldr	r4, [r5, #0]
 8005888:	0025      	movs	r5, r4
 800588a:	2d00      	cmp	r5, #0
 800588c:	d14a      	bne.n	8005924 <_malloc_r+0xd4>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	0029      	movs	r1, r5
 8005892:	18e3      	adds	r3, r4, r3
 8005894:	0030      	movs	r0, r6
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	f000 fb34 	bl	8005f04 <_sbrk_r>
 800589c:	9b01      	ldr	r3, [sp, #4]
 800589e:	4283      	cmp	r3, r0
 80058a0:	d143      	bne.n	800592a <_malloc_r+0xda>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	3703      	adds	r7, #3
 80058a6:	1aff      	subs	r7, r7, r3
 80058a8:	2303      	movs	r3, #3
 80058aa:	439f      	bics	r7, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	2f0c      	cmp	r7, #12
 80058b0:	d200      	bcs.n	80058b4 <_malloc_r+0x64>
 80058b2:	270c      	movs	r7, #12
 80058b4:	0039      	movs	r1, r7
 80058b6:	0030      	movs	r0, r6
 80058b8:	f7ff ffa8 	bl	800580c <sbrk_aligned>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d034      	beq.n	800592a <_malloc_r+0xda>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	19df      	adds	r7, r3, r7
 80058c4:	6027      	str	r7, [r4, #0]
 80058c6:	e013      	b.n	80058f0 <_malloc_r+0xa0>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	dacb      	bge.n	8005864 <_malloc_r+0x14>
 80058cc:	230c      	movs	r3, #12
 80058ce:	2500      	movs	r5, #0
 80058d0:	6033      	str	r3, [r6, #0]
 80058d2:	0028      	movs	r0, r5
 80058d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	1bd1      	subs	r1, r2, r7
 80058da:	d420      	bmi.n	800591e <_malloc_r+0xce>
 80058dc:	290b      	cmp	r1, #11
 80058de:	d917      	bls.n	8005910 <_malloc_r+0xc0>
 80058e0:	19e2      	adds	r2, r4, r7
 80058e2:	6027      	str	r7, [r4, #0]
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d111      	bne.n	800590c <_malloc_r+0xbc>
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	6863      	ldr	r3, [r4, #4]
 80058ec:	6011      	str	r1, [r2, #0]
 80058ee:	6053      	str	r3, [r2, #4]
 80058f0:	0030      	movs	r0, r6
 80058f2:	0025      	movs	r5, r4
 80058f4:	f000 fe40 	bl	8006578 <__malloc_unlock>
 80058f8:	2207      	movs	r2, #7
 80058fa:	350b      	adds	r5, #11
 80058fc:	1d23      	adds	r3, r4, #4
 80058fe:	4395      	bics	r5, r2
 8005900:	1aea      	subs	r2, r5, r3
 8005902:	429d      	cmp	r5, r3
 8005904:	d0e5      	beq.n	80058d2 <_malloc_r+0x82>
 8005906:	1b5b      	subs	r3, r3, r5
 8005908:	50a3      	str	r3, [r4, r2]
 800590a:	e7e2      	b.n	80058d2 <_malloc_r+0x82>
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	e7ec      	b.n	80058ea <_malloc_r+0x9a>
 8005910:	6862      	ldr	r2, [r4, #4]
 8005912:	42a3      	cmp	r3, r4
 8005914:	d101      	bne.n	800591a <_malloc_r+0xca>
 8005916:	602a      	str	r2, [r5, #0]
 8005918:	e7ea      	b.n	80058f0 <_malloc_r+0xa0>
 800591a:	605a      	str	r2, [r3, #4]
 800591c:	e7e8      	b.n	80058f0 <_malloc_r+0xa0>
 800591e:	0023      	movs	r3, r4
 8005920:	6864      	ldr	r4, [r4, #4]
 8005922:	e7a7      	b.n	8005874 <_malloc_r+0x24>
 8005924:	002c      	movs	r4, r5
 8005926:	686d      	ldr	r5, [r5, #4]
 8005928:	e7af      	b.n	800588a <_malloc_r+0x3a>
 800592a:	230c      	movs	r3, #12
 800592c:	0030      	movs	r0, r6
 800592e:	6033      	str	r3, [r6, #0]
 8005930:	f000 fe22 	bl	8006578 <__malloc_unlock>
 8005934:	e7cd      	b.n	80058d2 <_malloc_r+0x82>
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	200001a8 	.word	0x200001a8

0800593c <__sfputc_r>:
 800593c:	6893      	ldr	r3, [r2, #8]
 800593e:	b510      	push	{r4, lr}
 8005940:	3b01      	subs	r3, #1
 8005942:	6093      	str	r3, [r2, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	da04      	bge.n	8005952 <__sfputc_r+0x16>
 8005948:	6994      	ldr	r4, [r2, #24]
 800594a:	42a3      	cmp	r3, r4
 800594c:	db07      	blt.n	800595e <__sfputc_r+0x22>
 800594e:	290a      	cmp	r1, #10
 8005950:	d005      	beq.n	800595e <__sfputc_r+0x22>
 8005952:	6813      	ldr	r3, [r2, #0]
 8005954:	1c58      	adds	r0, r3, #1
 8005956:	6010      	str	r0, [r2, #0]
 8005958:	7019      	strb	r1, [r3, #0]
 800595a:	0008      	movs	r0, r1
 800595c:	bd10      	pop	{r4, pc}
 800595e:	f000 fae3 	bl	8005f28 <__swbuf_r>
 8005962:	0001      	movs	r1, r0
 8005964:	e7f9      	b.n	800595a <__sfputc_r+0x1e>

08005966 <__sfputs_r>:
 8005966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005968:	0006      	movs	r6, r0
 800596a:	000f      	movs	r7, r1
 800596c:	0014      	movs	r4, r2
 800596e:	18d5      	adds	r5, r2, r3
 8005970:	42ac      	cmp	r4, r5
 8005972:	d101      	bne.n	8005978 <__sfputs_r+0x12>
 8005974:	2000      	movs	r0, #0
 8005976:	e007      	b.n	8005988 <__sfputs_r+0x22>
 8005978:	7821      	ldrb	r1, [r4, #0]
 800597a:	003a      	movs	r2, r7
 800597c:	0030      	movs	r0, r6
 800597e:	f7ff ffdd 	bl	800593c <__sfputc_r>
 8005982:	3401      	adds	r4, #1
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d1f3      	bne.n	8005970 <__sfputs_r+0xa>
 8005988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800598c <_vfiprintf_r>:
 800598c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598e:	b0a1      	sub	sp, #132	; 0x84
 8005990:	0006      	movs	r6, r0
 8005992:	000c      	movs	r4, r1
 8005994:	001f      	movs	r7, r3
 8005996:	9203      	str	r2, [sp, #12]
 8005998:	2800      	cmp	r0, #0
 800599a:	d004      	beq.n	80059a6 <_vfiprintf_r+0x1a>
 800599c:	6983      	ldr	r3, [r0, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <_vfiprintf_r+0x1a>
 80059a2:	f000 fcc5 	bl	8006330 <__sinit>
 80059a6:	4b8e      	ldr	r3, [pc, #568]	; (8005be0 <_vfiprintf_r+0x254>)
 80059a8:	429c      	cmp	r4, r3
 80059aa:	d11c      	bne.n	80059e6 <_vfiprintf_r+0x5a>
 80059ac:	6874      	ldr	r4, [r6, #4]
 80059ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b0:	07db      	lsls	r3, r3, #31
 80059b2:	d405      	bmi.n	80059c0 <_vfiprintf_r+0x34>
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	059b      	lsls	r3, r3, #22
 80059b8:	d402      	bmi.n	80059c0 <_vfiprintf_r+0x34>
 80059ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059bc:	f000 fd59 	bl	8006472 <__retarget_lock_acquire_recursive>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	071b      	lsls	r3, r3, #28
 80059c4:	d502      	bpl.n	80059cc <_vfiprintf_r+0x40>
 80059c6:	6923      	ldr	r3, [r4, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11d      	bne.n	8005a08 <_vfiprintf_r+0x7c>
 80059cc:	0021      	movs	r1, r4
 80059ce:	0030      	movs	r0, r6
 80059d0:	f000 fb00 	bl	8005fd4 <__swsetup_r>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d017      	beq.n	8005a08 <_vfiprintf_r+0x7c>
 80059d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059da:	07db      	lsls	r3, r3, #31
 80059dc:	d50d      	bpl.n	80059fa <_vfiprintf_r+0x6e>
 80059de:	2001      	movs	r0, #1
 80059e0:	4240      	negs	r0, r0
 80059e2:	b021      	add	sp, #132	; 0x84
 80059e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e6:	4b7f      	ldr	r3, [pc, #508]	; (8005be4 <_vfiprintf_r+0x258>)
 80059e8:	429c      	cmp	r4, r3
 80059ea:	d101      	bne.n	80059f0 <_vfiprintf_r+0x64>
 80059ec:	68b4      	ldr	r4, [r6, #8]
 80059ee:	e7de      	b.n	80059ae <_vfiprintf_r+0x22>
 80059f0:	4b7d      	ldr	r3, [pc, #500]	; (8005be8 <_vfiprintf_r+0x25c>)
 80059f2:	429c      	cmp	r4, r3
 80059f4:	d1db      	bne.n	80059ae <_vfiprintf_r+0x22>
 80059f6:	68f4      	ldr	r4, [r6, #12]
 80059f8:	e7d9      	b.n	80059ae <_vfiprintf_r+0x22>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	059b      	lsls	r3, r3, #22
 80059fe:	d4ee      	bmi.n	80059de <_vfiprintf_r+0x52>
 8005a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a02:	f000 fd37 	bl	8006474 <__retarget_lock_release_recursive>
 8005a06:	e7ea      	b.n	80059de <_vfiprintf_r+0x52>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	ad08      	add	r5, sp, #32
 8005a0c:	616b      	str	r3, [r5, #20]
 8005a0e:	3320      	adds	r3, #32
 8005a10:	766b      	strb	r3, [r5, #25]
 8005a12:	3310      	adds	r3, #16
 8005a14:	76ab      	strb	r3, [r5, #26]
 8005a16:	9707      	str	r7, [sp, #28]
 8005a18:	9f03      	ldr	r7, [sp, #12]
 8005a1a:	783b      	ldrb	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <_vfiprintf_r+0x98>
 8005a20:	2b25      	cmp	r3, #37	; 0x25
 8005a22:	d14e      	bne.n	8005ac2 <_vfiprintf_r+0x136>
 8005a24:	9b03      	ldr	r3, [sp, #12]
 8005a26:	1afb      	subs	r3, r7, r3
 8005a28:	9305      	str	r3, [sp, #20]
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	429f      	cmp	r7, r3
 8005a2e:	d00d      	beq.n	8005a4c <_vfiprintf_r+0xc0>
 8005a30:	9b05      	ldr	r3, [sp, #20]
 8005a32:	0021      	movs	r1, r4
 8005a34:	0030      	movs	r0, r6
 8005a36:	9a03      	ldr	r2, [sp, #12]
 8005a38:	f7ff ff95 	bl	8005966 <__sfputs_r>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d100      	bne.n	8005a42 <_vfiprintf_r+0xb6>
 8005a40:	e0b5      	b.n	8005bae <_vfiprintf_r+0x222>
 8005a42:	696a      	ldr	r2, [r5, #20]
 8005a44:	9b05      	ldr	r3, [sp, #20]
 8005a46:	4694      	mov	ip, r2
 8005a48:	4463      	add	r3, ip
 8005a4a:	616b      	str	r3, [r5, #20]
 8005a4c:	783b      	ldrb	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d100      	bne.n	8005a54 <_vfiprintf_r+0xc8>
 8005a52:	e0ac      	b.n	8005bae <_vfiprintf_r+0x222>
 8005a54:	2201      	movs	r2, #1
 8005a56:	1c7b      	adds	r3, r7, #1
 8005a58:	9303      	str	r3, [sp, #12]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4252      	negs	r2, r2
 8005a5e:	606a      	str	r2, [r5, #4]
 8005a60:	a904      	add	r1, sp, #16
 8005a62:	3254      	adds	r2, #84	; 0x54
 8005a64:	1852      	adds	r2, r2, r1
 8005a66:	602b      	str	r3, [r5, #0]
 8005a68:	60eb      	str	r3, [r5, #12]
 8005a6a:	60ab      	str	r3, [r5, #8]
 8005a6c:	7013      	strb	r3, [r2, #0]
 8005a6e:	65ab      	str	r3, [r5, #88]	; 0x58
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	2205      	movs	r2, #5
 8005a74:	7819      	ldrb	r1, [r3, #0]
 8005a76:	485d      	ldr	r0, [pc, #372]	; (8005bec <_vfiprintf_r+0x260>)
 8005a78:	f000 fd6a 	bl	8006550 <memchr>
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	1c5f      	adds	r7, r3, #1
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d120      	bne.n	8005ac6 <_vfiprintf_r+0x13a>
 8005a84:	682a      	ldr	r2, [r5, #0]
 8005a86:	06d3      	lsls	r3, r2, #27
 8005a88:	d504      	bpl.n	8005a94 <_vfiprintf_r+0x108>
 8005a8a:	2353      	movs	r3, #83	; 0x53
 8005a8c:	a904      	add	r1, sp, #16
 8005a8e:	185b      	adds	r3, r3, r1
 8005a90:	2120      	movs	r1, #32
 8005a92:	7019      	strb	r1, [r3, #0]
 8005a94:	0713      	lsls	r3, r2, #28
 8005a96:	d504      	bpl.n	8005aa2 <_vfiprintf_r+0x116>
 8005a98:	2353      	movs	r3, #83	; 0x53
 8005a9a:	a904      	add	r1, sp, #16
 8005a9c:	185b      	adds	r3, r3, r1
 8005a9e:	212b      	movs	r1, #43	; 0x2b
 8005aa0:	7019      	strb	r1, [r3, #0]
 8005aa2:	9b03      	ldr	r3, [sp, #12]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa8:	d016      	beq.n	8005ad8 <_vfiprintf_r+0x14c>
 8005aaa:	2100      	movs	r1, #0
 8005aac:	68eb      	ldr	r3, [r5, #12]
 8005aae:	9f03      	ldr	r7, [sp, #12]
 8005ab0:	783a      	ldrb	r2, [r7, #0]
 8005ab2:	1c78      	adds	r0, r7, #1
 8005ab4:	3a30      	subs	r2, #48	; 0x30
 8005ab6:	4684      	mov	ip, r0
 8005ab8:	2a09      	cmp	r2, #9
 8005aba:	d94f      	bls.n	8005b5c <_vfiprintf_r+0x1d0>
 8005abc:	2900      	cmp	r1, #0
 8005abe:	d111      	bne.n	8005ae4 <_vfiprintf_r+0x158>
 8005ac0:	e017      	b.n	8005af2 <_vfiprintf_r+0x166>
 8005ac2:	3701      	adds	r7, #1
 8005ac4:	e7a9      	b.n	8005a1a <_vfiprintf_r+0x8e>
 8005ac6:	4b49      	ldr	r3, [pc, #292]	; (8005bec <_vfiprintf_r+0x260>)
 8005ac8:	682a      	ldr	r2, [r5, #0]
 8005aca:	1ac0      	subs	r0, r0, r3
 8005acc:	2301      	movs	r3, #1
 8005ace:	4083      	lsls	r3, r0
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	9703      	str	r7, [sp, #12]
 8005ad6:	e7cb      	b.n	8005a70 <_vfiprintf_r+0xe4>
 8005ad8:	9b07      	ldr	r3, [sp, #28]
 8005ada:	1d19      	adds	r1, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	9107      	str	r1, [sp, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	db01      	blt.n	8005ae8 <_vfiprintf_r+0x15c>
 8005ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ae6:	e004      	b.n	8005af2 <_vfiprintf_r+0x166>
 8005ae8:	425b      	negs	r3, r3
 8005aea:	60eb      	str	r3, [r5, #12]
 8005aec:	2302      	movs	r3, #2
 8005aee:	4313      	orrs	r3, r2
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	783b      	ldrb	r3, [r7, #0]
 8005af4:	2b2e      	cmp	r3, #46	; 0x2e
 8005af6:	d10a      	bne.n	8005b0e <_vfiprintf_r+0x182>
 8005af8:	787b      	ldrb	r3, [r7, #1]
 8005afa:	2b2a      	cmp	r3, #42	; 0x2a
 8005afc:	d137      	bne.n	8005b6e <_vfiprintf_r+0x1e2>
 8005afe:	9b07      	ldr	r3, [sp, #28]
 8005b00:	3702      	adds	r7, #2
 8005b02:	1d1a      	adds	r2, r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	9207      	str	r2, [sp, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	db2d      	blt.n	8005b68 <_vfiprintf_r+0x1dc>
 8005b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b0e:	2203      	movs	r2, #3
 8005b10:	7839      	ldrb	r1, [r7, #0]
 8005b12:	4837      	ldr	r0, [pc, #220]	; (8005bf0 <_vfiprintf_r+0x264>)
 8005b14:	f000 fd1c 	bl	8006550 <memchr>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d007      	beq.n	8005b2c <_vfiprintf_r+0x1a0>
 8005b1c:	4b34      	ldr	r3, [pc, #208]	; (8005bf0 <_vfiprintf_r+0x264>)
 8005b1e:	682a      	ldr	r2, [r5, #0]
 8005b20:	1ac0      	subs	r0, r0, r3
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	4083      	lsls	r3, r0
 8005b26:	4313      	orrs	r3, r2
 8005b28:	3701      	adds	r7, #1
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	7839      	ldrb	r1, [r7, #0]
 8005b2e:	1c7b      	adds	r3, r7, #1
 8005b30:	2206      	movs	r2, #6
 8005b32:	4830      	ldr	r0, [pc, #192]	; (8005bf4 <_vfiprintf_r+0x268>)
 8005b34:	9303      	str	r3, [sp, #12]
 8005b36:	7629      	strb	r1, [r5, #24]
 8005b38:	f000 fd0a 	bl	8006550 <memchr>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d045      	beq.n	8005bcc <_vfiprintf_r+0x240>
 8005b40:	4b2d      	ldr	r3, [pc, #180]	; (8005bf8 <_vfiprintf_r+0x26c>)
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d127      	bne.n	8005b96 <_vfiprintf_r+0x20a>
 8005b46:	2207      	movs	r2, #7
 8005b48:	9b07      	ldr	r3, [sp, #28]
 8005b4a:	3307      	adds	r3, #7
 8005b4c:	4393      	bics	r3, r2
 8005b4e:	3308      	adds	r3, #8
 8005b50:	9307      	str	r3, [sp, #28]
 8005b52:	696b      	ldr	r3, [r5, #20]
 8005b54:	9a04      	ldr	r2, [sp, #16]
 8005b56:	189b      	adds	r3, r3, r2
 8005b58:	616b      	str	r3, [r5, #20]
 8005b5a:	e75d      	b.n	8005a18 <_vfiprintf_r+0x8c>
 8005b5c:	210a      	movs	r1, #10
 8005b5e:	434b      	muls	r3, r1
 8005b60:	4667      	mov	r7, ip
 8005b62:	189b      	adds	r3, r3, r2
 8005b64:	3909      	subs	r1, #9
 8005b66:	e7a3      	b.n	8005ab0 <_vfiprintf_r+0x124>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	425b      	negs	r3, r3
 8005b6c:	e7ce      	b.n	8005b0c <_vfiprintf_r+0x180>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	001a      	movs	r2, r3
 8005b72:	3701      	adds	r7, #1
 8005b74:	606b      	str	r3, [r5, #4]
 8005b76:	7839      	ldrb	r1, [r7, #0]
 8005b78:	1c78      	adds	r0, r7, #1
 8005b7a:	3930      	subs	r1, #48	; 0x30
 8005b7c:	4684      	mov	ip, r0
 8005b7e:	2909      	cmp	r1, #9
 8005b80:	d903      	bls.n	8005b8a <_vfiprintf_r+0x1fe>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0c3      	beq.n	8005b0e <_vfiprintf_r+0x182>
 8005b86:	9209      	str	r2, [sp, #36]	; 0x24
 8005b88:	e7c1      	b.n	8005b0e <_vfiprintf_r+0x182>
 8005b8a:	230a      	movs	r3, #10
 8005b8c:	435a      	muls	r2, r3
 8005b8e:	4667      	mov	r7, ip
 8005b90:	1852      	adds	r2, r2, r1
 8005b92:	3b09      	subs	r3, #9
 8005b94:	e7ef      	b.n	8005b76 <_vfiprintf_r+0x1ea>
 8005b96:	ab07      	add	r3, sp, #28
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	0022      	movs	r2, r4
 8005b9c:	0029      	movs	r1, r5
 8005b9e:	0030      	movs	r0, r6
 8005ba0:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <_vfiprintf_r+0x270>)
 8005ba2:	e000      	b.n	8005ba6 <_vfiprintf_r+0x21a>
 8005ba4:	bf00      	nop
 8005ba6:	9004      	str	r0, [sp, #16]
 8005ba8:	9b04      	ldr	r3, [sp, #16]
 8005baa:	3301      	adds	r3, #1
 8005bac:	d1d1      	bne.n	8005b52 <_vfiprintf_r+0x1c6>
 8005bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bb0:	07db      	lsls	r3, r3, #31
 8005bb2:	d405      	bmi.n	8005bc0 <_vfiprintf_r+0x234>
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	059b      	lsls	r3, r3, #22
 8005bb8:	d402      	bmi.n	8005bc0 <_vfiprintf_r+0x234>
 8005bba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bbc:	f000 fc5a 	bl	8006474 <__retarget_lock_release_recursive>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	065b      	lsls	r3, r3, #25
 8005bc4:	d500      	bpl.n	8005bc8 <_vfiprintf_r+0x23c>
 8005bc6:	e70a      	b.n	80059de <_vfiprintf_r+0x52>
 8005bc8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bca:	e70a      	b.n	80059e2 <_vfiprintf_r+0x56>
 8005bcc:	ab07      	add	r3, sp, #28
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	0022      	movs	r2, r4
 8005bd2:	0029      	movs	r1, r5
 8005bd4:	0030      	movs	r0, r6
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <_vfiprintf_r+0x270>)
 8005bd8:	f000 f882 	bl	8005ce0 <_printf_i>
 8005bdc:	e7e3      	b.n	8005ba6 <_vfiprintf_r+0x21a>
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	08006974 	.word	0x08006974
 8005be4:	08006994 	.word	0x08006994
 8005be8:	08006954 	.word	0x08006954
 8005bec:	0800691e 	.word	0x0800691e
 8005bf0:	08006924 	.word	0x08006924
 8005bf4:	08006928 	.word	0x08006928
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	08005967 	.word	0x08005967

08005c00 <_printf_common>:
 8005c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c02:	0015      	movs	r5, r2
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	688a      	ldr	r2, [r1, #8]
 8005c08:	690b      	ldr	r3, [r1, #16]
 8005c0a:	000c      	movs	r4, r1
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	da00      	bge.n	8005c14 <_printf_common+0x14>
 8005c12:	0013      	movs	r3, r2
 8005c14:	0022      	movs	r2, r4
 8005c16:	602b      	str	r3, [r5, #0]
 8005c18:	3243      	adds	r2, #67	; 0x43
 8005c1a:	7812      	ldrb	r2, [r2, #0]
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	d001      	beq.n	8005c24 <_printf_common+0x24>
 8005c20:	3301      	adds	r3, #1
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	069b      	lsls	r3, r3, #26
 8005c28:	d502      	bpl.n	8005c30 <_printf_common+0x30>
 8005c2a:	682b      	ldr	r3, [r5, #0]
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	2306      	movs	r3, #6
 8005c34:	0017      	movs	r7, r2
 8005c36:	401f      	ands	r7, r3
 8005c38:	421a      	tst	r2, r3
 8005c3a:	d027      	beq.n	8005c8c <_printf_common+0x8c>
 8005c3c:	0023      	movs	r3, r4
 8005c3e:	3343      	adds	r3, #67	; 0x43
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	1e5a      	subs	r2, r3, #1
 8005c44:	4193      	sbcs	r3, r2
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	0692      	lsls	r2, r2, #26
 8005c4a:	d430      	bmi.n	8005cae <_printf_common+0xae>
 8005c4c:	0022      	movs	r2, r4
 8005c4e:	9901      	ldr	r1, [sp, #4]
 8005c50:	9800      	ldr	r0, [sp, #0]
 8005c52:	9e08      	ldr	r6, [sp, #32]
 8005c54:	3243      	adds	r2, #67	; 0x43
 8005c56:	47b0      	blx	r6
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d025      	beq.n	8005ca8 <_printf_common+0xa8>
 8005c5c:	2306      	movs	r3, #6
 8005c5e:	6820      	ldr	r0, [r4, #0]
 8005c60:	682a      	ldr	r2, [r5, #0]
 8005c62:	68e1      	ldr	r1, [r4, #12]
 8005c64:	2500      	movs	r5, #0
 8005c66:	4003      	ands	r3, r0
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d103      	bne.n	8005c74 <_printf_common+0x74>
 8005c6c:	1a8d      	subs	r5, r1, r2
 8005c6e:	43eb      	mvns	r3, r5
 8005c70:	17db      	asrs	r3, r3, #31
 8005c72:	401d      	ands	r5, r3
 8005c74:	68a3      	ldr	r3, [r4, #8]
 8005c76:	6922      	ldr	r2, [r4, #16]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	dd01      	ble.n	8005c80 <_printf_common+0x80>
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	18ed      	adds	r5, r5, r3
 8005c80:	2700      	movs	r7, #0
 8005c82:	42bd      	cmp	r5, r7
 8005c84:	d120      	bne.n	8005cc8 <_printf_common+0xc8>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e010      	b.n	8005cac <_printf_common+0xac>
 8005c8a:	3701      	adds	r7, #1
 8005c8c:	68e3      	ldr	r3, [r4, #12]
 8005c8e:	682a      	ldr	r2, [r5, #0]
 8005c90:	1a9b      	subs	r3, r3, r2
 8005c92:	42bb      	cmp	r3, r7
 8005c94:	ddd2      	ble.n	8005c3c <_printf_common+0x3c>
 8005c96:	0022      	movs	r2, r4
 8005c98:	2301      	movs	r3, #1
 8005c9a:	9901      	ldr	r1, [sp, #4]
 8005c9c:	9800      	ldr	r0, [sp, #0]
 8005c9e:	9e08      	ldr	r6, [sp, #32]
 8005ca0:	3219      	adds	r2, #25
 8005ca2:	47b0      	blx	r6
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d1f0      	bne.n	8005c8a <_printf_common+0x8a>
 8005ca8:	2001      	movs	r0, #1
 8005caa:	4240      	negs	r0, r0
 8005cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cae:	2030      	movs	r0, #48	; 0x30
 8005cb0:	18e1      	adds	r1, r4, r3
 8005cb2:	3143      	adds	r1, #67	; 0x43
 8005cb4:	7008      	strb	r0, [r1, #0]
 8005cb6:	0021      	movs	r1, r4
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	3145      	adds	r1, #69	; 0x45
 8005cbc:	7809      	ldrb	r1, [r1, #0]
 8005cbe:	18a2      	adds	r2, r4, r2
 8005cc0:	3243      	adds	r2, #67	; 0x43
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	7011      	strb	r1, [r2, #0]
 8005cc6:	e7c1      	b.n	8005c4c <_printf_common+0x4c>
 8005cc8:	0022      	movs	r2, r4
 8005cca:	2301      	movs	r3, #1
 8005ccc:	9901      	ldr	r1, [sp, #4]
 8005cce:	9800      	ldr	r0, [sp, #0]
 8005cd0:	9e08      	ldr	r6, [sp, #32]
 8005cd2:	321a      	adds	r2, #26
 8005cd4:	47b0      	blx	r6
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	d0e6      	beq.n	8005ca8 <_printf_common+0xa8>
 8005cda:	3701      	adds	r7, #1
 8005cdc:	e7d1      	b.n	8005c82 <_printf_common+0x82>
	...

08005ce0 <_printf_i>:
 8005ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce2:	b08b      	sub	sp, #44	; 0x2c
 8005ce4:	9206      	str	r2, [sp, #24]
 8005ce6:	000a      	movs	r2, r1
 8005ce8:	3243      	adds	r2, #67	; 0x43
 8005cea:	9307      	str	r3, [sp, #28]
 8005cec:	9005      	str	r0, [sp, #20]
 8005cee:	9204      	str	r2, [sp, #16]
 8005cf0:	7e0a      	ldrb	r2, [r1, #24]
 8005cf2:	000c      	movs	r4, r1
 8005cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cf6:	2a78      	cmp	r2, #120	; 0x78
 8005cf8:	d807      	bhi.n	8005d0a <_printf_i+0x2a>
 8005cfa:	2a62      	cmp	r2, #98	; 0x62
 8005cfc:	d809      	bhi.n	8005d12 <_printf_i+0x32>
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	d100      	bne.n	8005d04 <_printf_i+0x24>
 8005d02:	e0c1      	b.n	8005e88 <_printf_i+0x1a8>
 8005d04:	2a58      	cmp	r2, #88	; 0x58
 8005d06:	d100      	bne.n	8005d0a <_printf_i+0x2a>
 8005d08:	e08c      	b.n	8005e24 <_printf_i+0x144>
 8005d0a:	0026      	movs	r6, r4
 8005d0c:	3642      	adds	r6, #66	; 0x42
 8005d0e:	7032      	strb	r2, [r6, #0]
 8005d10:	e022      	b.n	8005d58 <_printf_i+0x78>
 8005d12:	0010      	movs	r0, r2
 8005d14:	3863      	subs	r0, #99	; 0x63
 8005d16:	2815      	cmp	r0, #21
 8005d18:	d8f7      	bhi.n	8005d0a <_printf_i+0x2a>
 8005d1a:	f7fa f9f3 	bl	8000104 <__gnu_thumb1_case_shi>
 8005d1e:	0016      	.short	0x0016
 8005d20:	fff6001f 	.word	0xfff6001f
 8005d24:	fff6fff6 	.word	0xfff6fff6
 8005d28:	001ffff6 	.word	0x001ffff6
 8005d2c:	fff6fff6 	.word	0xfff6fff6
 8005d30:	fff6fff6 	.word	0xfff6fff6
 8005d34:	003600a8 	.word	0x003600a8
 8005d38:	fff6009a 	.word	0xfff6009a
 8005d3c:	00b9fff6 	.word	0x00b9fff6
 8005d40:	0036fff6 	.word	0x0036fff6
 8005d44:	fff6fff6 	.word	0xfff6fff6
 8005d48:	009e      	.short	0x009e
 8005d4a:	0026      	movs	r6, r4
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	3642      	adds	r6, #66	; 0x42
 8005d50:	1d11      	adds	r1, r2, #4
 8005d52:	6019      	str	r1, [r3, #0]
 8005d54:	6813      	ldr	r3, [r2, #0]
 8005d56:	7033      	strb	r3, [r6, #0]
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0a7      	b.n	8005eac <_printf_i+0x1cc>
 8005d5c:	6808      	ldr	r0, [r1, #0]
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	1d0a      	adds	r2, r1, #4
 8005d62:	0605      	lsls	r5, r0, #24
 8005d64:	d50b      	bpl.n	8005d7e <_printf_i+0x9e>
 8005d66:	680d      	ldr	r5, [r1, #0]
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	da03      	bge.n	8005d76 <_printf_i+0x96>
 8005d6e:	232d      	movs	r3, #45	; 0x2d
 8005d70:	9a04      	ldr	r2, [sp, #16]
 8005d72:	426d      	negs	r5, r5
 8005d74:	7013      	strb	r3, [r2, #0]
 8005d76:	4b61      	ldr	r3, [pc, #388]	; (8005efc <_printf_i+0x21c>)
 8005d78:	270a      	movs	r7, #10
 8005d7a:	9303      	str	r3, [sp, #12]
 8005d7c:	e01b      	b.n	8005db6 <_printf_i+0xd6>
 8005d7e:	680d      	ldr	r5, [r1, #0]
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	0641      	lsls	r1, r0, #25
 8005d84:	d5f1      	bpl.n	8005d6a <_printf_i+0x8a>
 8005d86:	b22d      	sxth	r5, r5
 8005d88:	e7ef      	b.n	8005d6a <_printf_i+0x8a>
 8005d8a:	680d      	ldr	r5, [r1, #0]
 8005d8c:	6819      	ldr	r1, [r3, #0]
 8005d8e:	1d08      	adds	r0, r1, #4
 8005d90:	6018      	str	r0, [r3, #0]
 8005d92:	062e      	lsls	r6, r5, #24
 8005d94:	d501      	bpl.n	8005d9a <_printf_i+0xba>
 8005d96:	680d      	ldr	r5, [r1, #0]
 8005d98:	e003      	b.n	8005da2 <_printf_i+0xc2>
 8005d9a:	066d      	lsls	r5, r5, #25
 8005d9c:	d5fb      	bpl.n	8005d96 <_printf_i+0xb6>
 8005d9e:	680d      	ldr	r5, [r1, #0]
 8005da0:	b2ad      	uxth	r5, r5
 8005da2:	4b56      	ldr	r3, [pc, #344]	; (8005efc <_printf_i+0x21c>)
 8005da4:	2708      	movs	r7, #8
 8005da6:	9303      	str	r3, [sp, #12]
 8005da8:	2a6f      	cmp	r2, #111	; 0x6f
 8005daa:	d000      	beq.n	8005dae <_printf_i+0xce>
 8005dac:	3702      	adds	r7, #2
 8005dae:	0023      	movs	r3, r4
 8005db0:	2200      	movs	r2, #0
 8005db2:	3343      	adds	r3, #67	; 0x43
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	6863      	ldr	r3, [r4, #4]
 8005db8:	60a3      	str	r3, [r4, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	db03      	blt.n	8005dc6 <_printf_i+0xe6>
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	6821      	ldr	r1, [r4, #0]
 8005dc2:	4391      	bics	r1, r2
 8005dc4:	6021      	str	r1, [r4, #0]
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	d102      	bne.n	8005dd0 <_printf_i+0xf0>
 8005dca:	9e04      	ldr	r6, [sp, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00c      	beq.n	8005dea <_printf_i+0x10a>
 8005dd0:	9e04      	ldr	r6, [sp, #16]
 8005dd2:	0028      	movs	r0, r5
 8005dd4:	0039      	movs	r1, r7
 8005dd6:	f7fa fa25 	bl	8000224 <__aeabi_uidivmod>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	3e01      	subs	r6, #1
 8005dde:	5c5b      	ldrb	r3, [r3, r1]
 8005de0:	7033      	strb	r3, [r6, #0]
 8005de2:	002b      	movs	r3, r5
 8005de4:	0005      	movs	r5, r0
 8005de6:	429f      	cmp	r7, r3
 8005de8:	d9f3      	bls.n	8005dd2 <_printf_i+0xf2>
 8005dea:	2f08      	cmp	r7, #8
 8005dec:	d109      	bne.n	8005e02 <_printf_i+0x122>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	07db      	lsls	r3, r3, #31
 8005df2:	d506      	bpl.n	8005e02 <_printf_i+0x122>
 8005df4:	6863      	ldr	r3, [r4, #4]
 8005df6:	6922      	ldr	r2, [r4, #16]
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	dc02      	bgt.n	8005e02 <_printf_i+0x122>
 8005dfc:	2330      	movs	r3, #48	; 0x30
 8005dfe:	3e01      	subs	r6, #1
 8005e00:	7033      	strb	r3, [r6, #0]
 8005e02:	9b04      	ldr	r3, [sp, #16]
 8005e04:	1b9b      	subs	r3, r3, r6
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	9b07      	ldr	r3, [sp, #28]
 8005e0a:	0021      	movs	r1, r4
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	9805      	ldr	r0, [sp, #20]
 8005e10:	9b06      	ldr	r3, [sp, #24]
 8005e12:	aa09      	add	r2, sp, #36	; 0x24
 8005e14:	f7ff fef4 	bl	8005c00 <_printf_common>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d14c      	bne.n	8005eb6 <_printf_i+0x1d6>
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	4240      	negs	r0, r0
 8005e20:	b00b      	add	sp, #44	; 0x2c
 8005e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e24:	3145      	adds	r1, #69	; 0x45
 8005e26:	700a      	strb	r2, [r1, #0]
 8005e28:	4a34      	ldr	r2, [pc, #208]	; (8005efc <_printf_i+0x21c>)
 8005e2a:	9203      	str	r2, [sp, #12]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	6821      	ldr	r1, [r4, #0]
 8005e30:	ca20      	ldmia	r2!, {r5}
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	0608      	lsls	r0, r1, #24
 8005e36:	d516      	bpl.n	8005e66 <_printf_i+0x186>
 8005e38:	07cb      	lsls	r3, r1, #31
 8005e3a:	d502      	bpl.n	8005e42 <_printf_i+0x162>
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	4319      	orrs	r1, r3
 8005e40:	6021      	str	r1, [r4, #0]
 8005e42:	2710      	movs	r7, #16
 8005e44:	2d00      	cmp	r5, #0
 8005e46:	d1b2      	bne.n	8005dae <_printf_i+0xce>
 8005e48:	2320      	movs	r3, #32
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	439a      	bics	r2, r3
 8005e4e:	6022      	str	r2, [r4, #0]
 8005e50:	e7ad      	b.n	8005dae <_printf_i+0xce>
 8005e52:	2220      	movs	r2, #32
 8005e54:	6809      	ldr	r1, [r1, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	6022      	str	r2, [r4, #0]
 8005e5a:	0022      	movs	r2, r4
 8005e5c:	2178      	movs	r1, #120	; 0x78
 8005e5e:	3245      	adds	r2, #69	; 0x45
 8005e60:	7011      	strb	r1, [r2, #0]
 8005e62:	4a27      	ldr	r2, [pc, #156]	; (8005f00 <_printf_i+0x220>)
 8005e64:	e7e1      	b.n	8005e2a <_printf_i+0x14a>
 8005e66:	0648      	lsls	r0, r1, #25
 8005e68:	d5e6      	bpl.n	8005e38 <_printf_i+0x158>
 8005e6a:	b2ad      	uxth	r5, r5
 8005e6c:	e7e4      	b.n	8005e38 <_printf_i+0x158>
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	680d      	ldr	r5, [r1, #0]
 8005e72:	1d10      	adds	r0, r2, #4
 8005e74:	6949      	ldr	r1, [r1, #20]
 8005e76:	6018      	str	r0, [r3, #0]
 8005e78:	6813      	ldr	r3, [r2, #0]
 8005e7a:	062e      	lsls	r6, r5, #24
 8005e7c:	d501      	bpl.n	8005e82 <_printf_i+0x1a2>
 8005e7e:	6019      	str	r1, [r3, #0]
 8005e80:	e002      	b.n	8005e88 <_printf_i+0x1a8>
 8005e82:	066d      	lsls	r5, r5, #25
 8005e84:	d5fb      	bpl.n	8005e7e <_printf_i+0x19e>
 8005e86:	8019      	strh	r1, [r3, #0]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9e04      	ldr	r6, [sp, #16]
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	e7bb      	b.n	8005e08 <_printf_i+0x128>
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	1d11      	adds	r1, r2, #4
 8005e94:	6019      	str	r1, [r3, #0]
 8005e96:	6816      	ldr	r6, [r2, #0]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	0030      	movs	r0, r6
 8005e9c:	6862      	ldr	r2, [r4, #4]
 8005e9e:	f000 fb57 	bl	8006550 <memchr>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d001      	beq.n	8005eaa <_printf_i+0x1ca>
 8005ea6:	1b80      	subs	r0, r0, r6
 8005ea8:	6060      	str	r0, [r4, #4]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9a04      	ldr	r2, [sp, #16]
 8005eb2:	7013      	strb	r3, [r2, #0]
 8005eb4:	e7a8      	b.n	8005e08 <_printf_i+0x128>
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	0032      	movs	r2, r6
 8005eba:	9906      	ldr	r1, [sp, #24]
 8005ebc:	9805      	ldr	r0, [sp, #20]
 8005ebe:	9d07      	ldr	r5, [sp, #28]
 8005ec0:	47a8      	blx	r5
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	d0aa      	beq.n	8005e1c <_printf_i+0x13c>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	079b      	lsls	r3, r3, #30
 8005eca:	d415      	bmi.n	8005ef8 <_printf_i+0x218>
 8005ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ece:	68e0      	ldr	r0, [r4, #12]
 8005ed0:	4298      	cmp	r0, r3
 8005ed2:	daa5      	bge.n	8005e20 <_printf_i+0x140>
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	e7a3      	b.n	8005e20 <_printf_i+0x140>
 8005ed8:	0022      	movs	r2, r4
 8005eda:	2301      	movs	r3, #1
 8005edc:	9906      	ldr	r1, [sp, #24]
 8005ede:	9805      	ldr	r0, [sp, #20]
 8005ee0:	9e07      	ldr	r6, [sp, #28]
 8005ee2:	3219      	adds	r2, #25
 8005ee4:	47b0      	blx	r6
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d098      	beq.n	8005e1c <_printf_i+0x13c>
 8005eea:	3501      	adds	r5, #1
 8005eec:	68e3      	ldr	r3, [r4, #12]
 8005eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	42ab      	cmp	r3, r5
 8005ef4:	dcf0      	bgt.n	8005ed8 <_printf_i+0x1f8>
 8005ef6:	e7e9      	b.n	8005ecc <_printf_i+0x1ec>
 8005ef8:	2500      	movs	r5, #0
 8005efa:	e7f7      	b.n	8005eec <_printf_i+0x20c>
 8005efc:	0800692f 	.word	0x0800692f
 8005f00:	08006940 	.word	0x08006940

08005f04 <_sbrk_r>:
 8005f04:	2300      	movs	r3, #0
 8005f06:	b570      	push	{r4, r5, r6, lr}
 8005f08:	4d06      	ldr	r5, [pc, #24]	; (8005f24 <_sbrk_r+0x20>)
 8005f0a:	0004      	movs	r4, r0
 8005f0c:	0008      	movs	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fd f98a 	bl	8003228 <_sbrk>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d103      	bne.n	8005f20 <_sbrk_r+0x1c>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d000      	beq.n	8005f20 <_sbrk_r+0x1c>
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	200001b0 	.word	0x200001b0

08005f28 <__swbuf_r>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	0005      	movs	r5, r0
 8005f2c:	000e      	movs	r6, r1
 8005f2e:	0014      	movs	r4, r2
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d004      	beq.n	8005f3e <__swbuf_r+0x16>
 8005f34:	6983      	ldr	r3, [r0, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <__swbuf_r+0x16>
 8005f3a:	f000 f9f9 	bl	8006330 <__sinit>
 8005f3e:	4b22      	ldr	r3, [pc, #136]	; (8005fc8 <__swbuf_r+0xa0>)
 8005f40:	429c      	cmp	r4, r3
 8005f42:	d12e      	bne.n	8005fa2 <__swbuf_r+0x7a>
 8005f44:	686c      	ldr	r4, [r5, #4]
 8005f46:	69a3      	ldr	r3, [r4, #24]
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	89a3      	ldrh	r3, [r4, #12]
 8005f4c:	071b      	lsls	r3, r3, #28
 8005f4e:	d532      	bpl.n	8005fb6 <__swbuf_r+0x8e>
 8005f50:	6923      	ldr	r3, [r4, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d02f      	beq.n	8005fb6 <__swbuf_r+0x8e>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	b2f7      	uxtb	r7, r6
 8005f5c:	1a98      	subs	r0, r3, r2
 8005f5e:	6963      	ldr	r3, [r4, #20]
 8005f60:	b2f6      	uxtb	r6, r6
 8005f62:	4283      	cmp	r3, r0
 8005f64:	dc05      	bgt.n	8005f72 <__swbuf_r+0x4a>
 8005f66:	0021      	movs	r1, r4
 8005f68:	0028      	movs	r0, r5
 8005f6a:	f000 f93f 	bl	80061ec <_fflush_r>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d127      	bne.n	8005fc2 <__swbuf_r+0x9a>
 8005f72:	68a3      	ldr	r3, [r4, #8]
 8005f74:	3001      	adds	r0, #1
 8005f76:	3b01      	subs	r3, #1
 8005f78:	60a3      	str	r3, [r4, #8]
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	6022      	str	r2, [r4, #0]
 8005f80:	701f      	strb	r7, [r3, #0]
 8005f82:	6963      	ldr	r3, [r4, #20]
 8005f84:	4283      	cmp	r3, r0
 8005f86:	d004      	beq.n	8005f92 <__swbuf_r+0x6a>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	07db      	lsls	r3, r3, #31
 8005f8c:	d507      	bpl.n	8005f9e <__swbuf_r+0x76>
 8005f8e:	2e0a      	cmp	r6, #10
 8005f90:	d105      	bne.n	8005f9e <__swbuf_r+0x76>
 8005f92:	0021      	movs	r1, r4
 8005f94:	0028      	movs	r0, r5
 8005f96:	f000 f929 	bl	80061ec <_fflush_r>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d111      	bne.n	8005fc2 <__swbuf_r+0x9a>
 8005f9e:	0030      	movs	r0, r6
 8005fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <__swbuf_r+0xa4>)
 8005fa4:	429c      	cmp	r4, r3
 8005fa6:	d101      	bne.n	8005fac <__swbuf_r+0x84>
 8005fa8:	68ac      	ldr	r4, [r5, #8]
 8005faa:	e7cc      	b.n	8005f46 <__swbuf_r+0x1e>
 8005fac:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <__swbuf_r+0xa8>)
 8005fae:	429c      	cmp	r4, r3
 8005fb0:	d1c9      	bne.n	8005f46 <__swbuf_r+0x1e>
 8005fb2:	68ec      	ldr	r4, [r5, #12]
 8005fb4:	e7c7      	b.n	8005f46 <__swbuf_r+0x1e>
 8005fb6:	0021      	movs	r1, r4
 8005fb8:	0028      	movs	r0, r5
 8005fba:	f000 f80b 	bl	8005fd4 <__swsetup_r>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d0c9      	beq.n	8005f56 <__swbuf_r+0x2e>
 8005fc2:	2601      	movs	r6, #1
 8005fc4:	4276      	negs	r6, r6
 8005fc6:	e7ea      	b.n	8005f9e <__swbuf_r+0x76>
 8005fc8:	08006974 	.word	0x08006974
 8005fcc:	08006994 	.word	0x08006994
 8005fd0:	08006954 	.word	0x08006954

08005fd4 <__swsetup_r>:
 8005fd4:	4b37      	ldr	r3, [pc, #220]	; (80060b4 <__swsetup_r+0xe0>)
 8005fd6:	b570      	push	{r4, r5, r6, lr}
 8005fd8:	681d      	ldr	r5, [r3, #0]
 8005fda:	0006      	movs	r6, r0
 8005fdc:	000c      	movs	r4, r1
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	d005      	beq.n	8005fee <__swsetup_r+0x1a>
 8005fe2:	69ab      	ldr	r3, [r5, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <__swsetup_r+0x1a>
 8005fe8:	0028      	movs	r0, r5
 8005fea:	f000 f9a1 	bl	8006330 <__sinit>
 8005fee:	4b32      	ldr	r3, [pc, #200]	; (80060b8 <__swsetup_r+0xe4>)
 8005ff0:	429c      	cmp	r4, r3
 8005ff2:	d10f      	bne.n	8006014 <__swsetup_r+0x40>
 8005ff4:	686c      	ldr	r4, [r5, #4]
 8005ff6:	230c      	movs	r3, #12
 8005ff8:	5ee2      	ldrsh	r2, [r4, r3]
 8005ffa:	b293      	uxth	r3, r2
 8005ffc:	0711      	lsls	r1, r2, #28
 8005ffe:	d42d      	bmi.n	800605c <__swsetup_r+0x88>
 8006000:	06d9      	lsls	r1, r3, #27
 8006002:	d411      	bmi.n	8006028 <__swsetup_r+0x54>
 8006004:	2309      	movs	r3, #9
 8006006:	2001      	movs	r0, #1
 8006008:	6033      	str	r3, [r6, #0]
 800600a:	3337      	adds	r3, #55	; 0x37
 800600c:	4313      	orrs	r3, r2
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	4240      	negs	r0, r0
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	4b29      	ldr	r3, [pc, #164]	; (80060bc <__swsetup_r+0xe8>)
 8006016:	429c      	cmp	r4, r3
 8006018:	d101      	bne.n	800601e <__swsetup_r+0x4a>
 800601a:	68ac      	ldr	r4, [r5, #8]
 800601c:	e7eb      	b.n	8005ff6 <__swsetup_r+0x22>
 800601e:	4b28      	ldr	r3, [pc, #160]	; (80060c0 <__swsetup_r+0xec>)
 8006020:	429c      	cmp	r4, r3
 8006022:	d1e8      	bne.n	8005ff6 <__swsetup_r+0x22>
 8006024:	68ec      	ldr	r4, [r5, #12]
 8006026:	e7e6      	b.n	8005ff6 <__swsetup_r+0x22>
 8006028:	075b      	lsls	r3, r3, #29
 800602a:	d513      	bpl.n	8006054 <__swsetup_r+0x80>
 800602c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800602e:	2900      	cmp	r1, #0
 8006030:	d008      	beq.n	8006044 <__swsetup_r+0x70>
 8006032:	0023      	movs	r3, r4
 8006034:	3344      	adds	r3, #68	; 0x44
 8006036:	4299      	cmp	r1, r3
 8006038:	d002      	beq.n	8006040 <__swsetup_r+0x6c>
 800603a:	0030      	movs	r0, r6
 800603c:	f7ff fb9c 	bl	8005778 <_free_r>
 8006040:	2300      	movs	r3, #0
 8006042:	6363      	str	r3, [r4, #52]	; 0x34
 8006044:	2224      	movs	r2, #36	; 0x24
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	4393      	bics	r3, r2
 800604a:	81a3      	strh	r3, [r4, #12]
 800604c:	2300      	movs	r3, #0
 800604e:	6063      	str	r3, [r4, #4]
 8006050:	6923      	ldr	r3, [r4, #16]
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	2308      	movs	r3, #8
 8006056:	89a2      	ldrh	r2, [r4, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	81a3      	strh	r3, [r4, #12]
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <__swsetup_r+0xa6>
 8006062:	21a0      	movs	r1, #160	; 0xa0
 8006064:	2280      	movs	r2, #128	; 0x80
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	0089      	lsls	r1, r1, #2
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	400b      	ands	r3, r1
 800606e:	4293      	cmp	r3, r2
 8006070:	d003      	beq.n	800607a <__swsetup_r+0xa6>
 8006072:	0021      	movs	r1, r4
 8006074:	0030      	movs	r0, r6
 8006076:	f000 fa27 	bl	80064c8 <__smakebuf_r>
 800607a:	220c      	movs	r2, #12
 800607c:	5ea3      	ldrsh	r3, [r4, r2]
 800607e:	2001      	movs	r0, #1
 8006080:	001a      	movs	r2, r3
 8006082:	b299      	uxth	r1, r3
 8006084:	4002      	ands	r2, r0
 8006086:	4203      	tst	r3, r0
 8006088:	d00f      	beq.n	80060aa <__swsetup_r+0xd6>
 800608a:	2200      	movs	r2, #0
 800608c:	60a2      	str	r2, [r4, #8]
 800608e:	6962      	ldr	r2, [r4, #20]
 8006090:	4252      	negs	r2, r2
 8006092:	61a2      	str	r2, [r4, #24]
 8006094:	2000      	movs	r0, #0
 8006096:	6922      	ldr	r2, [r4, #16]
 8006098:	4282      	cmp	r2, r0
 800609a:	d1ba      	bne.n	8006012 <__swsetup_r+0x3e>
 800609c:	060a      	lsls	r2, r1, #24
 800609e:	d5b8      	bpl.n	8006012 <__swsetup_r+0x3e>
 80060a0:	2240      	movs	r2, #64	; 0x40
 80060a2:	4313      	orrs	r3, r2
 80060a4:	81a3      	strh	r3, [r4, #12]
 80060a6:	3801      	subs	r0, #1
 80060a8:	e7b3      	b.n	8006012 <__swsetup_r+0x3e>
 80060aa:	0788      	lsls	r0, r1, #30
 80060ac:	d400      	bmi.n	80060b0 <__swsetup_r+0xdc>
 80060ae:	6962      	ldr	r2, [r4, #20]
 80060b0:	60a2      	str	r2, [r4, #8]
 80060b2:	e7ef      	b.n	8006094 <__swsetup_r+0xc0>
 80060b4:	2000008c 	.word	0x2000008c
 80060b8:	08006974 	.word	0x08006974
 80060bc:	08006994 	.word	0x08006994
 80060c0:	08006954 	.word	0x08006954

080060c4 <abort>:
 80060c4:	2006      	movs	r0, #6
 80060c6:	b510      	push	{r4, lr}
 80060c8:	f000 fa88 	bl	80065dc <raise>
 80060cc:	2001      	movs	r0, #1
 80060ce:	f7fd f83a 	bl	8003146 <_exit>
	...

080060d4 <__sflush_r>:
 80060d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060d6:	898b      	ldrh	r3, [r1, #12]
 80060d8:	0005      	movs	r5, r0
 80060da:	000c      	movs	r4, r1
 80060dc:	071a      	lsls	r2, r3, #28
 80060de:	d45f      	bmi.n	80061a0 <__sflush_r+0xcc>
 80060e0:	684a      	ldr	r2, [r1, #4]
 80060e2:	2a00      	cmp	r2, #0
 80060e4:	dc04      	bgt.n	80060f0 <__sflush_r+0x1c>
 80060e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80060e8:	2a00      	cmp	r2, #0
 80060ea:	dc01      	bgt.n	80060f0 <__sflush_r+0x1c>
 80060ec:	2000      	movs	r0, #0
 80060ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80060f2:	2f00      	cmp	r7, #0
 80060f4:	d0fa      	beq.n	80060ec <__sflush_r+0x18>
 80060f6:	2200      	movs	r2, #0
 80060f8:	2180      	movs	r1, #128	; 0x80
 80060fa:	682e      	ldr	r6, [r5, #0]
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	001a      	movs	r2, r3
 8006100:	0149      	lsls	r1, r1, #5
 8006102:	400a      	ands	r2, r1
 8006104:	420b      	tst	r3, r1
 8006106:	d034      	beq.n	8006172 <__sflush_r+0x9e>
 8006108:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	075b      	lsls	r3, r3, #29
 800610e:	d506      	bpl.n	800611e <__sflush_r+0x4a>
 8006110:	6863      	ldr	r3, [r4, #4]
 8006112:	1ac0      	subs	r0, r0, r3
 8006114:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <__sflush_r+0x4a>
 800611a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800611c:	1ac0      	subs	r0, r0, r3
 800611e:	0002      	movs	r2, r0
 8006120:	6a21      	ldr	r1, [r4, #32]
 8006122:	2300      	movs	r3, #0
 8006124:	0028      	movs	r0, r5
 8006126:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006128:	47b8      	blx	r7
 800612a:	89a1      	ldrh	r1, [r4, #12]
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d106      	bne.n	800613e <__sflush_r+0x6a>
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	2b1d      	cmp	r3, #29
 8006134:	d831      	bhi.n	800619a <__sflush_r+0xc6>
 8006136:	4a2c      	ldr	r2, [pc, #176]	; (80061e8 <__sflush_r+0x114>)
 8006138:	40da      	lsrs	r2, r3
 800613a:	07d3      	lsls	r3, r2, #31
 800613c:	d52d      	bpl.n	800619a <__sflush_r+0xc6>
 800613e:	2300      	movs	r3, #0
 8006140:	6063      	str	r3, [r4, #4]
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	04cb      	lsls	r3, r1, #19
 8006148:	d505      	bpl.n	8006156 <__sflush_r+0x82>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	d102      	bne.n	8006154 <__sflush_r+0x80>
 800614e:	682b      	ldr	r3, [r5, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d100      	bne.n	8006156 <__sflush_r+0x82>
 8006154:	6560      	str	r0, [r4, #84]	; 0x54
 8006156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006158:	602e      	str	r6, [r5, #0]
 800615a:	2900      	cmp	r1, #0
 800615c:	d0c6      	beq.n	80060ec <__sflush_r+0x18>
 800615e:	0023      	movs	r3, r4
 8006160:	3344      	adds	r3, #68	; 0x44
 8006162:	4299      	cmp	r1, r3
 8006164:	d002      	beq.n	800616c <__sflush_r+0x98>
 8006166:	0028      	movs	r0, r5
 8006168:	f7ff fb06 	bl	8005778 <_free_r>
 800616c:	2000      	movs	r0, #0
 800616e:	6360      	str	r0, [r4, #52]	; 0x34
 8006170:	e7bd      	b.n	80060ee <__sflush_r+0x1a>
 8006172:	2301      	movs	r3, #1
 8006174:	0028      	movs	r0, r5
 8006176:	6a21      	ldr	r1, [r4, #32]
 8006178:	47b8      	blx	r7
 800617a:	1c43      	adds	r3, r0, #1
 800617c:	d1c5      	bne.n	800610a <__sflush_r+0x36>
 800617e:	682b      	ldr	r3, [r5, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0c2      	beq.n	800610a <__sflush_r+0x36>
 8006184:	2b1d      	cmp	r3, #29
 8006186:	d001      	beq.n	800618c <__sflush_r+0xb8>
 8006188:	2b16      	cmp	r3, #22
 800618a:	d101      	bne.n	8006190 <__sflush_r+0xbc>
 800618c:	602e      	str	r6, [r5, #0]
 800618e:	e7ad      	b.n	80060ec <__sflush_r+0x18>
 8006190:	2340      	movs	r3, #64	; 0x40
 8006192:	89a2      	ldrh	r2, [r4, #12]
 8006194:	4313      	orrs	r3, r2
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	e7a9      	b.n	80060ee <__sflush_r+0x1a>
 800619a:	2340      	movs	r3, #64	; 0x40
 800619c:	430b      	orrs	r3, r1
 800619e:	e7fa      	b.n	8006196 <__sflush_r+0xc2>
 80061a0:	690f      	ldr	r7, [r1, #16]
 80061a2:	2f00      	cmp	r7, #0
 80061a4:	d0a2      	beq.n	80060ec <__sflush_r+0x18>
 80061a6:	680a      	ldr	r2, [r1, #0]
 80061a8:	600f      	str	r7, [r1, #0]
 80061aa:	1bd2      	subs	r2, r2, r7
 80061ac:	9201      	str	r2, [sp, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	079b      	lsls	r3, r3, #30
 80061b2:	d100      	bne.n	80061b6 <__sflush_r+0xe2>
 80061b4:	694a      	ldr	r2, [r1, #20]
 80061b6:	60a2      	str	r2, [r4, #8]
 80061b8:	9b01      	ldr	r3, [sp, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dc00      	bgt.n	80061c0 <__sflush_r+0xec>
 80061be:	e795      	b.n	80060ec <__sflush_r+0x18>
 80061c0:	003a      	movs	r2, r7
 80061c2:	0028      	movs	r0, r5
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	6a21      	ldr	r1, [r4, #32]
 80061c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061ca:	47b0      	blx	r6
 80061cc:	2800      	cmp	r0, #0
 80061ce:	dc06      	bgt.n	80061de <__sflush_r+0x10a>
 80061d0:	2340      	movs	r3, #64	; 0x40
 80061d2:	2001      	movs	r0, #1
 80061d4:	89a2      	ldrh	r2, [r4, #12]
 80061d6:	4240      	negs	r0, r0
 80061d8:	4313      	orrs	r3, r2
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	e787      	b.n	80060ee <__sflush_r+0x1a>
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	183f      	adds	r7, r7, r0
 80061e2:	1a1b      	subs	r3, r3, r0
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	e7e7      	b.n	80061b8 <__sflush_r+0xe4>
 80061e8:	20400001 	.word	0x20400001

080061ec <_fflush_r>:
 80061ec:	690b      	ldr	r3, [r1, #16]
 80061ee:	b570      	push	{r4, r5, r6, lr}
 80061f0:	0005      	movs	r5, r0
 80061f2:	000c      	movs	r4, r1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <_fflush_r+0x12>
 80061f8:	2500      	movs	r5, #0
 80061fa:	0028      	movs	r0, r5
 80061fc:	bd70      	pop	{r4, r5, r6, pc}
 80061fe:	2800      	cmp	r0, #0
 8006200:	d004      	beq.n	800620c <_fflush_r+0x20>
 8006202:	6983      	ldr	r3, [r0, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <_fflush_r+0x20>
 8006208:	f000 f892 	bl	8006330 <__sinit>
 800620c:	4b14      	ldr	r3, [pc, #80]	; (8006260 <_fflush_r+0x74>)
 800620e:	429c      	cmp	r4, r3
 8006210:	d11b      	bne.n	800624a <_fflush_r+0x5e>
 8006212:	686c      	ldr	r4, [r5, #4]
 8006214:	220c      	movs	r2, #12
 8006216:	5ea3      	ldrsh	r3, [r4, r2]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0ed      	beq.n	80061f8 <_fflush_r+0xc>
 800621c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800621e:	07d2      	lsls	r2, r2, #31
 8006220:	d404      	bmi.n	800622c <_fflush_r+0x40>
 8006222:	059b      	lsls	r3, r3, #22
 8006224:	d402      	bmi.n	800622c <_fflush_r+0x40>
 8006226:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006228:	f000 f923 	bl	8006472 <__retarget_lock_acquire_recursive>
 800622c:	0028      	movs	r0, r5
 800622e:	0021      	movs	r1, r4
 8006230:	f7ff ff50 	bl	80060d4 <__sflush_r>
 8006234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006236:	0005      	movs	r5, r0
 8006238:	07db      	lsls	r3, r3, #31
 800623a:	d4de      	bmi.n	80061fa <_fflush_r+0xe>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	059b      	lsls	r3, r3, #22
 8006240:	d4db      	bmi.n	80061fa <_fflush_r+0xe>
 8006242:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006244:	f000 f916 	bl	8006474 <__retarget_lock_release_recursive>
 8006248:	e7d7      	b.n	80061fa <_fflush_r+0xe>
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <_fflush_r+0x78>)
 800624c:	429c      	cmp	r4, r3
 800624e:	d101      	bne.n	8006254 <_fflush_r+0x68>
 8006250:	68ac      	ldr	r4, [r5, #8]
 8006252:	e7df      	b.n	8006214 <_fflush_r+0x28>
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <_fflush_r+0x7c>)
 8006256:	429c      	cmp	r4, r3
 8006258:	d1dc      	bne.n	8006214 <_fflush_r+0x28>
 800625a:	68ec      	ldr	r4, [r5, #12]
 800625c:	e7da      	b.n	8006214 <_fflush_r+0x28>
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	08006974 	.word	0x08006974
 8006264:	08006994 	.word	0x08006994
 8006268:	08006954 	.word	0x08006954

0800626c <std>:
 800626c:	2300      	movs	r3, #0
 800626e:	b510      	push	{r4, lr}
 8006270:	0004      	movs	r4, r0
 8006272:	6003      	str	r3, [r0, #0]
 8006274:	6043      	str	r3, [r0, #4]
 8006276:	6083      	str	r3, [r0, #8]
 8006278:	8181      	strh	r1, [r0, #12]
 800627a:	6643      	str	r3, [r0, #100]	; 0x64
 800627c:	0019      	movs	r1, r3
 800627e:	81c2      	strh	r2, [r0, #14]
 8006280:	6103      	str	r3, [r0, #16]
 8006282:	6143      	str	r3, [r0, #20]
 8006284:	6183      	str	r3, [r0, #24]
 8006286:	2208      	movs	r2, #8
 8006288:	305c      	adds	r0, #92	; 0x5c
 800628a:	f7ff f99a 	bl	80055c2 <memset>
 800628e:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <std+0x38>)
 8006290:	6224      	str	r4, [r4, #32]
 8006292:	6263      	str	r3, [r4, #36]	; 0x24
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <std+0x3c>)
 8006296:	62a3      	str	r3, [r4, #40]	; 0x28
 8006298:	4b04      	ldr	r3, [pc, #16]	; (80062ac <std+0x40>)
 800629a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800629c:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <std+0x44>)
 800629e:	6323      	str	r3, [r4, #48]	; 0x30
 80062a0:	bd10      	pop	{r4, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	0800661d 	.word	0x0800661d
 80062a8:	08006645 	.word	0x08006645
 80062ac:	0800667d 	.word	0x0800667d
 80062b0:	080066a9 	.word	0x080066a9

080062b4 <_cleanup_r>:
 80062b4:	b510      	push	{r4, lr}
 80062b6:	4902      	ldr	r1, [pc, #8]	; (80062c0 <_cleanup_r+0xc>)
 80062b8:	f000 f8ba 	bl	8006430 <_fwalk_reent>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	080061ed 	.word	0x080061ed

080062c4 <__sfmoreglue>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	2568      	movs	r5, #104	; 0x68
 80062c8:	1e4a      	subs	r2, r1, #1
 80062ca:	4355      	muls	r5, r2
 80062cc:	000e      	movs	r6, r1
 80062ce:	0029      	movs	r1, r5
 80062d0:	3174      	adds	r1, #116	; 0x74
 80062d2:	f7ff fabd 	bl	8005850 <_malloc_r>
 80062d6:	1e04      	subs	r4, r0, #0
 80062d8:	d008      	beq.n	80062ec <__sfmoreglue+0x28>
 80062da:	2100      	movs	r1, #0
 80062dc:	002a      	movs	r2, r5
 80062de:	6001      	str	r1, [r0, #0]
 80062e0:	6046      	str	r6, [r0, #4]
 80062e2:	300c      	adds	r0, #12
 80062e4:	60a0      	str	r0, [r4, #8]
 80062e6:	3268      	adds	r2, #104	; 0x68
 80062e8:	f7ff f96b 	bl	80055c2 <memset>
 80062ec:	0020      	movs	r0, r4
 80062ee:	bd70      	pop	{r4, r5, r6, pc}

080062f0 <__sfp_lock_acquire>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	4802      	ldr	r0, [pc, #8]	; (80062fc <__sfp_lock_acquire+0xc>)
 80062f4:	f000 f8bd 	bl	8006472 <__retarget_lock_acquire_recursive>
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	200001b5 	.word	0x200001b5

08006300 <__sfp_lock_release>:
 8006300:	b510      	push	{r4, lr}
 8006302:	4802      	ldr	r0, [pc, #8]	; (800630c <__sfp_lock_release+0xc>)
 8006304:	f000 f8b6 	bl	8006474 <__retarget_lock_release_recursive>
 8006308:	bd10      	pop	{r4, pc}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	200001b5 	.word	0x200001b5

08006310 <__sinit_lock_acquire>:
 8006310:	b510      	push	{r4, lr}
 8006312:	4802      	ldr	r0, [pc, #8]	; (800631c <__sinit_lock_acquire+0xc>)
 8006314:	f000 f8ad 	bl	8006472 <__retarget_lock_acquire_recursive>
 8006318:	bd10      	pop	{r4, pc}
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	200001b6 	.word	0x200001b6

08006320 <__sinit_lock_release>:
 8006320:	b510      	push	{r4, lr}
 8006322:	4802      	ldr	r0, [pc, #8]	; (800632c <__sinit_lock_release+0xc>)
 8006324:	f000 f8a6 	bl	8006474 <__retarget_lock_release_recursive>
 8006328:	bd10      	pop	{r4, pc}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	200001b6 	.word	0x200001b6

08006330 <__sinit>:
 8006330:	b513      	push	{r0, r1, r4, lr}
 8006332:	0004      	movs	r4, r0
 8006334:	f7ff ffec 	bl	8006310 <__sinit_lock_acquire>
 8006338:	69a3      	ldr	r3, [r4, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <__sinit+0x14>
 800633e:	f7ff ffef 	bl	8006320 <__sinit_lock_release>
 8006342:	bd13      	pop	{r0, r1, r4, pc}
 8006344:	64a3      	str	r3, [r4, #72]	; 0x48
 8006346:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006348:	6523      	str	r3, [r4, #80]	; 0x50
 800634a:	4b13      	ldr	r3, [pc, #76]	; (8006398 <__sinit+0x68>)
 800634c:	4a13      	ldr	r2, [pc, #76]	; (800639c <__sinit+0x6c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	62a2      	str	r2, [r4, #40]	; 0x28
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	42a3      	cmp	r3, r4
 8006356:	d101      	bne.n	800635c <__sinit+0x2c>
 8006358:	2301      	movs	r3, #1
 800635a:	61a3      	str	r3, [r4, #24]
 800635c:	0020      	movs	r0, r4
 800635e:	f000 f81f 	bl	80063a0 <__sfp>
 8006362:	6060      	str	r0, [r4, #4]
 8006364:	0020      	movs	r0, r4
 8006366:	f000 f81b 	bl	80063a0 <__sfp>
 800636a:	60a0      	str	r0, [r4, #8]
 800636c:	0020      	movs	r0, r4
 800636e:	f000 f817 	bl	80063a0 <__sfp>
 8006372:	2200      	movs	r2, #0
 8006374:	2104      	movs	r1, #4
 8006376:	60e0      	str	r0, [r4, #12]
 8006378:	6860      	ldr	r0, [r4, #4]
 800637a:	f7ff ff77 	bl	800626c <std>
 800637e:	2201      	movs	r2, #1
 8006380:	2109      	movs	r1, #9
 8006382:	68a0      	ldr	r0, [r4, #8]
 8006384:	f7ff ff72 	bl	800626c <std>
 8006388:	2202      	movs	r2, #2
 800638a:	2112      	movs	r1, #18
 800638c:	68e0      	ldr	r0, [r4, #12]
 800638e:	f7ff ff6d 	bl	800626c <std>
 8006392:	2301      	movs	r3, #1
 8006394:	61a3      	str	r3, [r4, #24]
 8006396:	e7d2      	b.n	800633e <__sinit+0xe>
 8006398:	0800686c 	.word	0x0800686c
 800639c:	080062b5 	.word	0x080062b5

080063a0 <__sfp>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	0007      	movs	r7, r0
 80063a4:	f7ff ffa4 	bl	80062f0 <__sfp_lock_acquire>
 80063a8:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <__sfp+0x88>)
 80063aa:	681e      	ldr	r6, [r3, #0]
 80063ac:	69b3      	ldr	r3, [r6, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <__sfp+0x18>
 80063b2:	0030      	movs	r0, r6
 80063b4:	f7ff ffbc 	bl	8006330 <__sinit>
 80063b8:	3648      	adds	r6, #72	; 0x48
 80063ba:	68b4      	ldr	r4, [r6, #8]
 80063bc:	6873      	ldr	r3, [r6, #4]
 80063be:	3b01      	subs	r3, #1
 80063c0:	d504      	bpl.n	80063cc <__sfp+0x2c>
 80063c2:	6833      	ldr	r3, [r6, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d022      	beq.n	800640e <__sfp+0x6e>
 80063c8:	6836      	ldr	r6, [r6, #0]
 80063ca:	e7f6      	b.n	80063ba <__sfp+0x1a>
 80063cc:	220c      	movs	r2, #12
 80063ce:	5ea5      	ldrsh	r5, [r4, r2]
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	d11a      	bne.n	800640a <__sfp+0x6a>
 80063d4:	0020      	movs	r0, r4
 80063d6:	4b15      	ldr	r3, [pc, #84]	; (800642c <__sfp+0x8c>)
 80063d8:	3058      	adds	r0, #88	; 0x58
 80063da:	60e3      	str	r3, [r4, #12]
 80063dc:	6665      	str	r5, [r4, #100]	; 0x64
 80063de:	f000 f847 	bl	8006470 <__retarget_lock_init_recursive>
 80063e2:	f7ff ff8d 	bl	8006300 <__sfp_lock_release>
 80063e6:	0020      	movs	r0, r4
 80063e8:	2208      	movs	r2, #8
 80063ea:	0029      	movs	r1, r5
 80063ec:	6025      	str	r5, [r4, #0]
 80063ee:	60a5      	str	r5, [r4, #8]
 80063f0:	6065      	str	r5, [r4, #4]
 80063f2:	6125      	str	r5, [r4, #16]
 80063f4:	6165      	str	r5, [r4, #20]
 80063f6:	61a5      	str	r5, [r4, #24]
 80063f8:	305c      	adds	r0, #92	; 0x5c
 80063fa:	f7ff f8e2 	bl	80055c2 <memset>
 80063fe:	6365      	str	r5, [r4, #52]	; 0x34
 8006400:	63a5      	str	r5, [r4, #56]	; 0x38
 8006402:	64a5      	str	r5, [r4, #72]	; 0x48
 8006404:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006406:	0020      	movs	r0, r4
 8006408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800640a:	3468      	adds	r4, #104	; 0x68
 800640c:	e7d7      	b.n	80063be <__sfp+0x1e>
 800640e:	2104      	movs	r1, #4
 8006410:	0038      	movs	r0, r7
 8006412:	f7ff ff57 	bl	80062c4 <__sfmoreglue>
 8006416:	1e04      	subs	r4, r0, #0
 8006418:	6030      	str	r0, [r6, #0]
 800641a:	d1d5      	bne.n	80063c8 <__sfp+0x28>
 800641c:	f7ff ff70 	bl	8006300 <__sfp_lock_release>
 8006420:	230c      	movs	r3, #12
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	e7ef      	b.n	8006406 <__sfp+0x66>
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	0800686c 	.word	0x0800686c
 800642c:	ffff0001 	.word	0xffff0001

08006430 <_fwalk_reent>:
 8006430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006432:	0004      	movs	r4, r0
 8006434:	0006      	movs	r6, r0
 8006436:	2700      	movs	r7, #0
 8006438:	9101      	str	r1, [sp, #4]
 800643a:	3448      	adds	r4, #72	; 0x48
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	68a5      	ldr	r5, [r4, #8]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	9b00      	ldr	r3, [sp, #0]
 8006444:	3b01      	subs	r3, #1
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	d504      	bpl.n	8006454 <_fwalk_reent+0x24>
 800644a:	6824      	ldr	r4, [r4, #0]
 800644c:	2c00      	cmp	r4, #0
 800644e:	d1f5      	bne.n	800643c <_fwalk_reent+0xc>
 8006450:	0038      	movs	r0, r7
 8006452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006454:	89ab      	ldrh	r3, [r5, #12]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d908      	bls.n	800646c <_fwalk_reent+0x3c>
 800645a:	220e      	movs	r2, #14
 800645c:	5eab      	ldrsh	r3, [r5, r2]
 800645e:	3301      	adds	r3, #1
 8006460:	d004      	beq.n	800646c <_fwalk_reent+0x3c>
 8006462:	0029      	movs	r1, r5
 8006464:	0030      	movs	r0, r6
 8006466:	9b01      	ldr	r3, [sp, #4]
 8006468:	4798      	blx	r3
 800646a:	4307      	orrs	r7, r0
 800646c:	3568      	adds	r5, #104	; 0x68
 800646e:	e7e8      	b.n	8006442 <_fwalk_reent+0x12>

08006470 <__retarget_lock_init_recursive>:
 8006470:	4770      	bx	lr

08006472 <__retarget_lock_acquire_recursive>:
 8006472:	4770      	bx	lr

08006474 <__retarget_lock_release_recursive>:
 8006474:	4770      	bx	lr
	...

08006478 <__swhatbuf_r>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	000e      	movs	r6, r1
 800647c:	001d      	movs	r5, r3
 800647e:	230e      	movs	r3, #14
 8006480:	5ec9      	ldrsh	r1, [r1, r3]
 8006482:	0014      	movs	r4, r2
 8006484:	b096      	sub	sp, #88	; 0x58
 8006486:	2900      	cmp	r1, #0
 8006488:	da08      	bge.n	800649c <__swhatbuf_r+0x24>
 800648a:	220c      	movs	r2, #12
 800648c:	5eb3      	ldrsh	r3, [r6, r2]
 800648e:	2200      	movs	r2, #0
 8006490:	602a      	str	r2, [r5, #0]
 8006492:	061b      	lsls	r3, r3, #24
 8006494:	d411      	bmi.n	80064ba <__swhatbuf_r+0x42>
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	e00f      	b.n	80064bc <__swhatbuf_r+0x44>
 800649c:	466a      	mov	r2, sp
 800649e:	f000 f92f 	bl	8006700 <_fstat_r>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	dbf1      	blt.n	800648a <__swhatbuf_r+0x12>
 80064a6:	23f0      	movs	r3, #240	; 0xf0
 80064a8:	9901      	ldr	r1, [sp, #4]
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	4019      	ands	r1, r3
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <__swhatbuf_r+0x4c>)
 80064b0:	18c9      	adds	r1, r1, r3
 80064b2:	424b      	negs	r3, r1
 80064b4:	4159      	adcs	r1, r3
 80064b6:	6029      	str	r1, [r5, #0]
 80064b8:	e7ed      	b.n	8006496 <__swhatbuf_r+0x1e>
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	2000      	movs	r0, #0
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	b016      	add	sp, #88	; 0x58
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	ffffe000 	.word	0xffffe000

080064c8 <__smakebuf_r>:
 80064c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ca:	2602      	movs	r6, #2
 80064cc:	898b      	ldrh	r3, [r1, #12]
 80064ce:	0005      	movs	r5, r0
 80064d0:	000c      	movs	r4, r1
 80064d2:	4233      	tst	r3, r6
 80064d4:	d006      	beq.n	80064e4 <__smakebuf_r+0x1c>
 80064d6:	0023      	movs	r3, r4
 80064d8:	3347      	adds	r3, #71	; 0x47
 80064da:	6023      	str	r3, [r4, #0]
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	2301      	movs	r3, #1
 80064e0:	6163      	str	r3, [r4, #20]
 80064e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80064e4:	466a      	mov	r2, sp
 80064e6:	ab01      	add	r3, sp, #4
 80064e8:	f7ff ffc6 	bl	8006478 <__swhatbuf_r>
 80064ec:	9900      	ldr	r1, [sp, #0]
 80064ee:	0007      	movs	r7, r0
 80064f0:	0028      	movs	r0, r5
 80064f2:	f7ff f9ad 	bl	8005850 <_malloc_r>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d108      	bne.n	800650c <__smakebuf_r+0x44>
 80064fa:	220c      	movs	r2, #12
 80064fc:	5ea3      	ldrsh	r3, [r4, r2]
 80064fe:	059a      	lsls	r2, r3, #22
 8006500:	d4ef      	bmi.n	80064e2 <__smakebuf_r+0x1a>
 8006502:	2203      	movs	r2, #3
 8006504:	4393      	bics	r3, r2
 8006506:	431e      	orrs	r6, r3
 8006508:	81a6      	strh	r6, [r4, #12]
 800650a:	e7e4      	b.n	80064d6 <__smakebuf_r+0xe>
 800650c:	4b0f      	ldr	r3, [pc, #60]	; (800654c <__smakebuf_r+0x84>)
 800650e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	89a2      	ldrh	r2, [r4, #12]
 8006514:	6020      	str	r0, [r4, #0]
 8006516:	4313      	orrs	r3, r2
 8006518:	81a3      	strh	r3, [r4, #12]
 800651a:	9b00      	ldr	r3, [sp, #0]
 800651c:	6120      	str	r0, [r4, #16]
 800651e:	6163      	str	r3, [r4, #20]
 8006520:	9b01      	ldr	r3, [sp, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00d      	beq.n	8006542 <__smakebuf_r+0x7a>
 8006526:	0028      	movs	r0, r5
 8006528:	230e      	movs	r3, #14
 800652a:	5ee1      	ldrsh	r1, [r4, r3]
 800652c:	f000 f8fa 	bl	8006724 <_isatty_r>
 8006530:	2800      	cmp	r0, #0
 8006532:	d006      	beq.n	8006542 <__smakebuf_r+0x7a>
 8006534:	2203      	movs	r2, #3
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	4393      	bics	r3, r2
 800653a:	001a      	movs	r2, r3
 800653c:	2301      	movs	r3, #1
 800653e:	4313      	orrs	r3, r2
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	89a0      	ldrh	r0, [r4, #12]
 8006544:	4307      	orrs	r7, r0
 8006546:	81a7      	strh	r7, [r4, #12]
 8006548:	e7cb      	b.n	80064e2 <__smakebuf_r+0x1a>
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	080062b5 	.word	0x080062b5

08006550 <memchr>:
 8006550:	b2c9      	uxtb	r1, r1
 8006552:	1882      	adds	r2, r0, r2
 8006554:	4290      	cmp	r0, r2
 8006556:	d101      	bne.n	800655c <memchr+0xc>
 8006558:	2000      	movs	r0, #0
 800655a:	4770      	bx	lr
 800655c:	7803      	ldrb	r3, [r0, #0]
 800655e:	428b      	cmp	r3, r1
 8006560:	d0fb      	beq.n	800655a <memchr+0xa>
 8006562:	3001      	adds	r0, #1
 8006564:	e7f6      	b.n	8006554 <memchr+0x4>
	...

08006568 <__malloc_lock>:
 8006568:	b510      	push	{r4, lr}
 800656a:	4802      	ldr	r0, [pc, #8]	; (8006574 <__malloc_lock+0xc>)
 800656c:	f7ff ff81 	bl	8006472 <__retarget_lock_acquire_recursive>
 8006570:	bd10      	pop	{r4, pc}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	200001b4 	.word	0x200001b4

08006578 <__malloc_unlock>:
 8006578:	b510      	push	{r4, lr}
 800657a:	4802      	ldr	r0, [pc, #8]	; (8006584 <__malloc_unlock+0xc>)
 800657c:	f7ff ff7a 	bl	8006474 <__retarget_lock_release_recursive>
 8006580:	bd10      	pop	{r4, pc}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	200001b4 	.word	0x200001b4

08006588 <_raise_r>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	0004      	movs	r4, r0
 800658c:	000d      	movs	r5, r1
 800658e:	291f      	cmp	r1, #31
 8006590:	d904      	bls.n	800659c <_raise_r+0x14>
 8006592:	2316      	movs	r3, #22
 8006594:	6003      	str	r3, [r0, #0]
 8006596:	2001      	movs	r0, #1
 8006598:	4240      	negs	r0, r0
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <_raise_r+0x24>
 80065a2:	008a      	lsls	r2, r1, #2
 80065a4:	189b      	adds	r3, r3, r2
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	2a00      	cmp	r2, #0
 80065aa:	d108      	bne.n	80065be <_raise_r+0x36>
 80065ac:	0020      	movs	r0, r4
 80065ae:	f000 f831 	bl	8006614 <_getpid_r>
 80065b2:	002a      	movs	r2, r5
 80065b4:	0001      	movs	r1, r0
 80065b6:	0020      	movs	r0, r4
 80065b8:	f000 f81a 	bl	80065f0 <_kill_r>
 80065bc:	e7ed      	b.n	800659a <_raise_r+0x12>
 80065be:	2000      	movs	r0, #0
 80065c0:	2a01      	cmp	r2, #1
 80065c2:	d0ea      	beq.n	800659a <_raise_r+0x12>
 80065c4:	1c51      	adds	r1, r2, #1
 80065c6:	d103      	bne.n	80065d0 <_raise_r+0x48>
 80065c8:	2316      	movs	r3, #22
 80065ca:	3001      	adds	r0, #1
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	e7e4      	b.n	800659a <_raise_r+0x12>
 80065d0:	2400      	movs	r4, #0
 80065d2:	0028      	movs	r0, r5
 80065d4:	601c      	str	r4, [r3, #0]
 80065d6:	4790      	blx	r2
 80065d8:	0020      	movs	r0, r4
 80065da:	e7de      	b.n	800659a <_raise_r+0x12>

080065dc <raise>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	4b03      	ldr	r3, [pc, #12]	; (80065ec <raise+0x10>)
 80065e0:	0001      	movs	r1, r0
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	f7ff ffd0 	bl	8006588 <_raise_r>
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	46c0      	nop			; (mov r8, r8)
 80065ec:	2000008c 	.word	0x2000008c

080065f0 <_kill_r>:
 80065f0:	2300      	movs	r3, #0
 80065f2:	b570      	push	{r4, r5, r6, lr}
 80065f4:	4d06      	ldr	r5, [pc, #24]	; (8006610 <_kill_r+0x20>)
 80065f6:	0004      	movs	r4, r0
 80065f8:	0008      	movs	r0, r1
 80065fa:	0011      	movs	r1, r2
 80065fc:	602b      	str	r3, [r5, #0]
 80065fe:	f7fc fd92 	bl	8003126 <_kill>
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	d103      	bne.n	800660e <_kill_r+0x1e>
 8006606:	682b      	ldr	r3, [r5, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d000      	beq.n	800660e <_kill_r+0x1e>
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	200001b0 	.word	0x200001b0

08006614 <_getpid_r>:
 8006614:	b510      	push	{r4, lr}
 8006616:	f7fc fd80 	bl	800311a <_getpid>
 800661a:	bd10      	pop	{r4, pc}

0800661c <__sread>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	000c      	movs	r4, r1
 8006620:	250e      	movs	r5, #14
 8006622:	5f49      	ldrsh	r1, [r1, r5]
 8006624:	f000 f8a4 	bl	8006770 <_read_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	db03      	blt.n	8006634 <__sread+0x18>
 800662c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800662e:	181b      	adds	r3, r3, r0
 8006630:	6563      	str	r3, [r4, #84]	; 0x54
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	4a02      	ldr	r2, [pc, #8]	; (8006640 <__sread+0x24>)
 8006638:	4013      	ands	r3, r2
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	e7f9      	b.n	8006632 <__sread+0x16>
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	ffffefff 	.word	0xffffefff

08006644 <__swrite>:
 8006644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006646:	001f      	movs	r7, r3
 8006648:	898b      	ldrh	r3, [r1, #12]
 800664a:	0005      	movs	r5, r0
 800664c:	000c      	movs	r4, r1
 800664e:	0016      	movs	r6, r2
 8006650:	05db      	lsls	r3, r3, #23
 8006652:	d505      	bpl.n	8006660 <__swrite+0x1c>
 8006654:	230e      	movs	r3, #14
 8006656:	5ec9      	ldrsh	r1, [r1, r3]
 8006658:	2200      	movs	r2, #0
 800665a:	2302      	movs	r3, #2
 800665c:	f000 f874 	bl	8006748 <_lseek_r>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	4a05      	ldr	r2, [pc, #20]	; (8006678 <__swrite+0x34>)
 8006664:	0028      	movs	r0, r5
 8006666:	4013      	ands	r3, r2
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	0032      	movs	r2, r6
 800666c:	230e      	movs	r3, #14
 800666e:	5ee1      	ldrsh	r1, [r4, r3]
 8006670:	003b      	movs	r3, r7
 8006672:	f000 f81f 	bl	80066b4 <_write_r>
 8006676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006678:	ffffefff 	.word	0xffffefff

0800667c <__sseek>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	000c      	movs	r4, r1
 8006680:	250e      	movs	r5, #14
 8006682:	5f49      	ldrsh	r1, [r1, r5]
 8006684:	f000 f860 	bl	8006748 <_lseek_r>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	1c42      	adds	r2, r0, #1
 800668c:	d103      	bne.n	8006696 <__sseek+0x1a>
 800668e:	4a05      	ldr	r2, [pc, #20]	; (80066a4 <__sseek+0x28>)
 8006690:	4013      	ands	r3, r2
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	bd70      	pop	{r4, r5, r6, pc}
 8006696:	2280      	movs	r2, #128	; 0x80
 8006698:	0152      	lsls	r2, r2, #5
 800669a:	4313      	orrs	r3, r2
 800669c:	81a3      	strh	r3, [r4, #12]
 800669e:	6560      	str	r0, [r4, #84]	; 0x54
 80066a0:	e7f8      	b.n	8006694 <__sseek+0x18>
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	ffffefff 	.word	0xffffefff

080066a8 <__sclose>:
 80066a8:	b510      	push	{r4, lr}
 80066aa:	230e      	movs	r3, #14
 80066ac:	5ec9      	ldrsh	r1, [r1, r3]
 80066ae:	f000 f815 	bl	80066dc <_close_r>
 80066b2:	bd10      	pop	{r4, pc}

080066b4 <_write_r>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	0004      	movs	r4, r0
 80066b8:	0008      	movs	r0, r1
 80066ba:	0011      	movs	r1, r2
 80066bc:	001a      	movs	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	4d05      	ldr	r5, [pc, #20]	; (80066d8 <_write_r+0x24>)
 80066c2:	602b      	str	r3, [r5, #0]
 80066c4:	f7fc fd68 	bl	8003198 <_write>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d103      	bne.n	80066d4 <_write_r+0x20>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d000      	beq.n	80066d4 <_write_r+0x20>
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	200001b0 	.word	0x200001b0

080066dc <_close_r>:
 80066dc:	2300      	movs	r3, #0
 80066de:	b570      	push	{r4, r5, r6, lr}
 80066e0:	4d06      	ldr	r5, [pc, #24]	; (80066fc <_close_r+0x20>)
 80066e2:	0004      	movs	r4, r0
 80066e4:	0008      	movs	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fc fd72 	bl	80031d0 <_close>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d103      	bne.n	80066f8 <_close_r+0x1c>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d000      	beq.n	80066f8 <_close_r+0x1c>
 80066f6:	6023      	str	r3, [r4, #0]
 80066f8:	bd70      	pop	{r4, r5, r6, pc}
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	200001b0 	.word	0x200001b0

08006700 <_fstat_r>:
 8006700:	2300      	movs	r3, #0
 8006702:	b570      	push	{r4, r5, r6, lr}
 8006704:	4d06      	ldr	r5, [pc, #24]	; (8006720 <_fstat_r+0x20>)
 8006706:	0004      	movs	r4, r0
 8006708:	0008      	movs	r0, r1
 800670a:	0011      	movs	r1, r2
 800670c:	602b      	str	r3, [r5, #0]
 800670e:	f7fc fd69 	bl	80031e4 <_fstat>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	d103      	bne.n	800671e <_fstat_r+0x1e>
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d000      	beq.n	800671e <_fstat_r+0x1e>
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	200001b0 	.word	0x200001b0

08006724 <_isatty_r>:
 8006724:	2300      	movs	r3, #0
 8006726:	b570      	push	{r4, r5, r6, lr}
 8006728:	4d06      	ldr	r5, [pc, #24]	; (8006744 <_isatty_r+0x20>)
 800672a:	0004      	movs	r4, r0
 800672c:	0008      	movs	r0, r1
 800672e:	602b      	str	r3, [r5, #0]
 8006730:	f7fc fd66 	bl	8003200 <_isatty>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d103      	bne.n	8006740 <_isatty_r+0x1c>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d000      	beq.n	8006740 <_isatty_r+0x1c>
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	bd70      	pop	{r4, r5, r6, pc}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	200001b0 	.word	0x200001b0

08006748 <_lseek_r>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	0004      	movs	r4, r0
 800674c:	0008      	movs	r0, r1
 800674e:	0011      	movs	r1, r2
 8006750:	001a      	movs	r2, r3
 8006752:	2300      	movs	r3, #0
 8006754:	4d05      	ldr	r5, [pc, #20]	; (800676c <_lseek_r+0x24>)
 8006756:	602b      	str	r3, [r5, #0]
 8006758:	f7fc fd5b 	bl	8003212 <_lseek>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d103      	bne.n	8006768 <_lseek_r+0x20>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d000      	beq.n	8006768 <_lseek_r+0x20>
 8006766:	6023      	str	r3, [r4, #0]
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	200001b0 	.word	0x200001b0

08006770 <_read_r>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	0004      	movs	r4, r0
 8006774:	0008      	movs	r0, r1
 8006776:	0011      	movs	r1, r2
 8006778:	001a      	movs	r2, r3
 800677a:	2300      	movs	r3, #0
 800677c:	4d05      	ldr	r5, [pc, #20]	; (8006794 <_read_r+0x24>)
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fc fced 	bl	800315e <_read>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d103      	bne.n	8006790 <_read_r+0x20>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d000      	beq.n	8006790 <_read_r+0x20>
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	bd70      	pop	{r4, r5, r6, pc}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	200001b0 	.word	0x200001b0

08006798 <_gettimeofday>:
 8006798:	2258      	movs	r2, #88	; 0x58
 800679a:	2001      	movs	r0, #1
 800679c:	4b01      	ldr	r3, [pc, #4]	; (80067a4 <_gettimeofday+0xc>)
 800679e:	4240      	negs	r0, r0
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	4770      	bx	lr
 80067a4:	200001b0 	.word	0x200001b0

080067a8 <_init>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ae:	bc08      	pop	{r3}
 80067b0:	469e      	mov	lr, r3
 80067b2:	4770      	bx	lr

080067b4 <_fini>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr
